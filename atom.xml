<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2018-04-02T11:00:00+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[フリーランスになって4年が経った]]></title>
    <link href="http://mizzy.org/blog/2018/04/02/1/" />
    <updated>2018-04-02T11:00:00+09:00</updated>
    <id>http://mizzy.org/blog/2018/04/02/1/</id>
    <content type="html"><![CDATA[
<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">フリーランスとして食っていけなくなったのでアルバイト始めました <a href="https://t.co/AG92ed5xsI">pic.twitter.com/AG92ed5xsI</a></p>&mdash; Gosuke Miyashita (mizzy) (@gosukenator) <a href="https://twitter.com/gosukenator/status/977210157024256000?ref_src=twsrc%5Etfw">March 23, 2018</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>このツイートは、たまたまセブンイレブンの制服を着る機会があったので着てみたついでに撮影して冗談でツイートしただけ。ツイートした後に、あ、これエイプリルフールネタにとっておけば良かった、と思った。</p>

<hr>

<h2>仕事について</h2>

<p>昨年も一昨年と同様、<a href="http://atl.recruit-tech.co.jp/">リクルートテクノロジーズ ATL</a> での仕事がメインで、それ以外には golang でミドルウェアを実装する仕事や技術顧問的な仕事が少し、という感じだった。</p>

<p>ATL の仕事としては、<a href="http://atl.recruit-tech.co.jp/blog/4339/">libspecinfra</a> の開発をしていたけど、昨年いっぱいで契約が終了した。libspecinfra の開発は続けたいと思いつつも、仕事として時間が割けなくなったので、現在開発は停止状態。</p>

<p>ATL の仕事が昨年末で終了したことで、今年から仕事の仕方ががらっと変わった。昨年までは掛け持ちは多いときでも2社、大半の期間は掛け持ちせず1社だけ、という感じだったけど、現在は4社（<a href="http://www.recruit-mp.co.jp/">リクルートマーケティングパートナーズ</a>、<a href="https://www.talentio.co.jp/">タレンティオ</a>、<a href="https://corp.toreta.in/">トレタ</a>、<a href="https://aktsk.jp/">アカツキ</a>）を掛け持ちしている。また、ATL の仕事は現場から少し離れていたけど、今は割と現場に近い位置で仕事している。4社掛け持ち、コンテキストスイッチ大きそうだけど大丈夫かな、と思ったけど、ほとんどリモートでの仕事で、厳密に時間管理されているわけでもなく、曜日や時間が固定されているわけでもないので、自分の裁量で適当に時間配分しながら、今のところは無理なく回せている。</p>

<p>仕事内容的には、OSS（<a href="https://github.com/aktsk/nolmandy">aktsk/nolmandy</a> と <a href="https://github.com/aktsk/kalvados">aktsk/kalvados</a>）の開発をしたり、OSやミドルウェアのアップグレードのお手伝いをしたり、監視周りの整備をしたり、ログ収集基盤の導入をお手伝いしたり、壁打ち役になったり、など様々。</p>

<p>ATL の仕事をしていた頃は、収入の9割を依存していたので、契約切れて次の仕事が見つからなかったら収入がなくなる、という不安があった。昨年9月にはこんなツイートしてる。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">割と余裕どころか、来年から仕事なくなる可能性も出てきたので、仕事ください。 <a href="https://t.co/VjpP8FxL7a">https://t.co/VjpP8FxL7a</a></p>&mdash; Gosuke Miyashita (mizzy) (@gosukenator) <a href="https://twitter.com/gosukenator/status/905662381497270274?ref_src=twsrc%5Etfw">September 7, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>他にもこんな職探しツイートもしてた。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">来年1月からの仕事が未定なので、これを実行する時が来たか <a href="https://t.co/Aj6EkIpJ8y">https://t.co/Aj6EkIpJ8y</a></p>&mdash; Gosuke Miyashita (mizzy) (@gosukenator) <a href="https://twitter.com/gosukenator/status/929987306441732096?ref_src=twsrc%5Etfw">November 13, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ツイートしてたら仕事がもらえた。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ありがたいことに、色々お声がけいただいて、1月以降も妻と5人の子供を養っていけそうです。 <a href="https://t.co/20Ars6agrt">https://t.co/20Ars6agrt</a></p>&mdash; Gosuke Miyashita (mizzy) (@gosukenator) <a href="https://twitter.com/gosukenator/status/936186019832987651?ref_src=twsrc%5Etfw">November 30, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>昨年12月から今年1月にかけては、お声がけいただいた企業さんを訪問して話を聞いたり、仕事の詳細を詰めるための打合せをしたりで、外出することが多かった。2月以降はほとんど家で仕事していて、仕事で外出するのは月に2，3回程度になった。花粉症の季節にあまり外に出なくて良いのはありがたい。</p>

<p>4社掛け持ち、コンテキストスイッチの増大と、一社あたりにかける時間が減ることで、進捗が遅くなるというデメリットがあるけど、収入の依存先が分散されているという安心感もある。</p>

<hr>

<h2>名刺をつくった</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/nagayama?ref_src=twsrc%5Etfw">@nagayama</a> 氏につくってもらったカッコいい名刺届いた。オモテ面、ロゴと名前だけなのがインパクトあって良い。 <a href="https://t.co/rw7a6GnQ6P">pic.twitter.com/rw7a6GnQ6P</a></p>&mdash; Gosuke Miyashita (mizzy) (@gosukenator) <a href="https://twitter.com/gosukenator/status/968379806051074049?ref_src=twsrc%5Etfw">February 27, 2018</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>仕事上、名刺がなくて困ることはほぼないので、つくらなくてもいいか、と思っていたけど、あると便利な時もあるので、法人化してから2年経ってようやくつくった。</p>

<hr>

<h2>収入について</h2>

<p>フリーランスになってからの収入の構成要素、3年目に法人化したのもあって、以下のように変遷している。</p>

<ul>
<li>1年目: 前職の給与収入 + 個人事業収入</li>
<li>2年目: 個人事業収入</li>
<li>3年目: 個人事業収入 + 役員報酬</li>
<li>4年目: 役員報酬</li>
</ul>

<p>個人事業収入は事業売上がすべて個人の収入、役員報酬は自分の会社の売上の一部が個人の収入になっている。なので、すべての事業売上が個人の収入となっている2年目が収入のピークで、3年目、4年目と収入は下がっている。</p>

<p>が、それはあくまでも個人としての収入の話で、法人個人問わず事業全体の売上で言えば、2年目以降は割と安定している。今年も同じぐらいの売上になりそう。</p>

<hr>

<h2>本業以外の仕事</h2>

<p>昨年末から今年の初めにかけて、コラムを3本寄稿して、インタビューを1本受けた。</p>

<ul>
<li><a href="https://hikakujoho.com/manekai/entry/20171207">独立間もないフリーランス＆5人子持ちの四十男が「家」を建てた話 - マネ会</a></li>
<li><a href="https://employment.en-japan.com/engineerhub/entry/2018/01/31/110000">「一つのことをうまくやる」に忠実たれ。Serverspec開発者mizzyが語る成功するOSSの設計 - エンジニアHub｜若手Webエンジニアのキャリアを考える！</a></li>
<li><a href="https://geek-out.jp/column/entry/2018/03/08/110000">オープンさは私のキャリアの原動力 ─ SIer、Web系、フリーランスという変遷で実感した「オープンにすること」の大切さ - GeekOut</a></li>
<li>まだ未公開の家の書斎に関するコラム。もうすぐ公開予定。</li>
</ul>

<p>コラムのうち2本は技術とはまったく関係ない、家のことについて書いた。</p>

<hr>

<h2>まとめ</h2>

<p>Twitter は優秀な職探しツール。</p>

<hr>

<h2>関連エントリ</h2>

<ul>
<li><a href="http://mizzy.org/blog/2017/04/01/1/">フリーランスになって3年が経った - Gosuke Miyashita</a></li>
<li><a href="http://mizzy.org/blog/2016/04/01/1/">フリーランスになって2年が経った - Gosuke Miyashita</a></li>
<li><a href="http://mizzy.org/blog/2015/04/01/1/">フリーランスになって1年が経った - Gosuke Miyashita</a></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[アレクサ スマホを探してでスマホを鳴らすやつ]]></title>
    <link href="http://mizzy.org/blog/2017/12/14/1/" />
    <updated>2017-12-14T14:16:35+09:00</updated>
    <id>http://mizzy.org/blog/2017/12/14/1/</id>
    <content type="html"><![CDATA[
<iframe width="560" height="315" src="https://www.youtube.com/embed/ejXWG8fOyjA" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

<p><a href="https://github.com/mizzy/alexa-findmyphone">Lambda Function のソースコードはこちら</a>。</p>

<hr>

<h2>これは何？</h2>

<p>「アレクサ、スマホを探すを開いて」<br>
「誰のスマホを探しますか」<br>
「長男」<br>
「長男のスマホを鳴らしています」  </p>

<p>といった感じで、アレクサからスマホに電話をかけてもらい、スマホを探すやつ。</p>

<hr>

<h2>つくった動機</h2>

<p>家の中で iPhone を見失った場合、パソコンや妻の iPhone から「iPhoneを探す」にアクセスして音を鳴らしていたけど、パソコンを開いてブラウザからアクセスしたり、妻の iPhone を借りたり、といった手間がかかっていたので、声だけで実現できるようにしたかった。</p>

<p>ifttt でも同様のことができるけど、US Only だったり、既存のアレクサスキルだと、アプリを入れる必要があったり、複数の端末に対応してるのかわからなかったりしたので、自分でつくることにした。</p>

<p>基本的なつくりは <a href="http://mizzy.org/blog/2017/12/12/1/">アレクサごはんだよで LINE 通知するやつ</a> と同じで、LINE API 叩くところが Twilio API 叩くだけ、といった感じなので、さくっとつくれた。</p>

<hr>

<h2>使い方</h2>

<p><a href="https://github.com/mizzy/alexa-findmyphone#%E4%BD%BF%E3%81%84%E6%96%B9">GitHub 上の README</a> を参照。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[アレクサ ごはんだよで LINE 通知するやつをつくった]]></title>
    <link href="http://mizzy.org/blog/2017/12/12/1/" />
    <updated>2017-12-12T15:20:52+09:00</updated>
    <id>http://mizzy.org/blog/2017/12/12/1/</id>
    <content type="html"><![CDATA[
<iframe width="560" height="315" src="https://www.youtube.com/embed/wxj7vpirw-k" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

<p><a href="https://github.com/mizzy/alexa-gohan">Lambda Function のソースコードはこちら</a>。</p>

<hr>

<h2>これは何？</h2>

<p>「アレクサ、ごはんだよを開いて」<br>
「誰にごはんだよと伝えますか」<br>
「長男」<br>
「長男にごはんだよと伝えました」  </p>

<p>といった感じで、アレクサから家族の誰かに、ごはんができたことを LINE してもらうやつ。</p>

<p>「アレクサ、ごはんだよ 長男」でも呼び出せるようにはなっているけど、認識率が悪く、10回に1回ぐらいしか認識しない。</p>

<hr>

<h2>つくった動機</h2>

<p>飯の支度ができて「ごはんだよ」と叫んでも、長男や次男は部屋の中でイヤホンつけて音楽聴いていて、声が届かないことがよくある。そういう時は LINE で知らせてるけど、いちいちスマホを手にとって、LINE を開いて、友達リストから息子達を探して…とやるのは手間がかかる。家事をしてる最中は特に面倒。</p>

<p>なので、声だけで LINE でごはんだよと通知できるやつをつくった。</p>

<hr>

<h2>使い方</h2>

<p><a href="https://github.com/mizzy/alexa-gohan#%E4%BD%BF%E3%81%84%E6%96%B9">GitHub 上の README</a> を参照。</p>

<hr>

<h2>TODO</h2>

<ul>
<li>全員にブロードキャストもできるようにしたい。</li>
<li>メッセージが「ごはん」の1パターンだけなので、バリエーションを増やしたい。

<ul>
<li>現在時刻を識別して「晩ご飯できたよ」と送る、とか。</li>
</ul></li>
</ul>

<hr>

<h2>FAQ</h2>

<h3>誰に送るか指定しなくてもブロードキャストするだけでいいのでは？</h3>

<p>長男は塾や習い事がある日は早めに食べる、など、全員が同じタイミングで食事するわけではないので。</p>

<h3>それ Clova WAVE とか Clova Friends とかでできるよ</h3>

<p>とりあえず手元にあるのが Amazon Echo Dot だけだし、アレクサスキルの開発方法を学んでみたかったし、API Gateway とか Lambda とか触ってみたかったので。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Rust で D-Bus 経由で systemd から情報を得る]]></title>
    <link href="http://mizzy.org/blog/2017/10/11/1/" />
    <updated>2017-10-11T12:29:40+09:00</updated>
    <id>http://mizzy.org/blog/2017/10/11/1/</id>
    <content type="html"><![CDATA[
<p>色々試行錯誤したのでメモ。</p>

<hr>

<h2>結論</h2>

<p><a href="https://crates.io/crates/dbus">dbus crate</a> を使う。</p>

<hr>

<h2>経緯</h2>

<p>開発中の <a href="http://atl.recruit-tech.co.jp/blog/4339/">libspecinfra</a> で、systemd 配下の service の状態を取得できるようにするための provider を書こうと思い、色々調べたりコード書いて試したりした。</p>

<hr>

<h2>使えそうな crates を探す</h2>

<p>まずは目的に合う crates がないか <a href="https://crates.io/">crates.io</a> で検索。ざっと以下のようなものが見つかる。</p>

<ul>
<li><a href="https://crates.io/crates/systemd">systemd</a></li>
<li><a href="https://crates.io/crates/systemd-dbus">systemd-dbus</a></li>
<li><a href="https://crates.io/crates/dbus">dbus</a></li>
<li><a href="https://crates.io/crates/dbus-bytestream">dbus-bytestream</a></li>
</ul>

<p>systemd crate は <a href="https://github.com/systemd/systemd/tree/master/src/libsystemd">libsystemd</a> の Rust インターフェースで、<a href="https://www.freedesktop.org/software/systemd/man/sd-daemon.html">sd-daemon</a>、<a href="https://www.freedesktop.org/software/systemd/man/sd-id128.html">sd-id128</a>、<a href="https://www.freedesktop.org/software/systemd/man/sd-journal.html">sd-journal</a>、<a href="https://www.freedesktop.org/software/systemd/man/sd-login.html">sd-login </a> に対応している。が <a href="https://www.freedesktop.org/software/systemd/man/sd-bus.html">sd-bus</a> は <a href="https://github.com/jmesmon/rust-systemd/blob/aead34dcf64e90014da0fadfe54ea439a19ce8c4/src/lib.rs#L68">まだ実装が不完全</a> なようなので、目的には合わなさそう、と判断。</p>

<p>systemd-dbus crate は2年半以上更新がなく、rust 1.19.0 でコンパイルが通らなかったので断念。</p>

<p>他に systemd を直接扱える、目的に適いそうな crate が見当たらなかったので、D-Bus が扱える crate ってことで、dbus crate と dbus-bytestream create を試してみることにした。</p>

<hr>

<h2>dbus-send で D-Bus を理解する</h2>

<p>dbus crate にしても dbus-bytestream crate にしても、ざっとドキュメントやコードを読んだ感じ、D-Bus でどういった形でメッセージのやりとりがなされているのかを理解しないと、使うのは無理だなこれは、と思ったので、まずは <a href="https://dbus.freedesktop.org/doc/dbus-send.1.html">dbus-send</a> コマンドで必要な情報が得られるかどうかトライしてみた。</p>

<p>libspecinfra でやりたいことのひとつは、サービスが動いているかどうかを調べること。dbus-send では以下のような形で実行すれば、この情報が得られることがわかった。</p>

<p>まずはユニット名(ssh.service)からオブジェクトパス(/org/freedesktop/systemd1/unit/ssh_2eservice)を取得。</p>

<pre><code>$ dbus-send --system \
   --dest=org.freedesktop.systemd1 \
   --type=method_call \
   --print-reply \
   /org/freedesktop/systemd1 \
   org.freedesktop.systemd1.Manager.GetUnit \
   string:ssh.service

method return time=1507693363.257785 sender=:1.10 -&gt; destination=:1.220 serial=3078 reply_serial=2
   object path &quot;/org/freedesktop/systemd1/unit/ssh_2eservice&quot;
</code></pre>

<p><code>--dest=org.freedesktop.systemd1</code> で接続先のバス名を指定。<code>/org/freedesktop/systemd1</code> が操作対象のオブジェクトパス、<code>org.freedesktop.systemd1.Manager</code> がインターフェースで、それに続く <code>GetUnit</code> が呼び出すメソッド、<code>string:ssh.service</code> がメソッドに渡す引数、という形式になっている。</p>

<p>このオブジェクトパスの ActiveState プロパティを取得。</p>

<pre><code>$ dbus-send --system \
   --dest=org.freedesktop.systemd1 \
   --type=method_call \
   --print-reply \
   /org/freedesktop/systemd1/unit/ssh_2eservice \
   org.freedesktop.DBus.Properties.Get \
   string:org.freedesktop.systemd1.Unit \
   string:ActiveState

method return time=1507693392.955268 sender=:1.10 -&gt; destination=:1.221 serial=3079 reply_serial=2
   variant       string &quot;active&quot;
</code></pre>

<p>これでサービスの状態を得ることができた。</p>

<p>どのようなメソッドやプロパティがあるかは <a href="https://www.freedesktop.org/wiki/Software/systemd/dbus/">The D-Bus API of systemd/PID 1</a> に載っている。</p>

<hr>

<h2>Rust で dbus-send で得たのと同じ情報を得る</h2>

<p>dbus crate を使って以下のようなコードを書けば良い。</p>

<div><script src='https://gist.github.com/0210a1b8c56c1bf1411b1b8e310e90d8.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<p>試したコードは Cargo.toml 等も含めて <a href="https://github.com/mizzy/rust-systemd-playground">GitHub</a> に置いてある。</p>

<p>dbus crate は <a href="https://github.com/diwic/dbus-rs/tree/master/dbus/examples">サンプルコード</a> もあるし、<a href="https://github.com/diwic/dbus-rs/blob/master/dbus/examples/argument_guide.md">ドキュメント</a> もあるので、ドキュメントがほとんどない dbus-bytestream crate と比べると、比較的扱いやすいように思える（といっても、ドキュメント読めばすべてわかる、というわけではなく、コードも読んで色々試行錯誤したけど）。</p>

<p>dbus-bytestream も同時に試したけど、取得した ActiveState の情報をデコードする方法がよくわからないまま、dbus crate の方が動いたので、途中で断念した。なので、GitHub 上にある dbus-bytestream を使ったコードはエラーで動かない。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[OBD-IIアダプタ経由で車両情報を Mac から取得してみる]]></title>
    <link href="http://mizzy.org/blog/2017/09/06/1/" />
    <updated>2017-09-06T18:00:00+09:00</updated>
    <id>http://mizzy.org/blog/2017/09/06/1/</id>
    <content type="html"><![CDATA[
<p>最近車に乗ることが多く、ほぼ毎日乗っているせいか、コネクテッドカー関連の技術に興味が沸いてきた。ので、調べたことや試したことなんかをメモしていく。</p>

<p>まずは車両情報をパソコンから取得することにトライ。調べてみると、車両情報をパソコンやスマホから取得するためには、車に搭載された <a href="https://ja.wikipedia.org/wiki/%E8%87%AA%E5%8B%95%E8%BB%8A%E3%81%AE%E8%87%AA%E5%B7%B1%E8%A8%BA%E6%96%AD%E6%A9%9F%E8%83%BD#OBD2">OBD-II</a> ポートに、<a href="https://www.elmelectronics.com/">ELM Electronics 社</a> 製の ELM327 というチップを積んだアダプタを挿し、Bluetooth や Wi-Fi を経由して取得する、というやり方が一般的なようだ。</p>

<p>というわけで、<a href="https://www.amazon.co.jp/gp/product/B00J7CC4T2">Bluetooth 版</a> （写真左）と <a href="https://www.amazon.co.jp/gp/product/B01IHV5VFM">Wi-Fi 版</a>（写真右）を買ってみた。 </p>

<p><img src="/images/2017/09/elm327.jpg" title="ELM327" ></p>

<p>まずは Bluetooth 版。macOS Sierra の場合、ペアリングすると <code>/dev/tty.OBDII-Port</code> というデバイスファイルが見えるようになるので、<code>screen</code> コマンドで接続して対話する。</p>

<pre><code>$ screen /dev/tty.OBDII-Port
&gt;ONNECTED
</code></pre>

<p>正しく改行され表示されるよう、ラインフィードをオンにする。</p>

<pre><code>&gt;atl1
OK
</code></pre>

<p>識別コードを表示させると、ELM327のバージョンが表示される。</p>

<pre><code>&gt;ati
ELM327 v1.5
</code></pre>

<p>プロトコルを表示させてみる。<a href="https://www.elmelectronics.com/products/ics/obd/">ELM327 は様々なプロトコルに対応している</a> が、この車が対応しているプロトコルは ISO 15765-4 (CAN 11/500) で、自動で認識しているようだ。</p>

<pre><code>&gt;atdp
AUTO, ISO 15765-4 (CAN 11/500)
</code></pre>

<p>他に使える AT コマンドについては、 <a href="https://www.sparkfun.com/datasheets/Widgets/ELM327_AT_Commands.pdf">ELM327 がサポートしている AT コマンド一覧（PDF）</a> を見ると良い。</p>

<p>次に車両情報を取得してみる。OBD-IIポートから情報を取得するには、PID(Parameter ID) と呼ばれるコードを入力する。<a href="https://en.wikipedia.org/wiki/OBD-II_PIDs">PID の一覧はここに載っている</a>。</p>

<p>ここにある PID をすべての車がサポートしているわけではないし、メーカーや車独自の PID もあるらしい。</p>

<p><a href="https://en.wikipedia.org/wiki/OBD-II_PIDs#Standard_PIDs">標準で定められた PID の一覧はここに載っている</a>。</p>

<p>これを見ると、PID には <a href="https://en.wikipedia.org/wiki/OBD-II_PIDs#Modes">Mode</a> という大まかなカテゴリがあり、Mode につづいて必要な情報の PID を入力するようだ。例えば、対応している PID の一覧を取得するためのコードは、Mode 01、PID 00 なので、0100 と入力する。</p>

<pre><code>&gt;0100
41 00 98 18 00 01
41 00 BE 3E B8 13
</code></pre>

<p><a href="https://en.wikipedia.org/wiki/OBD-II_PIDs#Query">Wikipedia ページの Query の項目</a> には、先頭に「Number of additional data bytes」というのがあるけど、これはなくてもいい？よくわからない。</p>

<p>レスポンスのフォーマットも <a href="https://en.wikipedia.org/wiki/OBD-II_PIDs#Response">Wikipedia に載っている</a>。こちらも先頭に「Number of additional data bytes」というのがあるけど、実際に試したレスポンスには含まれてなさそう。</p>

<p>レスポンスの最初の <code>41</code> は 40 に Mode を足した値で、その次の <code>00</code> は Mode を含まない PID をそのまま返しているので、実際に読むべき値はその次の <code>98 18 00 01</code> と <code>BE 3E B8 13</code> になる。レスポンスが2行になっているのは、おそらく2つの ECU(Engine Control Unit) から値を取得しているからだろう。どうやら片方がエンジン系ECU、片方がトランスミッション系ECUらしいのだが、この辺りもよくわかってない。</p>

<p>レスポンスは、PID 01〜20 の中で対応しているものをビットエンコードしたもので、読み方は <a href="https://en.wikipedia.org/wiki/OBD-II_PIDs#Mode_1_PID_00">Wikipedia を参照</a>。</p>

<p>Engine coolant temperature の取得はコード <code>0105</code> で行う。<code>41 05</code> を除いた <code>58</code> が見るべき値だが、これは 16進数なので10進数では 88 になるが、<a href="https://en.wikipedia.org/wiki/OBD-II_PIDs#Mode_01">Wikipedia でこの PID の Formula</a> を見ると「A - 40」と書かれているので、88 - 40 = 44℃ が実際に知りたかった値となる。</p>

<pre><code>&gt;0105
41 05 58
41 05 58
</code></pre>

<p>Wi-Fi版のものは、車に挿してイグニッションオンにすると、WiFi_OBDII という SSID が表示されるので、接続してやる。</p>

<p><img src="/images/2017/09/wifi-obd2.jpg" title="WiFi_OBDII" ></p>

<p>すると、192.168.0.10:35000 に繋いで対話できるので、telnet や nc コマンド等で接続して対話する。</p>

<p>ATコマンドは Bluetooth 版と同様。</p>

<pre><code>$ telnet 192.168.0.10 35000
Trying 192.168.0.10...
Connected to 192.168.0.10.
Escape character is &#39;^]&#39;.
atl1
OK

&gt;ati
ELM327 v1.5

&gt;atdp
AUTO,ISO 15765-4 (CAN 11/500)
</code></pre>

<p>車両情報を取得してみると、レスポンスが Bluetooth 版と異なる。</p>

<pre><code>&gt;0100
7E8064100BE3EB813
7E906410098180001

&gt;0105
7E903410585
7E803410585

&gt;0120
7E8064120A007A011
7E906412000000001
</code></pre>

<p><code>7E806</code> や <code>7E903</code> といった部分が、Bluetooth 版のレスポンスにはないが、これはどうやら <a href="https://ja.wikipedia.org/wiki/Controller_Area_Network">CAN</a> というプロトコルのデータフレームに含まれているもののようだ。 </p>

<p><a href="http://monoist.atmarkit.co.jp/mn/articles/0807/09/news140.html">CAN通信におけるデータ送信の仕組みとは？ (1/3) - MONOist（モノイスト）</a> を見ると、<code>7E8</code> や <code>7E9</code> が識別のための ID、続く <code>06</code> や <code>03</code> はコントロールフィールド中のデータレングスコードで、その後に続くデータフィールドの長さを表しているようだ。</p>

<p>内部的には ECU 同士や ECU と OBD-IIアダプタ間では CAN で通信していて、Bluetooth 版アダプタは、CAN のデータフレームのうち、データフィールドしか出力しないけど、Wi-Fi版アダプタは、ID やコントロールフィールドも出力している、ということなのだろう。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[フリーランスになって3年が経った]]></title>
    <link href="http://mizzy.org/blog/2017/04/01/1/" />
    <updated>2017-04-01T12:07:02+09:00</updated>
    <id>http://mizzy.org/blog/2017/04/01/1/</id>
    <content type="html"><![CDATA[
<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">株式会社はてなに入社して二軒目の家を建てました。 <a href="https://t.co/a4UFOYRW8M">https://t.co/a4UFOYRW8M</a></p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/status/847829344651051008">March 31, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>このはてな入社エイプリルフールネタもそろそろ飽きられてそうなので、少しだけ変化させた。今年は土曜日というタイミングもあって、本当だと思う人は皆無だろうし。</p>

<p>はてなに入社すると家が建つ、というやつ、どういうコンテキストだったか忘れてしまった。</p>

<p><a href="http://mizzy.org/blog/2016/04/01/1/">フリーランスになって2年が経った</a> で触れたように、昨年2月に法人登記したので自分をフリーランスと呼んで良いのかどうかよくわからないけど、働き方はまったく変わってないので、フリーランスで
いいのだろうと思っている。</p>

<hr>

<h2>仕事について</h2>

<p>昨年は <a href="http://atl.recruit-tech.co.jp/">リクルートテクノロジーズATL</a> での仕事がメインで、あとは技術顧問的なものや golang でのミドルウェア開発なんかをやっていた。</p>

<p>ATL での仕事は OSS 開発支援とプレゼンス向上のお手伝いという2つのミッションがある。OSS 開発支援、元々は <a href="https://github.com/walter-cd/walter">Walter</a> を最初につくった <a href="https://github.com/ainoya">ainoya</a> さんから <a href="https://github.com/takahi-i">takahi-i</a> さんが開発を引き継いだ際に、<a href="https://github.com/lyokato">lyokato</a> さんからの紹介で手伝ってもらえないか、という話があって請けた仕事だった。その takahi-i さんも、紹介してくれた lyokato さんも ATL を離れてしまったし、Walter と似た立ち位置のツールは他に優れたものが色々あるので、開発のモチベーションが失われてしまった。なので、Walter の方はコードをすっきりさせるためにリライトした v2.0 をリリースした後は、細々とメンテしていくモードに入っている。Walter は <a href="http://mizzy.org/blog/2015/06/16/1/">Serverspec のインテグレーションテスト</a> で使っているので、バグ修正とか、細かな調整とかは今後もしていくけど、大きな機能追加などはおそらくやらないだろう。</p>

<p>takahi-i さんの Walter 開発のお手伝い、ということで請けた仕事なので、takahi-i さんが ATL を離れるにともない、契約終了かと思ったらそうはならず、契約は続いている。なので、Walter の代わりに別の OSS プロジェクトをはじめさせてもらった。これについては別途エントリを書いたり、近々 <a href="https://cloudinfra.audio/">Noboly’s CloudInfra Podcast</a> で話したりする予定。</p>

<p>プレゼンス向上の仕事としては、<a href="https://atnd.org/events/78581">Recruit Technologies Open Lab #03 テーマ：Infrastructure as Code</a> というイベントをやった。テーマが良いためか、ゲストスピーカーのおかげか、キャンセル含めると400名以上の応募があった。会場キャパシティの都合で参加できなかった方、本当にすみません。</p>

<p>また、<a href="https://www.oreilly.co.jp/books/9784873117966/">オライリーの Infrastructure as Code 本</a> の監訳をやった。これは ATL のプレゼンス向上とは関係なさそうだけど、監訳者紹介のところに ATL の名前を出すことで、少しはプレゼンス向上に貢献できるだろう、ということで、直接的にはオライリーさんから請けた仕事ではあるけど、間接的には ATL の仕事でもある、と解釈してる。</p>

<p>ATL の仕事、2週間に1回マネージャーとのミーティングのためにオフィスに行くが、それ以外は家でやっている。なので、朝夕は子供の送り迎えをしたり（割と大変だった。下記ツイート参照）、昼は妻と車で出かけて食事をした後、スーパーで家族7人分の食材を買って帰ったり、平日の空いてる時間帯にレジャー施設やアウトレットモールなどに行ったり、といった生活をしている。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">今年度は娘の小学校送り迎え（学区が変わっても元の学校に通うのに送り迎えするのが条件だった）、三男の学童保育お迎え、四男の保育園送り迎えがあったけど、来年度から送り迎えが一切なくなるので、帰りの時間をあまり気にせずに平日に妻とデートできる。</p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/status/847741121409163266">March 31, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>自分は業務委託だから自由にやらせてもらってる面はあるけど、ATL は社員の人でも勤務時間などはわりと自由っぽい。自分は15時頃にミーティングが終わるとすぐに帰っているけど、takahi-i さんもお子さんを保育園に迎えに行くために一緒に帰ることがよくあった。</p>

<p>リクルートテクノロジーズの ATL、<a href="http://atl.recruit-tech.co.jp/recruit/">エンジニア募集</a> してるので、興味があればぜひどうぞ。</p>

<hr>

<h2>お金について</h2>

<p>みんな大好きお金の話。</p>

<p>法人登記しても働き方は変わらない、と冒頭に書いたが、お金の流れ的な面は色々変わった。</p>

<p>個人事業主の時は、売上げがすべて個人としての収入になっていたが、今は法人の方に売上が入り、そのうちの一部を役員報酬として自分に支払っている。</p>

<p>2015年はすべて個人事業主としての売上だったのが、2016年は1月〜3月は個人事業主（2月に登記して、契約を個人から法人に切り替えたのが4月からなので）、4月〜12月は法人の売上という構成になっている。2017年はほぼ100%法人の売上になるはず（オライリー本の印税など一部は個人の売上）。</p>

<p>2016年の個人と法人のトータルの売上は、2015年の個人の売上より1割増しぐらいだが、法人化したことにより、個人の所得税は半分以下になったし、これに法人所得税を加えても、2015年分の個人の所得税より4割ぐらい少ない。個人の住民税も半分ぐらいになるので、法人化による節税効果は大きい。</p>

<p>個人事業主の時は、所得税は確定申告で一年分をまとめて支払うし、住民税は年4回にわけて支払っていた。所得税には予定納税という仕組みがあるので、2年目以降は年3回に分けて支払う形になるが、予定納税額は前年の所得によって決まるので、収入が前年より大幅に増えると、予定納税で納める額よりも、確定申告後に支払う額がかなり大きくなるので、結局一年分まとめて支払うのと変わらないことになる（なった）。なので、いつどれぐらいお金が出ていくか、ということを意識しながら家計の支出をコントロールしないといけない。昨年は2月に家が完成して、ハウスメーカーに残額の支払いをしたり、引越をしたり、原状回復費用を支払ったり、家具を揃えたり、長男が高校に入学したり、という状況で多額の所得税を支払わないといけなかったので、キャッシュフローの管理にはかなり気をつかった。</p>

<p>法人化すると、所得税と住民税は役員報酬から毎月自動的に引かれる（住民税は特別徴収の手続きが必要だけど）。なので特定の月だけ多額の出費がある、ということがなく、キャッシュフローをそれほど気にしなくて良いので、精神的に楽。といっても、2016年は1月〜3月分の収入は個人事業主としての売上なので、確定申告による所得税の支払いまだあるし、子供達が小・中・高同時入学という状況なので、昨年ほどではないけど、3月4月の出費に備えてキャッシュフローを意識しないといけなかった。来年の確定申告は逆に還付を受ける立場になるので、キャッシュフローをきちんと管理しないと破滅する、ということはまずなさそうなので、とても気楽だ。</p>

<p>また住民税は、自治体によるのかもしれないが、普通徴収だと1月末が最終支払い月だが、特別徴収だと6月が最終支払い月なので、支払いを5ヶ月先延ばしにできることになる。これもキャッシュフロー的にはとても助かる。</p>

<p>他に法人化によってお金まわりで変わったのは、健康保険と年金。法人は社会保険に加入しないといけないので、国保＋国民年金から協会けんぽ＋厚生年金に切り替わった。国保と国民年金は100%個人が支払うけど、社会保険は会社と折半になる。健康保険の個人負担分は国保の時と金額それほど変わらないし、厚生年金の個人負担は国民年金の2.5倍ぐらいある。しかも、半分会社負担といっても、その会社の売上は結局自分が働いて得たお金なので、社会保険による出費は個人事業主と比べるとかなり大きい。とは言え、法人化による節税効果の方が自分の場合は大きい。フリーランスで個人か法人かを検討する際は、税金だけでなく社会保険も考慮しないといけない。自分はあまりこの辺は意識していなかった。社会保険料は役員報酬や給与の金額に応じて変わるので、調整の余地はありそう。国保の保険証は紙でペラペラだったけど、協会けんぽのはプラスチック製なので、その点は良い。</p>

<p>経費の使い方、という点でも、個人事業主の時とでは意識が変わる。個人の時は、経費と言えども出所は家計と同一なので、特に高額な出費の場合、多少躊躇いながら使っていた。今は、会社のお金と個人のお金が明確に区分されているので、経費を使うのにあまり躊躇いがない。躊躇うことがあるとすれば、金額の問題というよりも、一括減価償却できるかどうか、という観点で躊躇う。会社のお金と個人のお金が分かれているといっても、結局は自分のお金なので、あまり使いすぎると自分の首を絞めることになるけど。</p>

<hr>

<h2>まとめ</h2>

<p>フリーランスになって○年エントリ、今回で3回目になる。そろそろみんな飽きてきたのではないか、というか自分が書くの飽きてきたので、今回は書こうかどうか迷ったけど、個人事業主から法人化という変化を経験したので、それについてメモしておくのは意味があるかな、と思ったので書くことにした。</p>

<p>それと ATL の宣伝目的。<a href="http://atl.recruit-tech.co.jp/">リクルートテクノロジーズ ATL</a> では <a href="http://atl.recruit-tech.co.jp/recruit/">エンジニア募集中</a> です。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Infrastructure as Code 本の日本語版出ます]]></title>
    <link href="http://mizzy.org/blog/2017/03/17/1/" />
    <updated>2017-03-17T12:00:00+09:00</updated>
    <id>http://mizzy.org/blog/2017/03/17/1/</id>
    <content type="html"><![CDATA[
<p><img src="/images/2017/03/iac.jpg" alt=""></p>

<p>監訳者なので5冊もらった。帯で名前が隠れているので、左下2冊は帯を外した状態。右下2冊は原著。なぜ2冊あるかというと、自分で買ったものと、監訳作業用にもらったものがあるから。</p>

<p>発売日は3/18ですが、既に先行販売してる書店とかあるかも。あと、電書版はまだないですが、オライリーさんのいつものパターンだと、間もなく電書版も出るはず。</p>

<ul>
<li><a href="https://www.oreilly.co.jp/books/9784873117966/">O&#39;Reilly Japan の紹介ページ</a></li>
<li><a href="https://www.amazon.co.jp/dp/4873117968">Amazon の商品ページ</a></li>
</ul>

<p>翻訳は数々の技術書、例えば最近だと、<a href="https://www.amazon.co.jp/dp/4873117380">入門 Python 3</a> とか <a href="https://www.amazon.co.jp/dp/4822251551">SOFT SKILLS</a> とか <a href="https://www.amazon.co.jp/dp/4873117909">詳解 システム・パフォーマンス</a> などを翻訳されている、<a href="https://www.amazon.co.jp/%E9%95%B7%E5%B0%BE-%E9%AB%98%E5%BC%98/e/B00D7GBFIU/">長尾 高弘</a> さんです。</p>

<p>どんな本かというと、オライリージャパンのサイトにある紹介文を引用すると、こんな感じです。</p>

<blockquote>
<p>Infrastructure as Codeは自動化、バージョン管理、テスト、継続的インテグレーションといった、ソフトウェア開発のプラクティスをシステム管理に応用するための方法論です。本書は、はじめにInfrastructure as Codeの原則と考え方を説明し、次にダイナミックインフラストラクチャプラットフォーム、インフラストラクチャ定義ツール、サーバ構成ツール、インフラストラクチャサービスの4つにカテゴライズして解説します。その上で、プロビジョニングやサーバーテンプレート管理のパターンから、テスト、変更管理パイプライン、組織やワークフローのプラクティスまでを詳述しており、Infrastructure as Codeを網羅的に理解することができます。各ツールの使い方よりも、背景にあるコンセプトや考え方の説明に重点を置くことで、特定のツールに縛られることなく、Infrastructure as Codeを適切に実現することを目指す本書は、エンジニアおよびマネージャ必読の一冊です。</p>
</blockquote>

<p>監訳者の仕事として、翻訳者さんが翻訳されたものに対して、よりわかりやすい表現に変えたり、より（自分にとって）馴染みのある言葉に変えたり、よりスムーズに頭に入るように文章を変えたり、といったことをしました。わかりやすくするために、敢えて原文から少し外れた文章にする、といったこともしています。もし文中でわかりにくい表現やスムーズに頭に入ってこない文章などがあったら、それは自分の監訳が至らないためです。ごめんなさい。</p>

<p>監訳作業の中で、ひとつ大きく言葉を変えたのは「Cycle Time」です。これはそのまま訳すと「サイクルタイム」ですが、「リードタイム」と訳しています。というのも、原著の「Cycle Time」は <a href="https://www.amazon.co.jp/dp/487311764X">カンバン仕事術</a> 内の「リードタイム」と同じ意味で使われていて、カンバン仕事術内の「サイクルタイム」とは別の意味になっているからです。最初は「サイクルタイム」のままにして監訳者注を入れる形にしたのですが、何カ所かこの言葉が出てくるところがあるため、注は入れずにすべて「リードタイム」に置き換えました。本書内では特に注がないため、原著と読み比べた方はおや、と思うかもしれないので、ここで触れておきます。</p>

<p>他にも、補足を入れたいところに監訳者注を入れたり、タイトルをどうするか（日本語に訳すのか、英語そのままにするのか、あるいは違うタイトルにするのか、何か言葉を付け加えるのか）、サブタイトルをどうするか、紹介文や帯文をどうするか、といったあたりを、編集の方と一緒に考えたり、といったこともやりました。</p>

<p>監訳者まえがきも書いています。当然原著には監訳者まえがきはありませんので、原著を読まれた方も、ぜひ日本語版も読んでみてください。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">監訳者まえがきの最後の一文がとてもよい</p>&mdash; ゆううき (@y_uuk1) <a href="https://twitter.com/y_uuk1/status/842227662072438784">March 16, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>あわせて読みたい: <a href="http://mizzy.org/blog/2016/04/22/1/">Infrastructure as Code 再考</a></p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[フリーランス2年目だけど家を建てることにした 其の6]]></title>
    <link href="http://mizzy.org/blog/2016/09/26/1/" />
    <updated>2016-09-26T20:25:51+09:00</updated>
    <id>http://mizzy.org/blog/2016/09/26/1/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2016/01/15/1/">前回</a> からだいぶ間があいてしまった。書くの結構大変だし飽きたので。たぶん今回が最後。こことは別に <a href="http://mizzy.hateblo.jp/">フリーランスの家づくり日記</a> というブログがあって、今後はそちらだけ更新する予定。（mizzy.org の方は、家を建てることにまつわる経緯とか一連の流れとか手続きとかの話がメインで、mizzy.hateblo.jp の方は、家の工事過程とか外観とか内装とか家具とかの写真がメイン、という使い分けをしてる。）</p>

<p>今回は不動産取得税の話。固定資産税の存在は知ってたけど、不動産取得税は知らなくて、いきなり20万円超の納税通知書が届いて驚いた。同じように知らない人がいそうなので、ここにメモしておく。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">不動産取得税なんてものがあるのか…しかも結構な金額だ…これはノーマークだった…</p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/status/676678448824213504">December 15, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2>土地の不動産取得税</h2>

<p>土地を取得すると、特に何もしなくても、都道府県税事務所から納税通知書が送られてくる。取得後どれぐらい経つと送られてくるのかは、自治体によって違う模様。「半年〜一年半後」といった説明を見かけたけど、自分の場合、5ヶ月ぐらいで送られてきた。なので、確実に知りたい場合には、管轄の都道府県税事務所に問い合わせるのが良さそう。</p>

<p>自分が土地を所有している神奈川県の<a href="http://www.pref.kanagawa.jp/cnt/f520239/p13774.html#sinkoku">県税事務所ウェブサイト</a> を見ると、「不動産を取得した日から10日以内に申告」と書かれているけど、特に申告は必要ないみたい。これも不安なら管轄の都道府県税事務所に問い合わせましょう。</p>

<p>自分は、納税通知書が送られてくるまで、この税の存在をまったく知らなかった。完全に予算外の出費。ハウスメーカーも不動産屋も特に教えてくれなかったし。しかも、金額がそこそこ大きい（自分の場合は20万円強の課税）ので、家を建てる方は念頭に置いておいた方が良い。ただし、後述するように、徴収の猶予を申請することもできる。</p>

<h2>家屋の不動産取得税</h2>

<p>土地の不動産取得税は、申告しなくても納税通知書が送られてきた。家屋の方も通知書が届くのを待てば良いか、と思っていた。けれど、半年経っても送られてこないので、県税事務所に問い合わせてみたところ、以下の回答をもらった。</p>

<ul>
<li>家屋の方も特に申告の必要はなく、通知書が届くのを待っていれば良い。</li>
<li>ほとんどのケースでは税額が0円になり、その場合は通知書は届かない。

<ul>
<li>我が家の面積だと、もしかしたら0円にならないかも、微妙なラインと言われた。</li>
</ul></li>
<li>通知書が届くとしても翌年になる。</li>
</ul>

<h2>土地の不動産取得税の軽減措置</h2>

<p>不動産取得税には軽減措置があって、土地の場合、その上で建物を新築すると、控除が受けられる。ケースバイケースだけど、全額戻ってくる場合がほとんどらしい。</p>

<p>軽減措置を受けるためには家が建ったことを証明する書類（検査済証や全部事項証明書など）が必要。なので、自分のように家が建つ前に土地の不動産取得税を納めるようなケースでは、一旦納税した後に、軽減措置の申告をして還付を受ける形になる。</p>

<p>軽減措置の申告については、こちらからアクションを起こす必要がある。自分の場合は、神奈川県税事務所に電話で問い合わせたら、詳しく丁寧に説明してくれ、必要な書類を郵送してもらえた。申告書はウェブサイトからもダウンロードできるけど、電話で問い合わせて郵送してもらうと、記入が必要な部分に印をつけてくれたり、こちらで用意する必要がある書類を蛍光ペンでマーキングしてくれたりするので、わかりやすい。担当者にもよるのかもしれないけど。</p>

<p>添付が必要な書類は、自分の場合は、家屋の全部事項証明書または建築基準法の検査済証と、家が建った後に発行された土地の全部事項証明書の2つだった。</p>

<p>全部事項証明書は原本が必要で、検査済証はコピーでも良い。家屋の方は手元に検査済証があるので、それのコピーを添付した。</p>

<p>土地の全部事項証明書は <a href="http://www.touki-kyoutaku-online.moj.go.jp/toukinet/top.html">登記ねっと</a> で申請して郵送してもらった。オンラインなのに平日の8:30-21:00しか受け付けてないけど、紙に記入するよりは楽だし、郵送の手数料は窓口受取より20円高いだけだし、手数料もオンラインで納付できるし、申請の翌々日には届いたので、オススメできる。</p>

<p>必要な書類が揃ったら、都道府県税事務所に郵送するか持参する。</p>

<p>その後、「不動産減額（免除）通知書」が県税事務所から届き、全額還付されることがわかった（届いたのが、申請書を送った2日後と、とても早い対応だった）。</p>

<p>通知書が届いてから20日ほど経って、申請した口座に還付金が振り込まれた。</p>

<p>自分はこのように、一度支払ってから還付という形をとったけど、徴収の猶予を申請することもできる。申請が通れば、通常は2年間の猶予がもらえるので、軽減措置と併せることで、一円も支払わずに済ませることができる。申請の手間はかかるけど、すぐに支払う余裕がない、という場合には、申請すると良さそう。</p>

<h2>家屋の不動産取得税の軽減措置</h2>

<p>土地の場合、上で書いたように、課税された段階では軽減措置の条件を満たしておらず、後から申告して還付してもらう、という形だったので、軽減措置があること、申告が必要なことを知っておく必要がある。</p>

<p>家屋の場合は、課税段階で軽減措置の条件も含めて計算してくれるので、特に知っておく必要はなさそう。</p>

<h2>まとめ</h2>

<ul>
<li>土地や家屋を取得すると不動産取得税が課される。</li>
<li>取得したことを申告する必要は特になく、納税通知書が送られてくるのを待てば良い。</li>
<li>課税額が0円の場合は納税通知書は送られてこない。

<ul>
<li>家屋の場合はこのケースが多い。</li>
</ul></li>
<li>土地の不動産取得税は、その土地で家を建てると軽減措置が受けられる。</li>
<li>軽減措置を受けるには、家が建ったことを証明する書類が必要。なので、課税段階でまだ建て終わってなければ、一度納税して、後から軽減措置の申告を行い還付してもらう必要がある。

<ul>
<li>または徴収猶予を申請することで、支払いしない（当然還付もされない）という方法も選択できる。</li>
</ul></li>
<li>不動産取得税の管轄は都道府県税事務所なので、気になることがあれば直接問い合わせるのが良い。

<ul>
<li>質問サイト等で質問してる人がいるけど、直接問い合わせる方が早いし確実。</li>
</ul></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Infrastructure as Code 再考]]></title>
    <link href="http://mizzy.org/blog/2016/04/22/1/" />
    <updated>2016-04-22T09:00:00+09:00</updated>
    <id>http://mizzy.org/blog/2016/04/22/1/</id>
    <content type="html"><![CDATA[
<p>Infrastructure as Code という言葉が現れてから少なくとも8年ほど経過しており、この言葉もすっかり定着したように見えるが、<a href="https://www.thoughtworks.com/profiles/martin-fowler">Martin Fowler</a> 氏が最近自身のブログで <a href="http://martinfowler.com/bliki/InfrastructureAsCode.html">Infrastructure as Code について触れており</a> 、また、氏の同僚である <a href="https://www.thoughtworks.com/profiles/kief-morris">Kief Morris</a> 氏が O&#39;Reilly Media から <a href="http://shop.oreilly.com/product/0636920039297.do">Infrastructure as Code という本を出す</a>（現在 Early Relase 版や <a href="https://info.thoughtworks.com/Infrastructure-as-Code-Kief-Morris.html">Free Chapters</a> が入手できる）ようなので、このタイミングで改めて Infrastructure as Code について、その歴史を振り返るとともに、現在の状況について整理してみようと思い、このエントリを書くことにした。</p>

<p>内容的には、以前書いた <a href="http://mizzy.org/blog/2013/10/29/1/">インフラ系技術の流れ</a> と若干重複してる部分もある。</p>

<p>そういえば日本でも最近、<a href="http://gihyo.jp/book/2016/978-4-7741-7993-3">サーバ/インフラエンジニア養成読本 DevOps編 [Infrastructure as Code を実践するノウハウが満載! ]</a> というムック本が出ていますね。</p>

<hr>

<h2>Infrastructure as Code とは</h2>

<p>Infrastructure as Code が何かについては、既に色んな人が色んなところで語っているので、ここでは詳しくは説明しない。簡単に言えば「インフラ」をコードで記述することによって、ソフトウェアシステムで既に有効であると立証されているプラクティスを、インフラにも同じように適用でき、その恩恵が受けられる、というもの。</p>

<p>このプラクティスには次のようなものがある。</p>

<ul>
<li>バージョン管理</li>
<li>繰り返し可能なビルド</li>
<li>テスト</li>
<li>継続的インテグレーション</li>
<li>継続的デプロイ</li>
</ul>

<p>とは言え、最初から Infrastructure as Code がこのように解釈されていたわけではなく、その意味合いは時が経つとともに変遷している。</p>

<hr>

<h2>Infrastructure as Code の歴史と変遷</h2>

<p>Infrastructure as Code という言葉が現れ、今のように定着するようになるまでの大まかな流れを振り返ると、その起源は1993年に登場した <a href="https://cfengine.com/">CFEngine</a> にまで遡れる。もちろん当時は Infrastructure as Code という言葉はなかったが、<a href="https://puppet.com/">Puppet</a> や <a href="https://www.chef.io/">Chef</a> といった Configuration Management Tools と呼ばれるものの元祖であり、現在の Infrastructure as Code の流れに与えた影響は大きい。</p>

<p>Infrastructure as Code という言葉の大元の出自は調べてみてもわからなかったが、2005年に Puppet が登場したことが、この言葉が現れる直接のきっかけになったと思われる。</p>

<p>Chef がきっかけじゃないの？と思う人がいるかもしれない。Infrastructure as Code という言葉がどのタイミングで現れたのか調べてみると、一番古い資料では、現在 Chef 社の CTO である <a href="https://twitter.com/adamhjk">Adam Jacob</a> 氏 が、2008年4月25日に公開したスライド <a href="http://www.slideshare.net/adamhjk/why-startups-need-automated-infrastructures/24-Steps_to_Launch_Configuration_Management">Why Startups Need Automated Infrastructures の 24ページ目</a> が見つかる。</p>

<p>しかし、Chef のリリースは2009年であり、このスライドには Puppet は載っているけれど Chef は載っていない。また、Adam Jcob 氏の所属が HJK Solutions となっており、Chef 社の前身である Opscode 社を立ち上げる前であることが窺える。</p>

<p>なので流れ的には、CFEngine の影響を受けた Puppet が登場 → Puppet が広く受け入れられる → Puppet のような Configuration Management 手法を Infrastructure as Code と呼ぼうと誰かが言った（もしかして Adam Jcob 氏？） → Puppet Alternative として Adam Jcob 氏が Chef を開発した、といった感じなのではないかと。</p>

<p>Chefの <a href="https://github.com/chef/chef/commit/b5117775e86cff40399187b6292c98fba9dc5034">Initial Commit が 2008年3月6日</a> で、上記スライドを公開する少し前なので、Infrastructure as Code という言葉の発案者が Adam Jcob 氏だとすると、この言葉を思いついたのと、Chef（最初は Marionette という名前だった）の着想を得て開発を始めたのはほぼ同じ頃かもしれない。</p>

<p>英語版が2010年6月、日本語版が2011年5月に出版された書籍『<a href="http://www.oreilly.co.jp/books/9784873114934/">ウェブオペレーション</a>』で、Adam Jacob 氏は Infrastructure as Code を「ソースコードリポジトリ・アプリケーションデータのバックアップ・サーバリソースからビジネスを復旧できるようにすること」と述べており、当時はディザスタリカバリ的な視点から Infrastructure as Code を捉えていたようだ。</p>

<p>ちなみに、以下は ChefConf 2014 で Adam Jcob 氏と撮影したツーショット写真。</p>

<p><img src="https://pbs.twimg.com/media/BxzvOikCIAEcTGR.jpg:large" alt=""></p>

<p>ただ、Adam Jcob 氏のスライドのタイトルには「Automated」とある通り、Infrastructure as Code のメリットは、当初は「自動化」に焦点が当てられていたものと思われる。</p>

<p>それが現在のように、ソフトウェアシステムのプラクティスをインフラに適用する、という意味合いに変化したのは、DevOps という考え方と結びついたためだろう。</p>

<p>DevOps という言葉は、<a href="http://www.jedi.be/">Patrick Debois</a> 氏が主催した <a href="http://www.devopsdays.org/events/2009-ghent/">Devopsdays Ghent 2009</a> が発端であり、同氏は Agile 2008 Conference で <a href="http://www.jedi.be/presentations/IEEE-Agile-Infrastructure.pdf">Agile infrastructures and operations: how infra-gike are you? (PDF)</a> という発表を行っている。このことからも、DevOps はアジャイルの流れを汲んでいることが窺える。なので、Infrastructure as Code が DevOps と結びついてきた結果、アジャイル的なプラクティスをインフラにも適用する、という流れが生まれたのだと思われる。</p>

<p>Infrastructure as Code という言葉の出始めは2008年、DevOps は2009年だが、2009年当時にすぐに Infrastructure as Code が DevOps と結びついて今のような意味合いとなったわけではない。2009年6月に公開されたスライド <a href="http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr/22-CFengineChef_BCfg2_FAI1_Automated_infrastructure">10+ Deploys Per Day: Dev and Ops Cooperation at Flickr の22ページ目</a> でも「Automated infrastructure」とあることから、この当時もまだ、主にインフラの自動化に焦点が当てられていたようだ。</p>

<p>単なる自動化から、ソフトウェアシステムのプラクティス適用、という流れに変わったのは、2011年6月に O&#39;Reilly Media から出た <a href="http://shop.oreilly.com/product/0636920020042.do">Test-Driven Infrastructure with Chef</a> がきっかけだと思われる（ちなみに現在は <a href="http://shop.oreilly.com/product/0636920030973.do">第二版</a> が出ている）。この本が「Test-Driven Infrastructure」という具体的なプラクティスが認知され広まるきっかけとなったのだろう。</p>

<p>「テスト駆動」という具体的なプラクティスが登場したことにより、「継続的インテグレーション」や「継続的デプロイ」といった他のプラクティスにも広がっていき、Infrastructure as Code が今のような意味合いとして捉えられるようになっていった。</p>

<p>2013年3月に登場した <a href="http://serverspec.org/">Serverspec</a> もこの流れを加速するのに一役買っている。</p>

<hr>

<h2>Infrastructure as Code の適用領域</h2>

<p><a href="http://mizzy.org/blog/2013/10/29/1/">インフラ系技術の流れ</a> では、サーバプロビジョニングの領域を、次の3つにわける考え方を紹介した。</p>

<ul>
<li>Orchestration</li>
<li>Configuration</li>
<li>Bootstrapping</li>
</ul>

<p>Infrastructure as Code は元々、CFEngine の影響を受けた Puppet が登場した流れから出てきた言葉であり、CFEngine も Puppet も Configuration レイヤーに該当するツールである。したがって Infrastructure as Code の対象領域は Configuration レイヤーであり、代表的なツールと言えば Puppet や Chef であった。実際、Infrastructure as Code という言葉を聞くと、真っ先に思い浮かぶのは Chef、という方が多いのではないだろうか。</p>

<p>ところが最近では、Bootstrapping の領域も Infrastructure as Code の対象範囲に含まれている。</p>

<p><a href="https://aws.amazon.com/jp/ec2/">Amazon EC2</a> のような、API でプログラマブルに扱える IaaS は結構前からある（確か EC2 登場は2006年）が、インフラをコードでプログラマブルに扱えるから Infrastructure as Code だ、という見方はあまりなかったように思われる。</p>

<p>その状況が変わったのはおそらく、<a href="https://www.terraform.io/">Terraform</a> や <a href="https://aws.amazon.com/jp/cloudformation/">CloudFormation</a> といった、API を直接操作することなく、何らかの簡易的な言語によって IaaS を操作できるツールやサービスが登場したことが影響しているだろう。</p>

<p>ちなみに、以下は Terraform を開発している <a href="https://www.hashicorp.com/">HashiCorp</a> 社の CEO <a href="https://twitter.com/mitchellh">Mitchell Hashimoto</a> 氏と撮影したツーショット写真。</p>

<p><img src="/images/2016/04/mhashimoto.png" style="width: 600px;" /></p>

<p>また、単なるインフラ管理の自動化から、ソフトウェアシステムにおけるプラクティスの応用、と意味合いが変わるにつれ、Infrastructure as Code と聞いて想起するものが、Puppet, Chef, Terraform といった、インフラをコードで記述するツールだけではなく、<a href="http://kitchen.ci/">Test Kitchen</a> や <a href="http://serverspec.org/">Serverspec</a>、<a href="https://jenkins.io/">Jenkins</a> や <a href="https://circleci.com/">CircleCI</a> といった、Infrastructure as Code のプラクティスを支えるツールやサービスなど、多岐に渡るようになってきている。</p>

<p>Configuration Management を対象としていた Infrastructure as Code が、更に低いレイヤー、よりインフラと呼ぶにふさわしい領域も含むようになったことで、元々 Infrastructure as Code が対象としていた領域については、 Configuration as Code と呼び分けた方が良いのでは、といった議論も最近は出てきている。</p>

<p>が、現在使われている「インフラ」という言葉の指す範囲は広く、Configuration Management が対象とする領域も含まれているし、元々 Configuration をメインの対象としてい た Infrastructure as Code を Configuration as Code に変え、その下のレイヤーだけを Infrastructure as Code と呼ぶ、というのは、混乱を招きそう。</p>

<p>また、Configuration as Code の字面だけを見ると、設定内容をコードで書く（例: Nginx の設定を mruby で書く）ことを自分は想起する。</p>

<p>なにより、Infrastructure as Code は、ソフトウェアシステムのプラクティスを、今まで適用範囲外だと思われていた領域に適用する、というパラダイムを表す言葉として重要なのであって、その中でレイヤーを厳密に細分化して区別する意味合いは薄いと思われる。</p>

<hr>

<h2>Infrastructure as Code に関連するツールやサービスの分類</h2>

<p>書籍『<a href="http://shop.oreilly.com/product/0636920039297.do">Infrastructure as Code</a>』では、Infrastructure as Code に関連するツールやサービスを次の4つのグループに分類している。</p>

<ul>
<li>Dynamic Infrastructure Platforms

<ul>
<li>EC2 のような IaaS や <a href="https://www.openstack.org/">OpenStack</a> のような IaaS を構成するためのツール</li>
</ul></li>
<li>Infrastructure Orchestration Tools

<ul>
<li>Terraform や CloudFormation のような、IaaS 上でサーバ/ネットワーク/ストレージといったリソースを制御するためのツールやサービス</li>
<li><a href="https://www.consul.io/">Consul</a>, <a href="https://coreos.com/etcd/">etcd</a>, <a href="https://zookeeper.apache.org/">ZooKeeper</a> のような Configuration Registry</li>
</ul></li>
<li>Server Configuration Tools

<ul>
<li>Puppet, Chef, <a href="https://www.ansible.com/">Ansible</a>, <a href="https://github.com/itamae-kitchen/itamae">Itamae</a> といったリソースの設定を行うためのツール</li>
</ul></li>
<li>Infrastructure Services

<ul>
<li>プロビジョニングしたインフラを管理するためのツール</li>
<li>モニタリング、サービスディスカバリ、プロセス・ジョブ管理、ソフトウェアデプロイメントなど</li>
</ul></li>
</ul>

<p>前項で、Infrastructure as Code と Configuration as Code を分離する意味はあまりない、と述べたが、ツールをこのように分類するのは、各ツールの役割がイメージしやすいし、Infrastructure as Code のライフサイクルを整理したり、各フェーズについて議論したりするのには有用そうだ。</p>

<p>Dynamic Infrastucture Platforms の上で、Infrastructure Orchestration Tools によりサーバ/ネットワーク/ストレージといったリソースの割り当てを行い、Server Configuration Tools でそれらリソースの設定を行う。そして Infrastructure Services によってリソースを管理する。というのがざっくりとした流れ。</p>

<p>この中で Infrastructure as Code 的な手法が適用できるツールが揃っているのは、今のところ Infrastructure Orchestration Tools と Server Configuration Tools ぐらいか。</p>

<p>Dynamic Infrastructure はその名の通り基盤であり、その上でリソースをコントロールするツールは Infrastructure Orchestration に属するので、Dynamic Infrastruture Tools に属する Infrastructure as Code なツールがないのはある意味当然かな、と。</p>

<p>Infrastructure Services はその性質上、静的なコードを記述して制御する、というよりも、Infrastructure Orchestration Tools や Server Configuration Tools と連動して動的に何かを行う、というものが多そうなので、Infrastructure as Code なツールがあまりないのはそのためかも。今後、この辺りで Infrasturcture as Code 的なツールや手法がどう発展していくのかが気になる。あるいは発展しないかも。</p>

<hr>

<h2>Infrastructure as Code に関するイベントやります</h2>

<p>最初に触れたように、Martin Fowler 氏がブログでとりあげたり、O&#39;Reilly から書籍が出る、ということもあって、改めて Infrastructure as Code について振り返って現状整理してみた。整理はしてみたものの、この先どうなっていくのか、といったことはまだ十分考察できていないし、一人で考えていても煮詰まりそうなので、Infrastructure as Code をテーマにしたイベントでもやろうかと考えている。</p>

<p><a href="http://www.zusaar.com/event/11697003">Infrastructure as Code 現状確認会</a> というイベントが過去にあったので、これとは少し違う方向性で、ツールの話が主眼ではなく、もう少し大局的な視点から、Infrastructure as Code のこれまでとこれからについて語れるようなイベントを。</p>

<p>もし興味があったり、こんな話が聞きたい、などあれば、ブコメや Twitter などでお知らせ頂けるとありがたいです。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[フリーランスになって2年が経った]]></title>
    <link href="http://mizzy.org/blog/2016/04/01/1/" />
    <updated>2016-04-01T10:00:39+09:00</updated>
    <id>http://mizzy.org/blog/2016/04/01/1/</id>
    <content type="html"><![CDATA[
<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">株式会社はてなに入社しました。</p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/status/715555225566707712">March 31, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>↑はちょうど2年前の <a href="http://mizzy.org/blog/2014/04/01/1/">4月からクックパッドで仕事してます</a> と同様、エイプリルフールネタです（実際にありえそうなので判断に迷った人いそうだけど）。</p>

<p><a href="http://mizzy.org/blog/2015/04/01/1/">フリーランスになって1年が経った</a> というエントリを書いてからちょうど1年経ったので、この1年を振り返ってみる。</p>

<hr>

<h2>仕事について</h2>

<p>1年目は、元々正社員になる前提で、様子見ということでクックパッドと業務委託契約を結んでいたので、基本フルタイムコミットで決まった時間にオフィスで仕事、という形だったけど、2年目はオフィスに行く日数を減らしたり、リクルートテクノロジーズの仕事の割合を増やしたりした。</p>

<p>2年目の前半は、クックパッドの仕事が週4日で、そのうち2日はオフィスに行き、リクルートテクノロジーズの仕事は週1日リモートで、という感じだったけど、後半はクックパッドが週2日でうち1日はオフィス、リクルートテクノロジーズは週3日、そのうち隔週で（最初のうちは週1で）ミーティングのためにオフィスに行く以外はリモートで、という形になった。</p>

<p>リクルートテクノロジーズの方は、日数を増やしただけではなく、コミット度合いを深めるため、また、中の人として対外活動するために <a href="http://mizzy.org/blog/2015/10/01/1/">技術顧問という肩書きをもらった</a> 。</p>

<p>クックパッドとの業務委託契約はこの3月で満了となった。インフラCIをがっつりやらせてもらって知見を得ることができたし、<a href="https://github.com/itamae-kitchen/itamae">Itamae</a> の誕生にも貢献できて良かった。Itamae、ほんと良いツールなので、今後他社で仕事する時にも、隙あらば積極的に入れていきたい。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">クックパッドは契約期間満了ってことで、餞別に薄くてかっこいい財布をいただきました。mirakui さんによるチョイス。ちょうど財布欲しいと思っていたところなので超うれしい。ありがとうございます！ <a href="https://t.co/ab4a0fDPsS">pic.twitter.com/ab4a0fDPsS</a></p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/status/715559613538566148">March 31, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>リクルートテクノロジーズの方は引き続き継続して、世の中に新しい価値観をもたらすような OSS の研究・開発をメインミッションとしてやっていく予定。Walter はとりあえず最低限のものはできた、と思っているので、今後はドキュメントの充実やリファクタリングや広報活動なんかをやりつつ、別の新しいOSSについて模索していきたい。</p>

<p>また、最近 <a href="https://sencorp.co.jp/">千株式会社</a> の技術顧問になった。ここは <a href="https://8122.jp/">はいチーズ！</a> という写真サービスを運営していて、お子さんをお持ちの方なら、このサービスを知っているかも。</p>

<p>これら以外には、単発でテスト駆動インフラに関する講師業をやったりした。</p>

<p>現在他にもいくつか、新規で話を進めている会社がある。現場感覚は鈍らないようにしたいので、実際に手を動かす仕事は今後もやっていきたいと思っている。もしそういうお仕事があればお声がけください。</p>

<p><a href="http://mizzy.org/blog/2015/04/01/1/">フリーランスになって1年が経った</a>  で、「年に一度は沖縄でリゾートワークしたり、子供達の夏休みにあわせて8月はまるっと休んだり、MGSV:TPP が発売される9月も休もうか、などと計画してる」と書いた件はどうなったかというと、沖縄でリゾートワークは  <a href="http://hackers-champloo.org/2015/">ハッカーズチャンプルー2015</a> に参加することで実現したけど、8月や9月に休むのは、事情により実現できなった。詳しくは後述。</p>

<hr>

<h2>収入について</h2>

<p>昨年の所得（売上ー経費）は、サラリーマン時代の最高年収の2.7倍ほどで、昨年4月時点での見通しよりも多かった。今年も同じぐらいかな、という見通しだけど、来年についてはどうなるかはさっぱりわからない。</p>

<hr>

<h2>家を建てた</h2>

<p>フリーランス関係ないじゃん、と思われそうだけど、実は大いに関係ある。ひとつは、収入が増えたことで、頭金をつくる余裕ができたこと。会社員時代の収入、決して少なくはなかったけど、子供5人いるとカツカツで、頭金を貯める余裕はなかった（節約が苦手、というのもあるけど）。</p>

<p>もうひとつは、電車通勤することが減り、土地を探すのに必ずしも駅の近くである必要がなくなったので、予算内で広めの土地を買うことができたこと。</p>

<p>8月9月に休むのをやめたのも、家を建てることになったからで、なるべく多く頭金に回したい、ということで、休まず働くことにした。</p>

<p>フリーランス2年目で、過去1年分の確定申告実績しかなかったので、ローン通るかは不安だったけど、そこは大丈夫だった（その辺については <a href="http://mizzy.org/blog/2015/12/13/1/">このエントリ</a> に書いた）。</p>

<p>収入が今後どうなるかわからないので、月々の返済額は、収入が現在の半分になっても無理なく支払えるぐらいの金額でローンを組んだ。</p>

<p>家で仕事するときはこんな感じでやっている。</p>

<p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/M/MIZZY/20160310/20160310114651.jpg" alt=""></p>

<hr>

<h2>会社を設立した</h2>

<p>一定の収入を超えると、税制的に法人化した方がお得、という話をよく聞くけど、事務手続きとか色々めんどくさそうなので、多少税金を多く支払っても、楽な個人事業主で行こう、と思っていた。けれど、12月になって所得税を計算してみたら結構な額（30歳当時の年収ぐらい）になって、これは法人化して節税した方が良さそうだ、と思ったので、会社をつくることにした。</p>

<p>来年は消費税の課税対象事業者になるけど、法人化すればまた2年間は免税事業者でいられて、その点でも節税できるし。</p>

<p>というわけで、2月に合同会社Serverspec Operationsという会社を設立した。あくまでも節税のために法人化しただけで、個人事業主の延長なので、何か新しい事業をやる、というわけではないし、人を雇うとかはまったく考えていない。</p>

<hr>

<h2>まとめ</h2>

<p>相変わらず先行きわからない不安みたいのはあって、<a href="http://rebuild.fm/132/">Rebuild 132</a> のひげぽんさんのキャリアパスの話を大きく頷きながら聴いていた。とはいえ、会社員時代も、自分がやりたいことと会社でやるべきことが乖離していくことに対する不安や、いつまで技術者としてやっていけるんだろうか、という不安があったので、立場がどうなっても、不安はつきまとうものなんだろう。とりあえずは、フリーランスでやっていけなくなったら、また会社員に戻ればいいか、と考えている。</p>

]]></content>
  </entry>


</feed>
