<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2013-05-12T22:05:26+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[serverspec でホスト固有の属性値を扱う方法]]></title>
    <link href="http://mizzy.org/blog/2013/05/12/2/" />
    <updated>2013-05-12T22:05:26+09:00</updated>
    <id>http://mizzy.org/blog/2013/05/12/2/</id>
    <content type="html"><![CDATA[
<p><strong>注意！ ここで解説する方法は v0.3.0 から利用できます。</strong></p>

<p><a href="http://blog.takus.me/2013/05/12/provisioning-frameworks-casual-talks-001/">Provisioning Frameworks Casual Talks vol.1 に行ってきた #pfcasual - TAKUMI SAKAMOTO&#39;S BLOG</a> で触れられている attributes 周りについて、この辺は必要になるだろうなー、と前から思ってはいたので、それを実現するための極々簡単な仕組みを <a href="https://github.com/mizzy/serverspec/pull/98">試験的に実装してみた</a> 。</p>

<p>これは単に <code>attr_set</code> と <code>attr</code> という2つのヘルパーメソッドを使えるようにしただけのものなんだけど、以下のような感じで使える。</p>

<p>今回は例として、ホスト毎に MySQL の server-id が外部ファイルで定義されていて、各サーバの /etc/my.cnf で正しく server-id が設定されているかをテストする、という状況を想定する。</p>

<p>属性値の定義は、今回は YAML ファイルで行うので、以下のような YAML ファイルを用意する。</p>

<div><script src='https://gist.github.com/5563530.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<p>次に、<a href="/blog/2013/05/12/1/">serverspec のテストをホスト間で共有する方法</a> と似たような感じで、YAML で定義されたロールに応じて適切なテストを行うような <code>Rakefile</code> を書く。</p>

<div><script src='https://gist.github.com/5563531.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<p>そして <code>spec_helper.rb</code> を以下のように書く。</p>

<div><script src='https://gist.github.com/5563533.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<p><code>attr_set attributes[c.host]</code> で属性値のセットを行っている。</p>

<p>最後に、属性値を参照して <code>attr[:server_id]</code> が <code>/etc/my.cnf</code> で定義されているかどうかをテストする spec を書く。</p>

<div><script src='https://gist.github.com/5563537.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<p>仕組みは単純なので、<code>YAML.load_file</code> している部分を好きなように変えれば、自身の環境に合った使い方ができるでしょう。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec のテストをホスト間で共有する方法]]></title>
    <link href="http://mizzy.org/blog/2013/05/12/1/" />
    <updated>2013-05-12T03:06:48+09:00</updated>
    <id>http://mizzy.org/blog/2013/05/12/1/</id>
    <content type="html"><![CDATA[
<p>今回は serverspec のテストをホスト間で共有する方法について説明します。</p>

<p>serverspec-init を実行して生成されるひな形ファイルは以下のようになっています。</p>

<pre><code>|-- Rakefile
`-- spec
    |-- spec_helper.rb
    `-- www.example.jp
        `-- httpd_spec.rb
</code></pre>

<p>これを見てわかる通り、テスト対象となるホスト名でディレクトリが掘られ、その下に対象ホストに対する spec が置かれる、という形になっています。</p>

<p>したがって、複数の役割が同じホストに対してテストを実行しようとすると、こんな感じで同じ内容の spec ファイルが重複して置かれることになります。</p>

<pre><code>|-- Rakefile
`-- spec
    |-- app001.example.jp
    |   `-- ruby_spec.rb
    |-- app002.example.jp
    |   `-- ruby_spec.rb
    |-- proxy001.example.jp
    |   `-- nginx_spec.rb
    |-- proxy002.example.jp
    |   `-- nginx_spec.rb
    `-- spec_helper.rb
</code></pre>

<p>実はこのようなファイル構成は、<code>serverspec-init</code> で生成される <code>Rakefile</code> や <code>spec_helper.rb</code> に依存しているだけで、serverspec 本体の仕様には依存してません。したがって、<code>Rakefile</code> や <code>spec_helper.rb</code> をカスタマイズすれば、好きなファイル構成にすることができます。</p>

<p>その一例として、spec をサーバのロール毎にわけ、各サーバに対して属するロールにひもづいたテスト実行する、というやり方について説明します。</p>

<p>まず、以下のようにロール毎にディレクトリを作成し、その下にロールにひもづいた spec ファイルを置きます。</p>

<pre><code>|-- Rakefile
`-- spec
    |-- app
    |   `-- ruby_spec.rb
    |-- base
    |   `-- users_and_groups_spec.rb
    |-- db
    |   `-- mysql_spec.rb
    |-- proxy
    |   `-- nginx_spec.rb
    `-- spec_helper.rb
</code></pre>

<p>次に、以下のような <code>Rakefile</code> と <code>spec/spec_helper.rb</code> を置きます。</p>

<div><script src='https://gist.github.com/5560916.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<p><code>rake -T</code> を実行すると以下のように表示され、<code>rake serverspec</code> ですべてのホストに対して実行したり、<code>rake serverspec:host</code> で特定のホストに対して実行したりできることがわかります。</p>

<pre><code>$ rake -T
rake serverspec           # Run serverspec to all hosts
rake serverspec:app001    # Run serverspec to app001.example.jp
rake serverspec:app002    # Run serverspec to app002.example.jp
rake serverspec:db001     # Run serverspec to db001.example.jp
rake serverspec:db002     # Run serverspec to db002.example.jp
rake serverspec:proxy001  # Run serverspec to proxy001.example.jp
rake serverspec:proxy002  # Run serverspec to proxy002.example.jp
</code></pre>

<p><code>Rakefile</code> 内で定義しているホストとロールのひもづけは、外部から JSON などで取得してきてもいいですし、工夫すれば、特定のロールに属するホスト群に対してのみ実行、といったこともできるでしょう。</p>

<p>こんな形で、どのホストに対してどのテストを実行するのか、というのは、serverspec 本体の仕様とは疎になってるので、<code>Rakefile</code> と <code>spec_helper.rb</code> をカスタマイズすることで、各自の環境や目的にあったファイル構成にしたり、対象のホストに関する情報を外部から引っ張ってきたり、といったことも可能です。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec のサイトつくりました]]></title>
    <link href="http://mizzy.org/blog/2013/03/30/1/" />
    <updated>2013-03-30T21:38:46+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/30/1/</id>
    <content type="html"><![CDATA[
<p>GitHub Pages で <a href="http://serverspec.org/">serverspec のサイト</a> をつくりました。</p>

<p><a href="http://serverspec.org/matchers.html">マッチャの一覧ページ</a> もつくったので、これを見てもらえれば、現状どういったテストができるのか一通り把握できるかと思います。</p>

<p>他にもこういったテストが欲しい、など要望があれば、<a href="https://github.com/mizzy/serverspec">こちら</a> までプルリク送ってください。</p>

<p>次は serverspec 自体の spec を充実させる予定。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec で同一ホストへの SSH 接続を再利用するようにしました]]></title>
    <link href="http://mizzy.org/blog/2013/03/28/1/" />
    <updated>2013-03-28T23:09:20+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/28/1/</id>
    <content type="html"><![CDATA[
<p>今まで <a href="https://github.com/mizzy/serverspec">serverspec</a> では、テストをひとつ実行するたびに、ホストへの SSH 接続/切断を繰り返していたのですが、バージョン 0.0.13 では、同一ホストへの SSH 接続を再利用することで、テスト時間を短縮できるようにしました。</p>

<p>接続の管理は serverspec-init 実行時に生成される spec/spec_helper.rb で行っているため、0.0.12 以前から利用している方は、一度 spec/spec_helper.rb を削除して、再度 serverspec-init を実行して再作成してください。</p>

<pre><code>$ rm spec/spec_helper.rb
$ serverspec-init
 + spec/spec_helper.rb
</code></pre>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Continuous Integration of Puppet with Ukigumo and serverspec]]></title>
    <link href="http://mizzy.org/blog/2013/03/27/2/" />
    <updated>2013-03-27T22:36:46+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/27/2/</id>
    <content type="html"><![CDATA[
<p>I made Puppet CI enviroment with <a href="http://ukigumo.github.com/ukigumo/">Ukigumo</a> . I realize following things.</p>

<ul>
<li>Manage Puppet manifests by Git repository</li>
<li>Set up <a href="http://ukigumo.github.com/Ukigumo-Server/">Ukigumo Server</a> </li>
<li>Make LXC system containers with <a href="/blog/2013/03/24/1">puppet-lxc-test-box</a></li>
<li>Run <a href="https://gist.github.com/mizzy/5252543">my own Ukigumo Client script</a> periodically by cron

<ul>
<li>If master branch of Puppet manifests repository is updated, pull manifests, apply them to LXC system containers and post results to Ukigumo Server.</li>
<li>Run <a href="/blog/2013/03/24/4">serverspec</a> tests to LXC system containers and post results to Ukigumo Server.</li>
</ul></li>
</ul>

<p>This is Ukigumo Server&#39;s top page. Latest results are listed up.</p>

<p><img src="/images/2013/03/ukigumo-top.jpg"></p>

<p>This is the detail of the result of applying Puppet manifests.</p>

<p><img src="/images/2013/03/ukigumo-puppet.jpg"></p>

<p>This is the detail of the results of serverspec tests.</p>

<p><img src="/images/2013/03/ukigumo-serverspec.jpg"></p>

<p>Alaso results are posted to IRC through <a href="http://search.cpan.org/%7Eyappo/App-Ikachan-0.11/lib/App/Ikachan.pm">Ikachan</a>.</p>

<p><img src="/images/2013/03/ukigumo-irc.jpg"></p>

<p>I will refactor Puppet manifests upon this CI environment.</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Ukigumo と serverspec で Puppet の継続的インテグレーション]]></title>
    <link href="http://mizzy.org/blog/2013/03/27/1/" />
    <updated>2013-03-27T21:38:39+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/27/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://blog.64p.org/">tokuhirom</a> さんにより開発されている <a href="http://ukigumo.github.com/ukigumo/">Ukigumo</a> を利用して、Puppet の CI 環境を構築してみた。やってることは以下の通り。</p>

<ul>
<li>Puppet マニフェストを Git リポジトリで管理</li>
<li><a href="http://ukigumo.github.com/Ukigumo-Server/">Ukigumo Server</a> を立てる</li>
<li><a href="/blog/2013/03/22/1/">puppet-lxc-test-box</a> で Puppet マニフェストを流し込むシステムコンテナを必要なロールの分だけ用意</li>
<li><a href="https://gist.github.com/mizzy/5252543">自前の Ukigumo クライアントスクリプト</a> を cron で定期的に走らせ以下を実行

<ul>
<li>Puppet マニフェストリポジトリの master ブランチが更新されていたら、git pull して Puppet マニフェストをシステムコンテナに適用し、適用結果を Ukigumo サーバに投げる</li>
<li><a href="/blog/2013/03/24/3/">serverspec</a> によるテストをシステムコンテナに対して実行し、結果を Ukigumo サーバに投げる</li>
</ul></li>
</ul>

<p>Ukigumo のトップ画面はこんな感じ。最新の結果一覧が表示されている。</p>

<p><img src="/images/2013/03/ukigumo-top.jpg"></p>

<p>Puppet マニフェストの適用結果の詳細はこんな感じ。</p>

<p><img src="/images/2013/03/ukigumo-puppet.jpg"></p>

<p>serverspec によるテスト結果の詳細はこんな感じ。</p>

<p><img src="/images/2013/03/ukigumo-serverspec.jpg"></p>

<p>結果は <a href="http://blog.yappo.jp/yappo/archives/000760.html">Ikachan</a> に投げて IRC で通知してる。</p>

<p><img src="/images/2013/03/ukigumo-irc.jpg"></p>

<p>これで Puppet マニフェストをガリガリとリファクタリングするための準備が整った。</p>

<p><a href="/blog/2013/03/22/1/">puppet-lxc-test-box</a> や <a href="/blog/2013/03/24/3/">serverspec</a> をつくったのは、こういうことがやりたかったから、ってなことを社内 IRC に書いたら、<a href="https://twitter.com/search/realtime?q=%233%E5%88%86%E3%81%A7%E5%B8%B8%E6%9D%BE&amp;src=typd">#3分で常松</a> くんを濡らすことに成功した。</p>

<blockquote class="twitter-tweet"><p>「15:00 mizzy: 最近ブログに書いてたことは、すべてこれへの布石」のカッコイイ感はんぱなくて濡れる</p>&mdash; TSUNEMATSU Shinya (@tnmt) <a href="https://twitter.com/tnmt/status/316792813712977920">March 27, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Ukigumo もとてもシンプルでいいですね。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec が Debian 対応した（してもらった）]]></title>
    <link href="http://mizzy.org/blog/2013/03/25/1/" />
    <updated>2013-03-25T01:52:46+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/25/1/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2013/03/24/3/">構築済みサーバを RSpec でテストする serverspec という gem をつくった</a> で、「Red Hat 系 Linux 前提のつくりになってしまっているので、他のディストリビューションや OS で利用したい、という方は、ぜひプルリクエストください」と書いていたら、早速 <a href="https://github.com/mizzy/serverspec/pull/1">Debian 系 OS 対応のプルリクエスト</a> をいただきました。ありがとうございます！</p>

<p>単に Debian 系 OS に対応するだけではなく、他の OS にも対応できるよう拡張しやすい形に書き換えていただいたり、serverspec 自体の spec も追加していただいたりと、至れり尽くせりで感謝感謝です。</p>

<pre><code class="ruby">c.include(Serverspec::DebianHelper, :os =&gt; :debian)
</code></pre>

<p>みたいな書き方も知らなかったので、大変参考になりました。</p>

<p><a href="https://github.com/mizzy/serverspec/blob/master/README.md">README</a> にも書いてありますが、こんな感じで OS を指定します。</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe &#39;httpd&#39;, :os =&gt; :debian do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39;, :os =&gt; :debian do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39;, :os =&gt; :debian do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p><code>:os =&gt; :debian</code> と何度も書くのが面倒なら、</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe &#39;www.example.jp&#39;, :os =&gt; :debian do
  it do
    &#39;httpd&#39;.should be_installed
  end
  it do
    &#39;httpd&#39;.should be_enabled
  end
  it do
    &#39;httpd&#39;.should be_running
  end

  it do
    &#39;port 80&#39;.should be_listening
  end

  conf = &#39;/etc/httpd/conf/httpd.conf&#39;
  it do
    conf.should be_file
  end
  it do
    conf.should contain &quot;ServerName www.example.jp&quot;
  end
end
</code></pre>

<p>とか書いてもいいですし、</p>

<p><code>serverspec-init</code> で生成される spec/spec_helper.rb に</p>

<pre><code class="ruby">require &#39;serverspec&#39;
require &#39;pathname&#39;

RSpec.configure do |c|
  c.include(Serverspec::DebianHelper)
  c.before do
    c.host = File.basename(Pathname.new(example.metadata[:location]).dirname)
  end
end
</code></pre>

<p>な感じで <code>c.include(Serverspec::DebianHelper)</code> を追加して、</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe &#39;httpd&#39; do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39; do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39; do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p>といった感じで、spec 内では OS は指定しない、といった書き方もできます。</p>

<p>好きなスタイルを選んでください。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec - a rubygem for testing provisioned servers with RSpec]]></title>
    <link href="http://mizzy.org/blog/2013/03/24/4/" />
    <updated>2013-03-24T18:55:10+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/24/4/</id>
    <content type="html"><![CDATA[
<p>In <a href="/blog/2013/03/24/2/">Testing servers provisioned by Puppet or Chef with RSpec</a>, I wrote how to test provisioned servers with RSpec.</p>

<p>I&#39;ve created a rubygem <a href="https://rubygems.org/gems/serverspec">serverspec</a> for that purpose.</p>

<p><a href="https://github.com/mizzy/serverspec">mizzy/serverspec</a></p>

<p>You can install serverspec with gem install.</p>

<pre><code>$ gem install serverspec
</code></pre>

<p>serverspec-init command creates template files and directories.</p>

<pre><code>$ serverspec-init
 + spec/
 + spec/www.example.jp/
 + spec/www.example.jp/httpd_spec.rb
 + spec/spec_helper.rb
 + Rakefile
</code></pre>

<p>spec/<a href="http://www.example.jp/httpd_spec.rb">www.example.jp/httpd_spec.rb</a> contains example spec code.</p>

<pre><code>require &#39;spec_helper&#39;

describe &#39;httpd&#39; do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39; do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39; do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p>You can write test code like this.</p>

<p>You may need some settings in ~/.ssh/config and ssh-agent for logging into the target server without the password/passphrase.</p>

<pre><code>Host *.example.jp
   User root
   IdentityFile ~/.ssh/for_serverspec_rsa
</code></pre>

<p>Run tests with rake spec.</p>

<pre><code>$ rake spec
/usr/bin/ruby -S rspec spec/www.example.jp/httpd_spec.rb
......

Finished in 0.99715 seconds
6 examples, 0 failures
</code></pre>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[構築済みサーバを RSpec でテストする serverspec という gem をつくった]]></title>
    <link href="http://mizzy.org/blog/2013/03/24/3/" />
    <updated>2013-03-24T17:35:20+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/24/3/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2013/03/23/1/">Puppet や Chef で構築したサーバを RSpec でテストする</a> で書いた仕組みを使いやすくするために <a href="https://github.com/mizzy/serverspec">serverspec</a> という名前で gem 化してみた。</p>

<p>rubygems.org にも登録してあるので、gem install でインストールできる。</p>

<pre><code>$ gem install serverspec
</code></pre>

<p>インストールしたら、適当なディレクトリで serverspec-init を実行。すると、雛形となるディレクトリやファイルを生成する。</p>

<pre><code>$ serverspec-init
 + spec/
 + spec/www.example.jp/
 + spec/www.example.jp/httpd_spec.rb
 + spec/spec_helper.rb
 + Rakefile
</code></pre>

<p>spec/<a href="http://www.example.jp/httpd_spec.rb">www.example.jp/httpd_spec.rb</a> がサンプルテストコードで、こんな感じになってる。</p>

<pre><code>require &#39;spec_helper&#39;

describe &#39;httpd&#39; do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39; do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39; do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p>これに倣って spec/target.example.jp/xxxxx_spec.rb というファイルをつくって、テストを書いていく。</p>

<p>テスト対象のホストには SSH でアクセスするので、パスワード入力しなくて良いように、~/.ssh/config を書いたり、ssh-agent を利用したりすると良いでしょう。</p>

<pre><code>Host *.example.jp
   User root
   IdentityFile ~/.ssh/for_serverspec_rsa
</code></pre>

<p>rake spec でテストを実行。</p>

<pre><code>$ rake spec
/usr/bin/ruby -S rspec spec/www.example.jp/httpd_spec.rb
......

Finished in 0.99715 seconds
6 examples, 0 failures
</code></pre>

<p><strike>Red Hat 系 Linux 前提のつくりになってしまっているので、他のディストリビューションや OS で利用したい、という方は、ぜひプルリクエストください。</strike> → <a href="https://github.com/mizzy/serverspec/pull/1">Debian 系 OS 対応プルリクエスト</a> をいただいたので、マージして対応しました！</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Testing servers provisioned by Puppet or Chef with RSpec]]></title>
    <link href="http://mizzy.org/blog/2013/03/24/2/" />
    <updated>2013-03-24T02:29:42+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/24/2/</id>
    <content type="html"><![CDATA[
<p><strong>Note:</strong> I made <a href="https://github.com/mizzy/serverspec">serverspec</a> gem for this purpose. Please see the entry <a href="/blog/2013/03/24/4/">serverspec - a rubygem for testing provisioned servers with RSpec</a>.</p>

<p><a href="/blog/2013/03/24/1/">I&#39;ve made a Puppet module for creating LXC system containers</a>.Next I&#39;ve tried to the basis for writing test code easily.</p>

<p>With <a href="https://github.com/mizzy/rspec-lxc-test-box">rspec-lxc-test-box</a>, you can write code for testing server status like this.</p>

<pre><code class="ruby">require &#39;container_spec_helper&#39;

describe &#39;nrpe&#39; do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;nagios-plugins-all&#39; do
  it { should be_installed }
end

describe &#39;/etc/nagios/nrpe.cfg&#39; do
  it { should be_file }
  it { should contain &#39;server_port=5666&#39; }
end

describe &#39;/etc/nrpe.d/01base.cfg&#39; do
  it { should be_file }
end

describe &#39;port 5666&#39; do
  it { should be_listening }
end
</code></pre>

<p>This code accesses to a container through SSH and execute commands to check whether files exist, packages are installed, files contain some strings, services run, some ports listen and so on.Very simple.(But code base are specific for Red Hat and its clone OS.)</p>

<p>You can see how I make it simply <a href="https://github.com/mizzy/rspec-lxc-test-box/tree/master/spec/support/matchers">with these codes</a>.</p>

<p>This test code works with any servers provisioned by any tools(Puppet, Chef, CFEngine, Shell Script, Hands and so on).</p>

]]></content>
  </entry>


</feed>
