<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Gosuke Miyashita]]></title>
    <link href="https://mizzy.org/atom.xml" rel="self"/>
    <link href="https://mizzy.org/"/>
    <updated>2025-05-29T09:04:51+09:00</updated>
    <id>https://mizzy.org/</id>
    <author>
        <name><![CDATA[Gosuke Miyashita]]></name>
    </author>
    <generator uri="https://github.com/mizzy/nebel/">Nebel</generator>

    <entry>
        <title type="html"><![CDATA[Synology NASをTailscaleのExit Nodeにして外からLANにアクセス]]></title>
        <link href="https://mizzy.org/blog/2025/05/29/1/"/>
        <updated>2025-05-29T09:04:51+09:00</updated>
        <id>https://mizzy.org/blog/2025/05/29/1/</id>
        <content type="html"><![CDATA[
<p>外出先から自宅のLANに接続するために、Synology NASをExit Nodeとして設定した時のメモ。</p>
<p>Tailscaleのオフィシャルドキュメントに、Synology NAS上でのインストール/設定方法がまとめられているので、基本的にはこれを見ればよい。</p>
<p><a href="https://tailscale.com/kb/1131/synology#manual-installation-steps">Access Synology NAS from anywhere · Tailscale Docs</a></p>
<p>ただしこのドキュメントでは、Exit Nodeとして設定してLANアクセスできるようにする方法は説明されていないので、こちらの動画も参考にした。</p>
<p><a href="https://www.youtube.com/watch?v=F7mqVt_pUJY">Setup Your Synology NAS As A Tailscale Exit Node - YouTube</a></p>
<p>具体的には、Synology NASにSSHでログインして、以下のコマンドを実行すれば良い。</p>
<pre><code class="language-shell">sudo tailscale up \
--advertise-exit-node \
--advertise-routes=192.168.100.0/24 \
--reset
</code></pre>
<p>その後、コンソール上でApproveする。</p>
<p><img src="/images/2025/05/tailscale-exit-node.png" alt="" /></p>
<p>これで外出先から、Tailscaleが入っていない/入れられない自宅LAN内のマシンにもアクセスできるようになった。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[社会保険料額情報HTMLジェネレーター]]></title>
        <link href="https://mizzy.org/blog/2025/05/24/1/"/>
        <updated>2025-05-24T18:36:10+09:00</updated>
        <id>https://mizzy.org/blog/2025/05/24/1/</id>
        <content type="html"><![CDATA[
<p>社会保険料額情報、電子データで受け取る申請を行って、無事受理された。</p>
<p><a href="https://www.nenkin.go.jp/denshibenri/online_jigyousho/denshidata/tsuchisho.html">電子データで受け取れる各種情報・通知書の詳細｜日本年金機構</a></p>
<p>申請時に、事業所整理記号をどう入力すれば良いのかよくわからず、何度かリジェクトされたけど。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">解決した。前2桁は都道府県コードを入れる必要があった。申請フォームに様式記入要領PDFへにリンクがあり、それを見ると書いてあった。 <a href="https://t.co/bfWQzaUiqL">https://t.co/bfWQzaUiqL</a></p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1926157537159610449?ref_src=twsrc%5Etfw">May 24, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>電子データはZIPファイルになっていて、中身を見るとXMLファイルとXSLファイルで構成されている。IEではそのまま閲覧できるようだが、Microsoft EdgeやSafariの場合は、ブラウザの設定変更が必要になる。</p>
<ul>
<li><a href="https://www.nenkin.go.jp/denshibenri/oshirase/zenpan/20220610.html">InternetExplorer以外のブラウザでの決定通知書の閲覧方法について｜日本年金機構</a></li>
<li><a href="https://www.nenkin.go.jp/faq/denshi/e-gov/koubunsho_hirakikata.html">機構から送付されるXML形式の通知書（公文書）の開き方を教えてください。｜日本年金機構</a></li>
</ul>
<p>また、普段使いしてるChromeでは、そのままさくっと表示する方法がなさそうで、以下のサイトを参考に、XMLとXSLからHTMLに変換して表示する方法を試してみた。</p>
<ul>
<li><a href="https://gammasoft.jp/blog/convert-xml-and-xsl-to-one-html-by-python/">電子公文書の XML と XSL を Python で１つのHTMLに変換する方法 - ガンマソフト</a></li>
<li><a href="https://zenn.dev/sora_kumo/articles/xsl-viewer-html">電子公文書(XML+XSL)をChromeで表示する</a></li>
</ul>
<p>この方法でばっちり表示されたのだが、PDFで保存した場合にもきれいにレイアウトしたい、と思い、<a href="https://claude.ai/">Claude</a>に社会保険料額情報HTMLジェネレーターつくってもらった。</p>
<p>ジェネレーターはひとつのHTMLファイルで構成されていて、開くとこのような画面になる。</p>
<p><img src="/images/2025/05/social-insurance-premium-amount-generator-0.png" alt="" /></p>
<p>社会保険料額情報のXMLが含まれるZIPファイルをアップロードするとこのようになる。</p>
<p><img src="/images/2025/05/social-insurance-premium-amount-generator-1.png" alt="" /></p>
<p>プレビュー表示するとこのようになり、PDFにするとA4横一枚におさまるレイアウトになっている。</p>
<p><img src="/images/2025/05/social-insurance-premium-amount-generator-2.png" alt="" /></p>
<p>ソースコードはこちら → <a href="https://github.com/mizzy/social-insurance">https://github.com/mizzy/social-insurance</a></p>
<p>こちらで実際に試せます → <a href="https://mizzy.org/social_insurance_premium_amount_generator.html">https://mizzy.org/social_insurance_premium_amount_generator.html</a></p>
<p>社会保険料額情報だけしか対応していないので、保険料納入告知額・領収済額通知書等にも対応予定。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[長時間のパソコン作業に適したホテル一選]]></title>
        <link href="https://mizzy.org/blog/2025/02/24/1/"/>
        <updated>2025-02-24T21:05:24+09:00</updated>
        <id>https://mizzy.org/blog/2025/02/24/1/</id>
        <content type="html"><![CDATA[
<p>三選とか十選とかいきたいところだけど、自分の少ないホテル宿泊経験では、ヒルトン福岡シーホークぐらいしか知らないので。</p>
<p>出張の際にホテルの部屋でパソコン仕事する際、問題になるのが椅子。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">家で仕事してると、椅子のことはあまり意識しないんだけど、ホテルで仕事してるとすぐに腰や背中が痛くなってくるので、家で使ってる椅子は本当に疲れにくいんだな、ということを実感する。</p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1605182622703161346?ref_src=twsrc%5Etfw">December 20, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>その点、ヒルトン福岡シーホークは<a href="https://jp.steelcase.com/collections/chairs-seating/products/think">SteelcaseのThinkチェア</a>が配備されていて、長時間パソコン作業しても疲れにくい。</p>
<p>ホテルサイトの写真を見る限りでは、和室以外のほとんどの部屋に配備されてそう。</p>
<blockquote>
<p><a href="https://www.hilton.com/ja/hotels/fukhihi-hilton-fukuoka-sea-hawk/rooms/">https://www.hilton.com/ja/hotels/fukhihi-hilton-fukuoka-sea-hawk/rooms/</a><br />
<img src="/images/2025/02/seahawk-rooms.png" alt="" /></p>
</blockquote>
<p>実際、<a href="https://mizzy.hateblo.jp/entry/2024/05/07/115701">色々なタイプの部屋に宿泊</a>したけど、スイート和洋室以外はすべてThinkチェアだった。欲を言えば、アームレストの高さが調節できるタイプだとなお良いのだけど、まともなワークチェアがあるだけで十分ありがたい。</p>
<p>ヒルトン福岡シーホーク以外だと、羽田エクセルホテル東急のプレミアと呼ばれるタイプの部屋にはThinkチェアがある模様。</p>
<blockquote>
<p><a href="https://www.tokyuhotels.co.jp/haneda-e/room/index.html">https://www.tokyuhotels.co.jp/haneda-e/room/index.html</a><br />
<img src="/images/2025/02/haneda-excel-hotel-rooms.png" alt="" /></p>
</blockquote>
<p>自分はスタンダードタイプの部屋には泊まったことがあるけど、Thinkチェアはなかった。</p>
<p>ホテル検索サイト、椅子でも検索できるといいのに。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[DuckDBで課金時間の多いGitHub Actionsワークフローを抽出]]></title>
        <link href="https://mizzy.org/blog/2025/02/15/1/"/>
        <updated>2025-02-15T09:03:26+09:00</updated>
        <id>https://mizzy.org/blog/2025/02/15/1/</id>
        <content type="html"><![CDATA[
<script src="https://gist.github.com/mizzy/774585268e81b49f38173f8e88622521.js"></script>
<p>ChatGPTにやらせても良い。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[吉祥寺.pm37に参加した]]></title>
        <link href="https://mizzy.org/blog/2025/02/01/1/"/>
        <updated>2025-02-01T01:38:10+09:00</updated>
        <id>https://mizzy.org/blog/2025/02/01/1/</id>
        <content type="html"><![CDATA[
<p><a href="https://kichijojipm.connpass.com/event/339040/">【n回目の増枠！！】吉祥寺.pm37【おいでよ吉祥寺！オフライン開催！】 - connpass</a></p>
<p>吉祥寺.pm初参加。コロナ禍以後、オフラインの技術系イベントは、CloudNative Days Fukuoka 2023とPHPカンファレンス福岡2024ぐらいしか参加していなかったので、もっと積極的に参加するようにしよう、と思ったタイミングで開催が目に止まったので参加してきた。</p>
<p>この記事は、参加レポートというほどでもない、雑なメモです。</p>
<hr />
<h2>会場到着まで</h2>
<p>開始時刻が19時で、それぐらいに到着するよう電車に乗ると、退勤ラッシュに巻き込まれそうだな、と思ったので早めに移動。17時には吉祥寺駅に着いていた。まだ使い切っていないモスカードがあるので、モスバーガーに入って<a href="https://www.oreilly.co.jp/books/9784814400911/">Tidy First?</a>でも読みながら時間まで待とう、と思ったが、改装中で休業だった。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">永久不滅ポイントと交換したモスカード2000円分x 5枚が届いた。残高移行して一枚にまとめた。これでモスバーガーで豪遊する。 <a href="https://t.co/o9FkTorEuc">pic.twitter.com/o9FkTorEuc</a></p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1801092740383686798?ref_src=twsrc%5Etfw">June 13, 2024</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>当てが外れて、どこで時間潰そうかとウロウロしたのだけど、めんどくさくなって結局南口のマクドナルドにした。期間限定のメキシカンチーズチキン、もう1回ぐらい食べとくか、と思ったら販売してなかったので、チーズダブルてりやきを食べた。</p>
<p>で、Tidy First?読みながら時間潰していたのだけど、そういえばconnpassには開始時刻は書いてたけど、開場時刻は書いてなかったよな、何時になったら入れるんだろう、と思い、つぶやいておけば誰か反応してくれるかも、と思ったらsongmuさんが教えてくださった。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">18:30のようです <a href="https://t.co/1Uj9P3rb3P">https://t.co/1Uj9P3rb3P</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/1885257591884038484?ref_src=twsrc%5Etfw">January 31, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>ありがとうございました、助かりました。</p>
<hr />
<h2>会場到着</h2>
<p>受付があったけど、懇親会に参加しない自分は特に何もする必要がなかった。<a href="https://x.com/magnolia_k_">@magnolia_k_</a>さんにPayPayでカンパするためのQRコードがあったのでカンパした。企業スポンサーとかついてないのに参加費無料なので、会場代は@magnolia_k_さんのポケットマネーから出してるのかな、と思ってご本人に聞いたら、やはりそうだとのこと。ただ、毎回カンパで、赤字にもならず、それほど多過ぎもしない額が集まってるとのことなので安心した。</p>
<p>老眼が進んできてるので前から2列目の席に座った。</p>
<hr />
<h2>発表について</h2>
<p>LT含めて全部で発表者が15人と多いので、全てには触れずに、特に強く印象に残ったものだけ。</p>
<h3>初めての海外カンファレンス</h3>
<p>masasuzuさんによる発表。</p>
<p>今回のテーマは「ぼくのかんがえたさいきょうのアーキテクチャ」なのだけど、connpassでこの文章読み飛ばしていて、会場で聞いて初めて知った。そして、発表者のmasasuzuさんもテーマをご存知なかったとのことで、全然関係ないテーマですみません、と謝罪していて、ああ、知らなかったの自分だけじゃなく、発表者の方もなんだ、と妙に面白かった。</p>
<h3>ポッドキャストは作れる!</h3>
<p>Songmuさんの発表。Indie Web、コンテンツを自分で管理して公開したい、ブログエンジンも自作OSS、funが大事、といった話に共感しかなくて、これに関して自分の思うところを書こうと思ったら、ここだけ長文になって記事全体のバランスが悪くなるので、たぶん別記事で書くかもしれないし書かないかもしれない。</p>
<h3>DSLによる抽象レイヤーの構築</h3>
<p>yonekuboさんの発表。最初の方は、内部DSLや外部DSLとは、といったおさらい的な話。おすすめのDSLに関する本が2冊とも絶版になってる、と聞いて、確かに、最近はDSLって言葉を敢えて使うことはなく、当たり前のようにDSLを使っているよな、と。今更感のあるDSLの話をどう展開するのかな、と思ったら、後半は生成AIやJSXを絡めた今風なDSLの使い方の話になっていき、とても楽しめた。</p>
<h3>もうひとつのアーキテクチャ</h3>
<p>kondoyukoさんの発表。kondoyukoさん、以前から存じ上げていたけど、発表ははじめて聞いた。本物のアーキテクチャの話（建築の話）だった。</p>
<h3>AWSを使ったイベントの配信アーキテクチャ</h3>
<p>r_takaishiさんの発表。出てくるAWSのサービスが、全部聞いたことないやつだった。</p>
<h3>waiwai-aiを入社2ヶ月のエンジニア3人と作るためのさいきょうのアーキテクチャ</h3>
<p>Furudonoさんの発表。まさにコンウェイの法則の具体例で、4人チームと少人数でもこの法則が適用されるのか、面白い、と思った。</p>
<h3>戸籍の話 (connpass上ではTBDになってて正確なタイトル忘れた)</h3>
<p>toya524287さんの発表。<a href="https://toya.hatenablog.com/entry/2024/06/01/180018">先祖の戸籍の写しを取り寄せてみたら、214年前（江戸時代、文化7年）までさかのぼれた - Really Saying Something</a>の内容を5分で、といった感じの内容。ちゃんとアーキテクチャにも絡めた話にまとまっていてよかった。</p>
<p>以前勤めていた会社で、自由なテーマで発表するLT回をやったことがあるのだけど、その時のことを思い出した。自分はその時、<a href="https://www.slideshare.net/slideshow/ia-14907107/14907107">Ia型超新星とチャンドラセカール限界</a>というタイトルで発表した。</p>
<hr />
<h2>その他</h2>
<p>会場に早めに着いて、magnoliaさんとお話しできたのは良かったけど、それ以外の方とは全然お話しできなかった。参加者一覧を見ると、知り合いが結構参加してそうだったけど、全然見つけられなかった、というかそもそも、見つけて話かけるような時間がなかった。</p>
<p>帰りの電車の時間があるので懇親会に参加しないですぐに帰ったのだけど、今度は車で行って懇親会に参加しようかな、と思った。お酒飲めないのは損に感じることが多いのだけど、こういう場合に車移動を躊躇なく選択できるメリットもある。</p>
<p>最後に一句詠む発表者が多くてなぜだろう、と思ったら途中で解説があって、武蔵野公会堂の利用申請で、利用目的で「趣味」カテゴリを選ぶと「句会」しか選択肢がないとのことで、句会で利用申請しているから、とのことだった。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[Git scrapingでヒルトンの宿泊料金/ポイントをウォッチ]]></title>
        <link href="https://mizzy.org/blog/2025/01/30/1/"/>
        <updated>2025-01-30T13:25:16+09:00</updated>
        <id>https://mizzy.org/blog/2025/01/30/1/</id>
        <content type="html"><![CDATA[
<p>自分はHilton Honors会員かつ<a href="https://www.hpcj.jp/">HPCJ</a>会員なので、ポイントを利用する場合やHPCJ対象外ホテルを予約する場合はオフィシャルサイトから、ポイントを利用せずHPCJ対象ホテルを予約する場合はHPCJサイトから予約している。</p>
<p>どちらのサイトで予約する場合でも、前日までキャンセル可能なFlexible Rateで予約をしている。（HPCJサイトでの予約は必然的にFlexible Rateになる。）</p>
<p>ホテルの宿泊料金は変動するので、予約した後で自分が予約した時の料金より安くなることがよくある。なので、予約後も料金を時々チェックして、予約時より安くなっていたらキャンセルして予約し直す、といったことをしている。</p>
<p>そこで、<a href="/blog/2025/01/28/1/">PlaywrightでGit scraping</a>という記事で紹介した<a href="https://github.com/mizzy/git-scraping-playwright-template">git-scraping-playwright-template</a>をベースにして、指定した日程のヒルトン宿泊にかかる料金やポイントを自動でウォッチできるやつをつくってみた。</p>
<p><a href="https://github.com/mizzy/git-scraping-hilton"><img src="https://opengraph.githubassets.com/efbe89083ae3d67f091dde51fe157d2da35426dc8300f8baab15b6c14eeb82f5/mizzy/git-scraping-hilton" height="200" /></a></p>
<p>config.tsで以下のようにウォッチしたいヒルトンホテルの場所や日程を指定する。</p>
<script src="https://gist.github.com/mizzy/bb16cb6f2b0de94f25534c1b60c23232.js"></script>
<p>今のところ、福岡、お台場、有明しか対応していない。対応ホテルを増やしたい場合は、config_type.tsの以下の部分に追加する。</p>
<script src="https://gist.github.com/mizzy/88978b078626b9c464648f451f01b20a.js"></script>
<p>各ホテルの料金やポイントは、<code>https://www.hilton.com/en/book/reservation/rooms/?ctyhocn=FUKHIHI&amp;arrivalDate=...</code><br />
というURLから取得しているが、<code>ctyhocn=FUKHIHI</code>にホテルコードらしきものが入っているので、ロケーション名とホテルコードのマッピングを上のコードで行っている。</p>
<p>ポイントは「Pay with Points」に表示されているもの、料金は「Quick Book」のところに表示されているFlexible Rateの料金を取得している。</p>
<p><img src="/images/2025/01/hilton-odaiba.png" alt="" /></p>
<p>同じ日程、同じ部屋タイプでも様々な料金プランがあるが、基本的にはFlexible Rateと連動してるはずなので、Flexible Rateをウォッチしておけば、価格の変動はわかるはず。</p>
<p>より正確な情報を得ようとするならば、自分の場合、ポイント、Flexible RateにHonors Discountが適用された価格、HPCJ価格（Flexible Rate * 0.75）の3つがあれば良いので、次はこれらの料金を取得できるよう改善する予定。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[PlaywrightでGit scraping]]></title>
        <link href="https://mizzy.org/blog/2025/01/28/1/"/>
        <updated>2025-01-28T21:21:41+09:00</updated>
        <id>https://mizzy.org/blog/2025/01/28/1/</id>
        <content type="html"><![CDATA[
<p>こちらのスライドに影響されて、Git scraping始めました。</p>
<script defer class="speakerdeck-embed" data-id="6844b3b0badf4a13a58f6528c58394d5" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script>
<p>親切なことに、テンプレートリポジトリを提供してくださっているので、さくっと始めることができました。</p>
<p><a href="https://github.com/ohbarye/git-scraping-template"><img src="https://opengraph.githubassets.com/eec38b4a69b9284604e4880ce91d56a6dd613cfdfcd1e7af8dfaa6d6ca55d5e6/ohbarye/git-scraping-template" height="300" /></a></p>
<p>ただ、スクレイピングしたいサイトの中にはJavaScript必須のものもあったので、そういったサイトにも対応できるよう、ohbaryeさんのテンプレートリポジトリを参考にして、PlaywrightでGit scrapingするためのテンプレートリポジトリを作成してみました。</p>
<p><a href="https://github.com/mizzy/git-scraping-playwright-template"><img src="https://opengraph.githubassets.com/ad5e0a080d1b88539dd3bc7e562cbe6e1c7e454a415566433117ccee07e23d29/mizzy/git-scraping-playwright-template" height="300" /></a></p>
<p>よろしければぜひご活用ください。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[アメックスの明細をZaimに同期するためのプログラム]]></title>
        <link href="https://mizzy.org/blog/2025/01/27/1/"/>
        <updated>2025-01-27T11:52:18+09:00</updated>
        <id>https://mizzy.org/blog/2025/01/27/1/</id>
        <content type="html"><![CDATA[
<p>家計簿ソフトに<a href="https://zaim.net/">Zaim</a>を利用しているのだけど、一時期アメックスとの連携に不具合があった。（今は解消している）</p>
<p><a href="https://content.zaim.net/questions/show/1109">アメリカン・エキスプレスの連携不具合について（2024/5/31 掲載）:よくある質問｜家計簿アプリ Zaim</a></p>
<p>幸いなことにZaimは、サポートはしていないながらも<a href="https://content.zaim.net/questions/show/338">CSVアップロード機能を提供</a>しているし、<a href="https://dev.zaim.net/">APIも提供</a>しているので、自力でなんとかするためのプログラムを作成した。</p>
<p>ひとつはアメックスからCSVを取得するための<a href="https://github.com/mizzy/amexcsv">amexcsv</a>というプログラム。</p>
<p><a href="https://github.com/mizzy/amexcsv"><img src="https://opengraph.githubassets.com/1de9675683c2ec1ebbea7d957f33022deb3b65cde74fc9411852abaaa307a7a5/mizzy/amexcsv" height="200" /></a></p>
<p>もうひとつはアメックスの明細CSVをZaimに同期するための<a href="https://github.com/mizzy/amexaim">amexaim</a>というプログラム。</p>
<p><a href="https://github.com/mizzy/amexaim"><img src="https://opengraph.githubassets.com/0d8975c687a5af67bf70dc3d5ff0670455ba279a3ab715684a780875f878098b/mizzy/amexaim" height="200" /></a></p>
<p>以下のように実行すると、アメックスのサイトから明細CSVをダウンロードして、Zaimに同期してくれる。</p>
<pre><code class="language-shell">$ amexcsv | amexaim
</code></pre>
<p>これを1日1回cronで実行している。時々、二要素認証が発生してCSVダウンロードに失敗してることがあるが、その場合は</p>
<pre><code class="language-shell">$ HEADLESS=false amexcsv | amezaim
</code></pre>
<p>と実行して、手動で二要素認証を通している。</p>
<p>現在は連携不具合は解消されているけれど、以下の理由で自前のプログラムを使い続けている。</p>
<ul>
<li>今後また連携できなくなる可能性がある（Zaim側ではなくアメックス側の問題で）</li>
<li>Zaimの連携機能を利用する場合、家族カードは口座グループに追加することができないのが少し不便</li>
</ul>
<p>プログラムの仕様上の問題で、完全には一致しない場合があるのだけど、事業の帳簿と違って完全一致させる必要はないので、満足してる。</p>
<p>ただ、API経由の登録だと、連携の履歴には未読としては表示されないので、そこだけは少し不便だけど、致命的ではないので、当分アメックスの明細は自前プログラムで同期するつもり。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[Ruby製の静的サイトジェネレータをGoで再実装した]]></title>
        <link href="https://mizzy.org/blog/2025/01/26/1/"/>
        <updated>2025-01-26T19:32:42+09:00</updated>
        <id>https://mizzy.org/blog/2025/01/26/1/</id>
        <content type="html"><![CDATA[
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ブログ3年ぐらい更新してなくて、もう少しマメに書くか、という機運になってきたので、ブログツール書き始めた。</p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1883311289768063332?ref_src=twsrc%5Etfw">January 26, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>このブログは、マークダウン形式で記事を書いて、<a href="https://github.com/mizzy/ruby-nebel">Nebel</a>というRubyで実装したお手製の静的サイトジェネレータでHTMLに変換してGitHub Pagesでホストしている。</p>
<p>が、久々に書くか、と思ってNebelを動かしてみたところ、エラーで動かない。具体的には、ローカルでの確認用サーバのために利用しているeventmachine gemがビルドに失敗してインストールできない。</p>
<p>エラーの原因を調べて直すのもよいのだけど、13年ぐらい前につくって全然メンテしてないし、今となっては不要な機能もあるので、<a href="https://github.com/mizzy/nebel">Goで再実装した</a>。</p>
<p>といっても、Ruby版のすべての機能を実装したわけではない。Ruby版にはプラグイン機構があって、様々なプラグインが動いているが、プラグイン機構や各種プラグインは未実装。</p>
<p>例えばgistプラグインは</p>
<pre><code>{% gist 37401088bc6e3564addf7a27d698f6fb %}
</code></pre>
<p>と書いておくと</p>
<pre><code class="language-html">&lt;div&gt;&lt;script src='https://gist.github.com/37401088bc6e3564addf7a27d698f6fb.js?file='&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
</code></pre>
<p>といったHTMLに変換してくれる。自分でつくっておいてなんだけど、プラグインで変換しなくてもgistのページからEmbed用コードを簡単にコピーできるので、別にいらなかったな、と思ってる。</p>
<p>もしかしたら必要なプラグインもあるかもだけど、必要になってから実装すればいいやと思っている。</p>
<p>プラグイン利用前提で書いた過去記事はGo版では正しく変換してくれないことになるが、過去記事を再生成する必要はいまのところないので特に問題なさそう。</p>
<p>またRuby版には、コマンド一発で確認用のローカルサーバを立ち上げてブラウザで開き、記事を保存したら自動でHTMLに変換してブラウザも自動リロード、という、機能があるのだけど、これはあれば便利だけどなくても困らないので未実装。</p>
<p>とりあえず最低限必要な機能は実装でき、この記事もGo版で生成している。</p>

]]></content>
    </entry>

</feed>
