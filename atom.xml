<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2012-03-31T22:31:00+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[puppet-report-ikachan]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-31T22:31:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've made a puppet module [puppet-report-ikachan](https://github.com/mizzy/puppet-report-ikachan) to send reports to [Ikachan](https://github.com/yappo/p5-App-Ikachan) and uploaded this module to [Puppet Forge](https://forge.puppetlabs.com/users/mizzy/modules/report_ikachan)

This is the screenshot of showing reports sent by this module on Limechat.

<img src="/images/2012/03/ikachan.png">

This module is very primitive, so please give me feedbak on [GitHub](https://github.com/mizzy/puppet-report-ikachan).]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Image with EXIF tag plugin]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-07T23:38:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've modified [Image tag plugin](https://github.com/imathis/octopress/blob/master/plugins/image_tag.rb) into [Image with EXIF tag plugin](https://github.com/mizzy/jekyll-plugins/blob/master/image_with_exif_tag.rb) based on [the idea of mattn-san's comment](/blog/2012/03/07/exif-tag-plugin). (Thanks, mattn-san!)

If you write text like this:

	{% img_with_exif /images/2012/03/first_shot_orion.jpg %}

You will see the converted result like this:

<img src="/images/2012/03/first_shot_orion.jpg" alt="Focal Length 10.0 mm F5.6 NIKON D5000 ISO 1600 Exposure Time 15 second 2010-11-05 01:32:07 +0900" title="Focal Length 10.0 mm F5.6 NIKON D5000 ISO 1600 Exposure Time 15 second 2010-11-05 01:32:07 +0900">

The title and alt attribute have EXIF data of thie image file.
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[EXIF tag plugin]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-07T00:19:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've wrote [EXIF tag plugin for Jekyll](https://github.com/mizzy/jekyll-plugins/blob/master/exif_tag.rb).

If you write text like this:

	{% img /images/2012/03/first_shot_orion.jpg %}
	
	{% exif /images/2012/03/first_shot_orion.jpg %}

You will see the converted result like this:

<img src="/images/2012/03/first_shot_orion.jpg">

焦点距離 10 mm F5.6 NIKON D5000 ISO 1600 15 秒露光 2010-11-05 01:32:07 +0900



]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Rakuten tag plugin for Jekyll]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-04T22:37:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've wrote [Rakuten tag plugin for Jekyll](https://github.com/mizzy/jekyll-plugins/blob/master/rakuten_tag.rb).

This is inspired by [Amazon Plugin for Octopress](http://zanshin.net/2011/08/24/amazon-plugin-for-octopress/).

You can use this plugin like this.

	{{ "nikondirect:10000349" | rakuten_large_image }}

<a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F"><img src="http://thumbnail.image.rakuten.co.jp:80/@0_gold/nikondirect/product/img/psp00367_01.jpg" /></a>

	{{ "nikondirect:10000349" | rakuten_medium_image }}

<a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F"><img src="http://thumbnail.image.rakuten.co.jp/@0_gold/nikondirect/product/img/psp00367_01.jpg?_ex=128x128" /></a>

	{{ "nikondirect:10000349" | rakuten_small_image }}

<a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F"><img src="http://thumbnail.image.rakuten.co.jp/@0_gold/nikondirect/product/img/psp00367_01.jpg?_ex=64x64" /></a>

	{{ "nikondirect:10000349" | rakuten_link }}

<a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F">ニッコールタンブラー 24-70</a>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Paperboy's engineer evaluation system]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-02-29T21:54:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
今年から新たに[ペパボ](http://www.paperboy.co.jp/)で導入された、技術者向けの評価制度については、[こちらのエントリ](/blog/2012/01/17/paperboy-is-hiring/) で書いたのですが、本日、その一次評価が完了しました。

評価のプロセスは、一次はテクニカル・マネージャーによる評価、二次は経営会議メンバーによる評価、と二段階の評価となっています。

自分が担当した一次評価の詳細は、以下のようになっています。

 1. シニア、またはアドバンスドシニアに上がりたい人には、自ら立候補してもらう。
 2. 立候補する人は、定められたフォーマットにしたがって、自分がそのポジションにふさわしいと思う理由や実績について Markdown で書き、指定した Git リポジトリに push する。（「定められたフォーマット」と言っても、最初に名前、次に希望のポジションを書いてもらうだけで、それ以外は自由。）
 3. 文書提出後、一人一人と面談を行う。
 4. 文書の内容と面談の結果にもとづいて、各人が提出した文書の末尾に、結果（通過 or 不通過）、評価ポイント、今後期待すること、を評価者が追記し、git push する。

Git リポジトリは社内で誰でも参照できるし、Markdown で書かれた文書は、HTML 変換＆index.html を生成し、社内の誰もが見えるところに置いてありますので、評価の過程が、面談以外はすべてオープン、という形をとっています。

今回、この制度が導入されて初めての一次評価ということもあって、総評を社内 SNS に書いてみたのですが、せっかくなのでその内容をこちらで公開したいと思います。

多少文言を直したり、完全に社内向けな部分は改変してますが、内容はほとんどこのまんまです。

----

ペパボで初めて導入された技術者評価制度ということもあり、また、他社の人と話していても、技術者の評価については、一定の明確な基準を設けることが難しい、ということで、基準についてはとても悩みました。

悩みましたが、まず今回は初めてということもあり、厳し目に評価しています。（最初に緩くして後で厳しくするよりは、最初に厳しくして、後で緩めるほうがいいだろう、ということで。）

今回評価にあたっては、以下の3つに重点を置いてます。

 1. プロフェッショナル領域であるからには、純粋に技術だけで評価する。
 2. シニアと呼ぶからには、他の人にはない、技術的に優れた何かを持っている。
 3. アウトプットしている。

特に1についてですが、サービス運営のためには、必ずしも高い技術力は必要ないわけで、技術以外の面で多大な貢献をしてきている技術者も多くいると思います。ですが、そういった部分の評価は、各部署で行うべきであって、宮下が評価すべきではないと判断し、敢えて技術だけで評価することにしました。

また、2や3は、両方ともきちんと満たしていなければいけないか、というとそういうわけではなく、どちらか一方が圧倒的に優れている場合には、もう一方はあまり重視していません。（とは言え、両方満たしてるのが望ましいですが。）

ただし、アウトプットがないと評価のしようもないので、最低限のアウトプットはやはり必要です。

この様な観点に基づいた各人に対する評価については、完全にオープンにしてますので、こちらで確認できます。

（社内サーバのURLなので省略）

評価全体を見渡してみると、評価の高い人には、以下の傾向が見られます。（一人がすべてを満たしている、というわけではないです。）

* 開発手法、開発フローに対するきちんとした理解と実践
* 開発もインフラもできるオールラウンドな能力
* 常に新しい技術情報を追いかけ、それを仕事にも取り込み活かしている
* 現状これでやれてるから、とそこに留まらずに常に改善していこうとしている
* 一部の技術ではずば抜けていて、社内で他にできる人が少ない、あるいはいない
* いかに自動化して楽をするか、ということを常に考え実践している
* アウトプットがすごい

ただしこれらは、結果として表にこのように見えてるだけで、評価の高い人は、技術者としての意識、思考、姿勢がそもそも異なると考えています。なので、こういったことを表面だけ真似しようとしても、決して高い評価が与えられることはないです。

また、今回通過した人の中では、インフラエンジニアは○○さん一人という、インフラの人にとっては厳しい結果になっています。これは、インフラの人も開発力を持つべき、という考えに基づいています。（OSより上はすべてソフトウェアであるし、ソフトウェアに関する技術力＝開発力、と考えているので。特にOSSな世界では。）その辺りについての宮下の考えは、[Software Design 2009年4月号](http://gihyo.jp/magazine/SD/archive/2009/200904) に詳しく書いていて、記事の内容を以下に転載しましたので、読んでみてください。（[サーバ／インフラエンジニア養成読本](http://gihyo.jp/book/2011/978-4-7741-4600-3) にもこの記事の内容が収録されています。）

（これも社内サーバのURLなので省略）

（記事が古く、この頃はインフラエンジニアという言葉はなく、サーバエンジニアという言葉を使っています。）

ただし、ネットワークやハードウェアで優れた技術力があるのであれば、開発力はなくても技術者としては高い評価を与えます。（うちの業務形態的には、ネットワークやハードウェアの技術が優れていても、仕事に活かしにくい、といった面はありますが。）

また、技術者のあるべき姿としては、[こちら](http://heikou-konton.blogspot.com/2001/03/blog-post.html
)も参考にしています。


それから、今回通過した人達にもまだまだ足りない面はあるのですが、それはOSSに対する貢献です。OSSを仕事でバリバリ使っているのであれば、ソースは読んで当たり前だし、不具合があったら直して、開発元にパッチを送る、ということは当たり前の行為です。むしろ、こういったことをやらないのがおかしいぐらいです。一度もこういったことをしたことがない、考えたこともない、という技術者は考えを改めるべきですし、今までしたことがある人は、更に意識してやるようにしてください。自分も意識して積極的にやるようにします。

ここを最後に強く強調してるのは、自分が技術者として成長してきた一番の根幹は、OSS との関わりにあるからだと思っているからです。blosxom のプラグインを書いて公開したり、CPAN Authors にパッチを送ったり、Plagger のコミッタにしてもらったり、CPAN Author になったり、自分が書いたコードを積極的に公開したり、GitHub で Pull Requests を送ってみたり、YAPC などの技術系カンファレンスでプレゼンしたり、と、こういった活動の中で、外部の素晴らしい技術者達とのつながりもでき、数多くのものを得てきました。

説明会でも話した「技術者や技術はオープンであるべき」という考えは、このような経験が元になっています。ありきたりな言葉ですが、「ギブ＆テイク」の通り、オープンにすることによって得られるものは非常に多く、また、技術者にとっては何事にも代え難い財産になります。こういった経験を、ペパボの技術者のみなさんにもぜひ味わってもらいたいです。

----

[ペパボ](http://www.paperboy.co.jp/) という会社では、こんな感じで技術者向けの評価制度がスタートしました。

こんなペパボは、東京、京都、福岡で [様々な職種で人材募集中です](https://js01.jposting.net/paperboy/u/recruit/job.phtml)。
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[paperboy is hiring]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-17T20:56:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
今まで[ペパボ](http://www.paperboy.co.jp/)の人事評価制度では、管理職のキャリアプランしか想定されていかったのですが、今年から導入された制度では、管理職とは別に、技術職用の等級が設けられ、能力に応じて待遇が向上する仕組みが導入されました。

具体的には、シニア、アドバンスド・シニア、という2つの役職が設けられ、以下のような待遇となっています。

 * シニアは年俸500万円〜。フレックスタイム。
 * アドバンスド・シニアは年俸600万円〜。裁量労働。

実運用に入るのはまだこれからなのですが、今までペパボでは技術者がステップアップしていく道がなかったので、これはペパボの技術者にとって、とても大きな一歩です。

で、本題。

新しい技術者の評価制度をベースに、今までペパボにはなかったポジションの技術者を、[東京](https://js01.jposting.net/paperboy/u/recruit/job.phtml?job_code=23)と[福岡](https://js01.jposting.net/paperboy/u/recruit/job.phtml?job_code=24)、両方で募集しています。

「技術基盤整備エンジニア」という言葉でピンと来る方もいるかと思いますが、[クックパッド](http://cookpad.com/) さんの開発基盤グループが、役割として近いと思い、名前を拝借させていただきました。

職務内容としては、

 * ペパボ全サービスに関わる技術基盤の整備
   * 新しい方法論や技術の導入
   * 開発手法の整備
   * 大規模なリファクタリング、リプレース
   * モニタリング、キャパシティプランニングの強化
   * データ解析/ログ解析
   * セキュリティ関連

と書かれていますが、これだけに留まらず、これは絶対にやるべき、という技術的課題があれば、どんどんお任せしたいと考えています。

待遇は新評価制度の元での、アドバンスド・シニア待遇となります。（年俸600万円はあくまでも最低ラインなので、応相談です。）

また、自分が就いてる役職はテクニカル・マネージャーなのですが、この役職は人数制限があるわけではないので、場合によってはテクニカル・マネージャー待遇も検討させて頂きます。（特に福岡の場合。）

興味のある方、もっと具体的な話が聞いてみたい、という方は、[twitter](http://twitter.com/gosukenator) や [facebook](http://www.facebook.com/gosukenator) などで、お気軽にお声掛けください。

他にも、東京、京都、福岡で[様々な職種で人材募集中です](https://js01.jposting.net/paperboy/u/recruit/job.phtml)。
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[coderwall badges on the sidebar]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-13T02:22:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've hacked Octopress quickly for displaying [coderwall](http://coderwall.com/) badges on the sidebar.

<img src="/images/2012/01/sidebar.png">

This is the [changeset](https://github.com/mizzy/octopress/commit/d564e8d468c29e9ef51858a40ab2f414b94540e7) for this hack.

]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Webiblo - web to ebook project]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-10T20:17:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've started the project [webiblo](https://github.com/mizzy/webiblo).This is the improved fork of [web-to-mobi](https://github.com/mizzy/web-to-mobi).

This project includes the script to convert web sites into  ebook format(currently mobipocket only) data from given JSON data and gathering the JSON data for web sites.

Currently, you can generate mobipocket format data with the URI of JSON data like this:

    $ webiblo.pl http://mizzy.org/webiblo/data/Getting_Real.json

Or with JSON data through STDIN.

    $ cat data.json | webiblo.pl

This script needs [KindleGen](http://www.amazon.com/gp/feature.html?docId=1000234621).

JSON data is like this:

    {
        "title"       : "Structure and Interpretation of Computer Programs",
        "authors"     : [
            "Harold Abelson",
            "Gerald Jay Sussman",
            "Julie Sussman"
        ],
        "cover_image"   : "http://mitpress.mit.edu/sicp/full-text/book/cover.jpg",
        "content_xpath" : "//div[@class=\"content\"]", # Optional
        "exclude_xpath" : "//div[@class=\"navigation\"]", # Optional
        "chapters" : [
            {
                "title" : "Foreword",
                "uri"   : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-5.html#%_chap_Temp_2"
            },
            {
                "title" : "1  Building Abstractions with Procedures",
                "uri"  : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%_chap_1",
                "sections" : [
                    "title" : "1.1  The Elements of Programming",
                    "uri"   : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1"
                    "subsections" : [
                        {
                            "title" : "1.1.1  Expressions",
                            "uri"   : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.1"
                        },
                    ]
                ]
            }
        ]
    }

Overview of the JSON data is following:

 * Book data
   * Title
   * Authors
   * Cover Image
   * XPath that represents the content part (Optional)
   * XPath that represents the uneeded part of the content (Optional)
   * Chapters
     * Title of the chapter
     * URI of the chapter page
     * Sections
       * Title of the secion
       * URI of the section page
       * Subsections
         * Title of the subsection
         * URI of the subsection page

There are two JSON data for [Getting Real](http://gettingreal.37signals.com/toc.php)  and [SICP](http://mitpress.mit.edu/sicp/full-text/book/book.html) on [my web site(http://mizzy.org/webiblo/) .

JSON data are put on the [gh-pages branch](https://github.com/mizzy/webiblo/tree/gh-pages).Pull requests are welcome.
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Webiblo - web to ebook project]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-10T19:02:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
久々に日本語で書きます。（後で英語でも書く。）

[Web-to-mobi](/blog/2012/01/09/web-to-mobi-a-script-for-converting-web-sites-to-mobipocket-format/) を焼き直して、[Webiblo](https://github.com/mizzy/webiblo) というプロジェクトを立ち上げてみました。

基本的には GitHub の README に書いてある通りなんですが、ウェブサイトについて記述された JSON を喰わせることによって、Kindle で読める mobipocket フォーマットの電子書籍データを作ろう、また、様々なサイト対応の JSON データを集めたい、というのがこのプロジェクトの趣旨です。

現在は、

    $ webiblo.pl http://mizzy.org/webiblo/data/Getting_Real.json

といった感じで、JSON が記述された URL を指定するか、

    $ cat data.json | webiblo.pl

といった形で JSON を標準入力から渡してやれば、与えられたデータにしたがって、mobipocket 形式のデータを生成します。（[KindleGen](http://www.amazon.com/gp/feature.html?docId=1000234621) が必要です。）

JSON データは以下のようになっています。

    {
        "title"       : "Structure and Interpretation of Computer Programs",
        "authors"     : [
            "Harold Abelson",
            "Gerald Jay Sussman",
            "Julie Sussman"
        ],
        "cover_image"   : "http://mitpress.mit.edu/sicp/full-text/book/cover.jpg",
        "content_xpath" : "//div[@class=\"content\"]", # Optional
        "exclude_xpath" : "//div[@class=\"navigation\"]", # Optional
        "chapters" : [
            {
                "title" : "Foreword",
                "uri"   : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-5.html#%_chap_Temp_2"
            },
            {
                "title" : "1  Building Abstractions with Procedures",
                "uri"  : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%_chap_1",
                "sections" : [
                    "title" : "1.1  The Elements of Programming",
                    "uri"   : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1"
                    "subsections" : [
                        {
                            "title" : "1.1.1  Expressions",
                            "uri"   : "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.1"
                        },
                    ]
                ]
            }
        ]
    }

ざっくり構造としては、以下のようになっています。

 * 書籍データ
   * 本のタイトル
   * 著者
   * 表紙画像
   * コンテンツとして抜き出す部分の XPath（オプショナル）
   * コンテンツから除外したい部分の XPath（オプショナル）
   * 章
     * 章タイトル
     * 章ページの URI
     * セクション
       * セクションタイトル
       * セクションページの URI
       * サブセクション
         * サブセクションタイトル
         * サブセクションページの URI


JSON データは現在のところ、[Getting Real](http://gettingreal.37signals.com/toc.php) 用のものと [SICP](http://mitpress.mit.edu/sicp/full-text/book/book.html) 用のものを [こちら](http://mizzy.org/webiblo/) で公開しています。

JSON データは GitHub リポジトリの gh-pages ブランチに置いてあるので、独自の JSON データを作成した方は pull request 送ってもらえるとうれしいです。

webiblo で生成したデータを Kindle Previewer で見ると、こういった感じになります。

<img src="/images/2012/01/sicp_cover.png" width="250" title="SICP Cover" >
<img src="/images/2012/01/sicp_toc.png" width="250" title="SICP TOC" >
<img src="/images/2012/01/sicp_content.png" width="250" title="SICP Content" >

元々は、単に Getting Real 英語版のデータを mobipocket 形式に変換したかっただけなんですが、Facebook での otsune さんのアドバイスにより、こういった形で、書籍固有のデータを分離する形でつくってみました。

また、[@hotchpotch](http://twitter.com/hotchpotch) さんから、[Autopagerize の SITEINFO を活用したアプローチ](http://subtech.g.hatena.ne.jp/motemen/20110915/1316088362) もあるよ、と教えて頂き、うおー、これはエレガントだ、と思ったんですが、こちらは目次ページを作成する機能がなさそうだったので、とりあえず当初の JSON を利用するというコンセプトのまま開発を進めました。

今後の TODO としては、以下のものを考えてます。

 * EPUB3 など、mobipocket 以外のフォーマット対応
 * CLI から JSON カタログを検索して、簡単にデータ生成できるようにする
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Web-to-mobi - A script for converting web sites to mobipocket format]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-09T03:46:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
I've written a script to convert [Getting Real](http://gettingreal.37signals.com/toc.php) into mobipocket format.

But the kindle edition of Getting Real is sold at amazon.com, publishing this script may be illegal.

So I've re-written this script like [this](https://github.com/mizzy/web-to-mobi) following the advice from [@otsune](https://twitter.com/#!/otsune)-san.

This script gets JSON data about a web site from STDIN and converts web data to mobipcoket format.

JSON data format is like this.

    {
         "title"    : "Getting Real",
         "author"   : "37signals",
         "chapters" : [
             {
                 "title"     : "Introduction",
                  "sections" : [
                      {
                          "title" : "What is Getting Real?",
                          "uri"   : "http://gettingreal.37signals.com/ch01_What_is_Getting_Real.php"
                      },
                      {
                          "title" : "About 37signals",
                          "uri"   : "http://gettingreal.37signals.com/ch01_About_37signals.php"
                      },
                  ]
            }
         ],
         "content_xpath" : "//div[@class=\"content\"]",
         "exclude_xpath" : "//div[@class=\"next\"]"
    }


This is the image of showing the converted file on Kindle Previewer.

<img src="/images/2012/01/getting_real.png" title="Getting Real on Kindle" >]
]]></content>
  </entry>


</feed>
