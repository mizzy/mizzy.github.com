<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2012-04-07T23:22:00+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[Stellar - A static site generator]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-04-07T23:22:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>自宅サーバが死んでから、緊急避難的に <a href="http://octopress.org/">Octopress</a> + GitHub Pages でブログを運用してたけど、Octopress 飽きたし、generate 時間が長いので、一から自分でつくった。</p>

<p><a href="https://github.com/mizzy/stellar">mizzy/stellar</a></p>

<p>まあでもそんな大したものじゃなくて、130行弱の Ruby スクリプトが本体。</p>

<p><a href="https://github.com/mizzy/stellar-site">mizzy/stellar-site</a> のような形で、テンプレやら CSS ファイルやら JavaScript ファイルやら ポスト用 Markdown データやらを用意して、stellar を実行すると、今あなたが見ているこのブログのような形でデータを生成してくれる。</p>

<p>特徴らしきものをあげれば、</p>

<ul>
<li>Jekyll/Octopress で利用していたポスト用 Markdown データがそのまま使える</li>
<li>Jekyll/Octopress で利用していたプラグインがそのまま使える</li>
<li>個別エントリページしか生成しない</li>
</ul>

<p>といったあたり。特に、静的タイプのブログシステムの場合、ひとつファイルを追加するだけで、すべてのページ（複数のエントリを含むページ）を更新しないといけない、というのが、再生成に時間がかかる原因なので、そういったページはなくした。別にそういったものがなくても、Autopagerize で自動的に個別エントリを読みこんでいければ十分。</p>

<p>これで、自分の環境では Octopress で50秒かかっていた再生成時間が、3秒まで短縮できた。</p>

<p>とりあえず自分しか使わない前提でつくったので、色々ハードコートされてたり、使い方とかまとめてないけど、興味のある方がいれば、Pull Request なり Issue 登録なりお気軽にどうぞ。</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[puppet-report-ikachan]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-31T22:31:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>I&#39;ve made a puppet module <a href="https://github.com/mizzy/puppet-report-ikachan">puppet-report-ikachan</a> to send reports to <a href="https://github.com/yappo/p5-App-Ikachan">Ikachan</a> and uploaded this module to <a href="https://forge.puppetlabs.com/users/mizzy/modules/report_ikachan">Puppet Forge</a></p>

<p>This is the screenshot of showing reports sent by this module on Limechat.</p>

<p><img src="/images/2012/03/ikachan.png"></p>

<p>This module is very primitive, so please give me feedbak on <a href="https://github.com/mizzy/puppet-report-ikachan">GitHub</a>.</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Image with EXIF tag plugin]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-07T23:38:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>I&#39;ve modified <a href="https://github.com/imathis/octopress/blob/master/plugins/image_tag.rb">Image tag plugin</a> into <a href="https://github.com/mizzy/jekyll-plugins/blob/master/image_with_exif_tag.rb">Image with EXIF tag plugin</a> based on <a href="/blog/2012/03/07/exif-tag-plugin">the idea of mattn-san&#39;s comment</a>. (Thanks, mattn-san!)</p>

<p>If you write text like this:</p>

<pre><code>{% img_with_exif /images/2012/03/first_shot_orion.jpg %}
</code></pre>

<p>You will see the converted result like this:</p>

<p><img src="/images/2012/03/first_shot_orion.jpg" alt="Focal Length 10.0 mm F5.6 NIKON D5000 ISO 1600 Exposure Time 15 second 2010-11-05 01:32:07 +0900" title="Focal Length 10.0 mm F5.6 NIKON D5000 ISO 1600 Exposure Time 15 second 2010-11-05 01:32:07 +0900"></p>

<p>The title and alt attribute have EXIF data of thie image file.</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[EXIF tag plugin]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-07T00:19:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>I&#39;ve wrote <a href="https://github.com/mizzy/jekyll-plugins/blob/master/exif_tag.rb">EXIF tag plugin for Jekyll</a>.</p>

<p>If you write text like this:</p>

<pre><code>{% img /images/2012/03/first_shot_orion.jpg %}

{% exif /images/2012/03/first_shot_orion.jpg %}
</code></pre>

<p>You will see the converted result like this:</p>

<p><img src="/images/2012/03/first_shot_orion.jpg"></p>

<p>焦点距離 10 mm F5.6 NIKON D5000 ISO 1600 15 秒露光 2010-11-05 01:32:07 +0900</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Rakuten tag plugin for Jekyll]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-03-04T22:37:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>I&#39;ve wrote <a href="https://github.com/mizzy/jekyll-plugins/blob/master/rakuten_tag.rb">Rakuten tag plugin for Jekyll</a>.</p>

<p>This is inspired by <a href="http://zanshin.net/2011/08/24/amazon-plugin-for-octopress/">Amazon Plugin for Octopress</a>.</p>

<p>You can use this plugin like this.</p>

<pre><code>{{ &quot;nikondirect:10000349&quot; | rakuten_large_image }}
</code></pre>

<p><a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F"><img src="http://thumbnail.image.rakuten.co.jp:80/@0_gold/nikondirect/product/img/psp00367_01.jpg" /></a></p>

<pre><code>{{ &quot;nikondirect:10000349&quot; | rakuten_medium_image }}
</code></pre>

<p><a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F"><img src="http://thumbnail.image.rakuten.co.jp/@0_gold/nikondirect/product/img/psp00367_01.jpg?_ex=128x128" /></a></p>

<pre><code>{{ &quot;nikondirect:10000349&quot; | rakuten_small_image }}
</code></pre>

<p><a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F"><img src="http://thumbnail.image.rakuten.co.jp/@0_gold/nikondirect/product/img/psp00367_01.jpg?_ex=64x64" /></a></p>

<pre><code>{{ &quot;nikondirect:10000349&quot; | rakuten_link }}
</code></pre>

<p><a href="http://hb.afl.rakuten.co.jp/hgc/0f462063.619bb4f5.0f462064.c443d41a/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fnikondirect%2Fpsp00367%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fnikondirect%2Fi%2F10000349%2F">ニッコールタンブラー 24-70</a></p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Paperboy's engineer evaluation system]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-02-29T21:54:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>今年から新たに<a href="http://www.paperboy.co.jp/">ペパボ</a>で導入された、技術者向けの評価制度については、<a href="/blog/2012/01/17/paperboy-is-hiring/">こちらのエントリ</a> で書いたのですが、本日、その一次評価が完了しました。</p>

<p>評価のプロセスは、一次はテクニカル・マネージャーによる評価、二次は経営会議メンバーによる評価、と二段階の評価となっています。</p>

<p>自分が担当した一次評価の詳細は、以下のようになっています。</p>

<ol>
<li>シニア、またはアドバンスドシニアに上がりたい人には、自ら立候補してもらう。</li>
<li>立候補する人は、定められたフォーマットにしたがって、自分がそのポジションにふさわしいと思う理由や実績について Markdown で書き、指定した Git リポジトリに push する。（「定められたフォーマット」と言っても、最初に名前、次に希望のポジションを書いてもらうだけで、それ以外は自由。）</li>
<li>文書提出後、一人一人と面談を行う。</li>
<li>文書の内容と面談の結果にもとづいて、各人が提出した文書の末尾に、結果（通過 or 不通過）、評価ポイント、今後期待すること、を評価者が追記し、git push する。</li>
</ol>

<p>Git リポジトリは社内で誰でも参照できるし、Markdown で書かれた文書は、HTML 変換＆index.html を生成し、社内の誰もが見えるところに置いてありますので、評価の過程が、面談以外はすべてオープン、という形をとっています。</p>

<p>今回、この制度が導入されて初めての一次評価ということもあって、総評を社内 SNS に書いてみたのですが、せっかくなのでその内容をこちらで公開したいと思います。</p>

<p>多少文言を直したり、完全に社内向けな部分は改変してますが、内容はほとんどこのまんまです。</p>

<hr>

<p>ペパボで初めて導入された技術者評価制度ということもあり、また、他社の人と話していても、技術者の評価については、一定の明確な基準を設けることが難しい、ということで、基準についてはとても悩みました。</p>

<p>悩みましたが、まず今回は初めてということもあり、厳し目に評価しています。（最初に緩くして後で厳しくするよりは、最初に厳しくして、後で緩めるほうがいいだろう、ということで。）</p>

<p>今回評価にあたっては、以下の3つに重点を置いてます。</p>

<ol>
<li>プロフェッショナル領域であるからには、純粋に技術だけで評価する。</li>
<li>シニアと呼ぶからには、他の人にはない、技術的に優れた何かを持っている。</li>
<li>アウトプットしている。</li>
</ol>

<p>特に1についてですが、サービス運営のためには、必ずしも高い技術力は必要ないわけで、技術以外の面で多大な貢献をしてきている技術者も多くいると思います。ですが、そういった部分の評価は、各部署で行うべきであって、宮下が評価すべきではないと判断し、敢えて技術だけで評価することにしました。</p>

<p>また、2や3は、両方ともきちんと満たしていなければいけないか、というとそういうわけではなく、どちらか一方が圧倒的に優れている場合には、もう一方はあまり重視していません。（とは言え、両方満たしてるのが望ましいですが。）</p>

<p>ただし、アウトプットがないと評価のしようもないので、最低限のアウトプットはやはり必要です。</p>

<p>この様な観点に基づいた各人に対する評価については、完全にオープンにしてますので、こちらで確認できます。</p>

<p>（社内サーバのURLなので省略）</p>

<p>評価全体を見渡してみると、評価の高い人には、以下の傾向が見られます。（一人がすべてを満たしている、というわけではないです。）</p>

<ul>
<li>開発手法、開発フローに対するきちんとした理解と実践</li>
<li>開発もインフラもできるオールラウンドな能力</li>
<li>常に新しい技術情報を追いかけ、それを仕事にも取り込み活かしている</li>
<li>現状これでやれてるから、とそこに留まらずに常に改善していこうとしている</li>
<li>一部の技術ではずば抜けていて、社内で他にできる人が少ない、あるいはいない</li>
<li>いかに自動化して楽をするか、ということを常に考え実践している</li>
<li>アウトプットがすごい</li>
</ul>

<p>ただしこれらは、結果として表にこのように見えてるだけで、評価の高い人は、技術者としての意識、思考、姿勢がそもそも異なると考えています。なので、こういったことを表面だけ真似しようとしても、決して高い評価が与えられることはないです。</p>

<p>また、今回通過した人の中では、インフラエンジニアは○○さん一人という、インフラの人にとっては厳しい結果になっています。これは、インフラの人も開発力を持つべき、という考えに基づいています。（OSより上はすべてソフトウェアであるし、ソフトウェアに関する技術力＝開発力、と考えているので。特にOSSな世界では。）その辺りについての宮下の考えは、<a href="http://gihyo.jp/magazine/SD/archive/2009/200904">Software Design 2009年4月号</a> に詳しく書いていて、記事の内容を以下に転載しましたので、読んでみてください。（<a href="http://gihyo.jp/book/2011/978-4-7741-4600-3">サーバ／インフラエンジニア養成読本</a> にもこの記事の内容が収録されています。）</p>

<p>（これも社内サーバのURLなので省略）</p>

<p>（記事が古く、この頃はインフラエンジニアという言葉はなく、サーバエンジニアという言葉を使っています。）</p>

<p>ただし、ネットワークやハードウェアで優れた技術力があるのであれば、開発力はなくても技術者としては高い評価を与えます。（うちの業務形態的には、ネットワークやハードウェアの技術が優れていても、仕事に活かしにくい、といった面はありますが。）</p>

<p>また、技術者のあるべき姿としては、<a href="http://heikou-konton.blogspot.com/2001/03/blog-post.html">こちら</a>も参考にしています。</p>

<p>それから、今回通過した人達にもまだまだ足りない面はあるのですが、それはOSSに対する貢献です。OSSを仕事でバリバリ使っているのであれば、ソースは読んで当たり前だし、不具合があったら直して、開発元にパッチを送る、ということは当たり前の行為です。むしろ、こういったことをやらないのがおかしいぐらいです。一度もこういったことをしたことがない、考えたこともない、という技術者は考えを改めるべきですし、今までしたことがある人は、更に意識してやるようにしてください。自分も意識して積極的にやるようにします。</p>

<p>ここを最後に強く強調してるのは、自分が技術者として成長してきた一番の根幹は、OSS との関わりにあるからだと思っているからです。blosxom のプラグインを書いて公開したり、CPAN Authors にパッチを送ったり、Plagger のコミッタにしてもらったり、CPAN Author になったり、自分が書いたコードを積極的に公開したり、GitHub で Pull Requests を送ってみたり、YAPC などの技術系カンファレンスでプレゼンしたり、と、こういった活動の中で、外部の素晴らしい技術者達とのつながりもでき、数多くのものを得てきました。</p>

<p>説明会でも話した「技術者や技術はオープンであるべき」という考えは、このような経験が元になっています。ありきたりな言葉ですが、「ギブ＆テイク」の通り、オープンにすることによって得られるものは非常に多く、また、技術者にとっては何事にも代え難い財産になります。こういった経験を、ペパボの技術者のみなさんにもぜひ味わってもらいたいです。</p>

<hr>

<p><a href="http://www.paperboy.co.jp/">ペパボ</a> という会社では、こんな感じで技術者向けの評価制度がスタートしました。</p>

<p>こんなペパボは、東京、京都、福岡で <a href="https://js01.jposting.net/paperboy/u/recruit/job.phtml">様々な職種で人材募集中です</a>。</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[paperboy is hiring]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-17T20:56:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>今まで<a href="http://www.paperboy.co.jp/">ペパボ</a>の人事評価制度では、管理職のキャリアプランしか想定されていかったのですが、今年から導入された制度では、管理職とは別に、技術職用の等級が設けられ、能力に応じて待遇が向上する仕組みが導入されました。</p>

<p>具体的には、シニア、アドバンスド・シニア、という2つの役職が設けられ、以下のような待遇となっています。</p>

<ul>
<li>シニアは年俸500万円〜。フレックスタイム。</li>
<li>アドバンスド・シニアは年俸600万円〜。裁量労働。</li>
</ul>

<p>実運用に入るのはまだこれからなのですが、今までペパボでは技術者がステップアップしていく道がなかったので、これはペパボの技術者にとって、とても大きな一歩です。</p>

<p>で、本題。</p>

<p>新しい技術者の評価制度をベースに、今までペパボにはなかったポジションの技術者を、<a href="https://js01.jposting.net/paperboy/u/recruit/job.phtml?job_code=23">東京</a>と<a href="https://js01.jposting.net/paperboy/u/recruit/job.phtml?job_code=24">福岡</a>、両方で募集しています。</p>

<p>「技術基盤整備エンジニア」という言葉でピンと来る方もいるかと思いますが、<a href="http://cookpad.com/">クックパッド</a> さんの開発基盤グループが、役割として近いと思い、名前を拝借させていただきました。</p>

<p>職務内容としては、</p>

<ul>
<li>ペパボ全サービスに関わる技術基盤の整備

<ul>
<li>新しい方法論や技術の導入</li>
<li>開発手法の整備</li>
<li>大規模なリファクタリング、リプレース</li>
<li>モニタリング、キャパシティプランニングの強化</li>
<li>データ解析/ログ解析</li>
<li>セキュリティ関連</li>
</ul></li>
</ul>

<p>と書かれていますが、これだけに留まらず、これは絶対にやるべき、という技術的課題があれば、どんどんお任せしたいと考えています。</p>

<p>待遇は新評価制度の元での、アドバンスド・シニア待遇となります。（年俸600万円はあくまでも最低ラインなので、応相談です。）</p>

<p>また、自分が就いてる役職はテクニカル・マネージャーなのですが、この役職は人数制限があるわけではないので、場合によってはテクニカル・マネージャー待遇も検討させて頂きます。（特に福岡の場合。）</p>

<p>興味のある方、もっと具体的な話が聞いてみたい、という方は、<a href="http://twitter.com/gosukenator">twitter</a> や <a href="http://www.facebook.com/gosukenator">facebook</a> などで、お気軽にお声掛けください。</p>

<p>他にも、東京、京都、福岡で<a href="https://js01.jposting.net/paperboy/u/recruit/job.phtml">様々な職種で人材募集中です</a>。</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[coderwall badges on the sidebar]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-13T02:22:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>I&#39;ve hacked Octopress quickly for displaying <a href="http://coderwall.com/">coderwall</a> badges on the sidebar.</p>

<p><img src="/images/2012/01/sidebar.png"></p>

<p>This is the <a href="https://github.com/mizzy/octopress/commit/d564e8d468c29e9ef51858a40ab2f414b94540e7">changeset</a> for this hack.</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Webiblo - web to ebook project]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-10T20:17:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>I&#39;ve started the project <a href="https://github.com/mizzy/webiblo">webiblo</a>.This is the improved fork of <a href="https://github.com/mizzy/web-to-mobi">web-to-mobi</a>.</p>

<p>This project includes the script to convert web sites into  ebook format(currently mobipocket only) data from given JSON data and gathering the JSON data for web sites.</p>

<p>Currently, you can generate mobipocket format data with the URI of JSON data like this:</p>

<pre><code>$ webiblo.pl http://mizzy.org/webiblo/data/Getting_Real.json
</code></pre>

<p>Or with JSON data through STDIN.</p>

<pre><code>$ cat data.json | webiblo.pl
</code></pre>

<p>This script needs <a href="http://www.amazon.com/gp/feature.html?docId=1000234621">KindleGen</a>.</p>

<p>JSON data is like this:</p>

<pre><code>{
    &quot;title&quot;       : &quot;Structure and Interpretation of Computer Programs&quot;,
    &quot;authors&quot;     : [
        &quot;Harold Abelson&quot;,
        &quot;Gerald Jay Sussman&quot;,
        &quot;Julie Sussman&quot;
    ],
    &quot;cover_image&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/cover.jpg&quot;,
    &quot;content_xpath&quot; : &quot;//div[@class=\&quot;content\&quot;]&quot;, # Optional
    &quot;exclude_xpath&quot; : &quot;//div[@class=\&quot;navigation\&quot;]&quot;, # Optional
    &quot;chapters&quot; : [
        {
            &quot;title&quot; : &quot;Foreword&quot;,
            &quot;uri&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-5.html#%_chap_Temp_2&quot;
        },
        {
            &quot;title&quot; : &quot;1  Building Abstractions with Procedures&quot;,
            &quot;uri&quot;  : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%_chap_1&quot;,
            &quot;sections&quot; : [
                &quot;title&quot; : &quot;1.1  The Elements of Programming&quot;,
                &quot;uri&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1&quot;
                &quot;subsections&quot; : [
                    {
                        &quot;title&quot; : &quot;1.1.1  Expressions&quot;,
                        &quot;uri&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.1&quot;
                    },
                ]
            ]
        }
    ]
}
</code></pre>

<p>Overview of the JSON data is following:</p>

<ul>
<li>Book data

<ul>
<li>Title</li>
<li>Authors</li>
<li>Cover Image</li>
<li>XPath that represents the content part (Optional)</li>
<li>XPath that represents the uneeded part of the content (Optional)</li>
<li>Chapters

<ul>
<li>Title of the chapter</li>
<li>URI of the chapter page</li>
<li>Sections</li>
<li>Title of the secion</li>
<li>URI of the section page</li>
<li>Subsections

<ul>
<li>Title of the subsection</li>
<li>URI of the subsection page</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p>There are two JSON data for <a href="http://gettingreal.37signals.com/toc.php">Getting Real</a>  and <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a> on [my web site(<a href="http://mizzy.org/webiblo/">http://mizzy.org/webiblo/</a>) .</p>

<p>JSON data are put on the <a href="https://github.com/mizzy/webiblo/tree/gh-pages">gh-pages branch</a>.Pull requests are welcome.</p>
]
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Webiblo - web to ebook project]]></title>
    <link href="http://mizzy.org/"/>
    <updated>2012-01-10T19:02:00+09:00</updated>
    <id>http://mizzy.org/ </id>
    <content type="html"><![CDATA[
<p>久々に日本語で書きます。（後で英語でも書く。）</p>

<p><a href="/blog/2012/01/09/web-to-mobi-a-script-for-converting-web-sites-to-mobipocket-format/">Web-to-mobi</a> を焼き直して、<a href="https://github.com/mizzy/webiblo">Webiblo</a> というプロジェクトを立ち上げてみました。</p>

<p>基本的には GitHub の README に書いてある通りなんですが、ウェブサイトについて記述された JSON を喰わせることによって、Kindle で読める mobipocket フォーマットの電子書籍データを作ろう、また、様々なサイト対応の JSON データを集めたい、というのがこのプロジェクトの趣旨です。</p>

<p>現在は、</p>

<pre><code>$ webiblo.pl http://mizzy.org/webiblo/data/Getting_Real.json
</code></pre>

<p>といった感じで、JSON が記述された URL を指定するか、</p>

<pre><code>$ cat data.json | webiblo.pl
</code></pre>

<p>といった形で JSON を標準入力から渡してやれば、与えられたデータにしたがって、mobipocket 形式のデータを生成します。（<a href="http://www.amazon.com/gp/feature.html?docId=1000234621">KindleGen</a> が必要です。）</p>

<p>JSON データは以下のようになっています。</p>

<pre><code>{
    &quot;title&quot;       : &quot;Structure and Interpretation of Computer Programs&quot;,
    &quot;authors&quot;     : [
        &quot;Harold Abelson&quot;,
        &quot;Gerald Jay Sussman&quot;,
        &quot;Julie Sussman&quot;
    ],
    &quot;cover_image&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/cover.jpg&quot;,
    &quot;content_xpath&quot; : &quot;//div[@class=\&quot;content\&quot;]&quot;, # Optional
    &quot;exclude_xpath&quot; : &quot;//div[@class=\&quot;navigation\&quot;]&quot;, # Optional
    &quot;chapters&quot; : [
        {
            &quot;title&quot; : &quot;Foreword&quot;,
            &quot;uri&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-5.html#%_chap_Temp_2&quot;
        },
        {
            &quot;title&quot; : &quot;1  Building Abstractions with Procedures&quot;,
            &quot;uri&quot;  : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%_chap_1&quot;,
            &quot;sections&quot; : [
                &quot;title&quot; : &quot;1.1  The Elements of Programming&quot;,
                &quot;uri&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1&quot;
                &quot;subsections&quot; : [
                    {
                        &quot;title&quot; : &quot;1.1.1  Expressions&quot;,
                        &quot;uri&quot;   : &quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.1&quot;
                    },
                ]
            ]
        }
    ]
}
</code></pre>

<p>ざっくり構造としては、以下のようになっています。</p>

<ul>
<li>書籍データ

<ul>
<li>本のタイトル</li>
<li>著者</li>
<li>表紙画像</li>
<li>コンテンツとして抜き出す部分の XPath（オプショナル）</li>
<li>コンテンツから除外したい部分の XPath（オプショナル）</li>
<li>章

<ul>
<li>章タイトル</li>
<li>章ページの URI</li>
<li>セクション</li>
<li>セクションタイトル</li>
<li>セクションページの URI</li>
<li>サブセクション

<ul>
<li>サブセクションタイトル</li>
<li>サブセクションページの URI</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p>JSON データは現在のところ、<a href="http://gettingreal.37signals.com/toc.php">Getting Real</a> 用のものと <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a> 用のものを <a href="http://mizzy.org/webiblo/">こちら</a> で公開しています。</p>

<p>JSON データは GitHub リポジトリの gh-pages ブランチに置いてあるので、独自の JSON データを作成した方は pull request 送ってもらえるとうれしいです。</p>

<p>webiblo で生成したデータを Kindle Previewer で見ると、こういった感じになります。</p>

<p><img src="/images/2012/01/sicp_cover.png" width="250" title="SICP Cover" >
<img src="/images/2012/01/sicp_toc.png" width="250" title="SICP TOC" >
<img src="/images/2012/01/sicp_content.png" width="250" title="SICP Content" ></p>

<p>元々は、単に Getting Real 英語版のデータを mobipocket 形式に変換したかっただけなんですが、Facebook での otsune さんのアドバイスにより、こういった形で、書籍固有のデータを分離する形でつくってみました。</p>

<p>また、<a href="http://twitter.com/hotchpotch">@hotchpotch</a> さんから、<a href="http://subtech.g.hatena.ne.jp/motemen/20110915/1316088362">Autopagerize の SITEINFO を活用したアプローチ</a> もあるよ、と教えて頂き、うおー、これはエレガントだ、と思ったんですが、こちらは目次ページを作成する機能がなさそうだったので、とりあえず当初の JSON を利用するというコンセプトのまま開発を進めました。</p>

<p>今後の TODO としては、以下のものを考えてます。</p>

<ul>
<li>EPUB3 など、mobipocket 以外のフォーマット対応</li>
<li>CLI から JSON カタログを検索して、簡単にデータ生成できるようにする</li>
</ul>
]
]]></content>
  </entry>


</feed>
