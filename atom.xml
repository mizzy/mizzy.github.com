<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2014-01-31T23:15:41+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[octorelease という gem をつくった]]></title>
    <link href="http://mizzy.org/blog/2014/01/31/2/" />
    <updated>2014-01-31T23:15:41+09:00</updated>
    <id>http://mizzy.org/blog/2014/01/31/2/</id>
    <content type="html"><![CDATA[
<p>serverspec とか specinfra の <a href="http://serverspec.org/changes.html">Changes</a> を手で書くのがだるくなってきたので、自動化するために <a href="https://github.com/mizzy/octorelease">octorelease</a> という gem をつくりました。</p>

<p>rubygems.org にもあげてあるので、gem install で入ります。</p>

<p>Rakefile の中に</p>

<pre><code class="ruby">require &quot;bundler/gem_tasks&quot;
require &quot;octorelease&quot;
</code></pre>

<p>みたいに書いて、</p>

<pre><code>$ rake octorelease
</code></pre>

<p>すると、 こんな感じになります。</p>

<p><img src="/images/2014/01/rake-octorelease.png"></p>

<p>何をしてるかというと、<code>rake release</code> した後に、前のバージョンとリリースするバージョンの間に含まれるプルリクエストを<code>git log</code>で拾って、各プルリクエストに <code>Released as vX.X.X.</code> とコメントをつけ、GitHub 上にリリースを作成し、リリースの本文にはプルリクエストへリンクを張る、ってなことをやってます。</p>

<p>プルリクへのコメントはこんな感じでつきます。</p>

<p><img src="/images/2014/01/octorelease-comment.png"></p>

<p>これは、プルリクしてくれた人に対して、リリースしたよ、ということを知らせるために、以前から手動でコメントしてたんですが、ルーチンワークなので自動でやるようしました。</p>

<p>リリースはこんな感じで作られます。</p>

<p><img src="/images/2014/01/octorelease-releases.png"></p>

<p>同僚の <a href="https://github.com/linyows">linyows</a> 作の <a href="https://github.com/linyows/capistrano-github-releases">capistrano-github-releases</a> インスパイアです。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec が Open Source Rookies of the Year 2013 に選ばれた]]></title>
    <link href="http://mizzy.org/blog/2014/01/31/1/" />
    <updated>2014-01-31T22:57:06+09:00</updated>
    <id>http://mizzy.org/blog/2014/01/31/1/</id>
    <content type="html"><![CDATA[
<p>拙作の serverspec が <a href="http://www.blackducksoftware.com/open-source-rookies">Open Source Rookies of the Year 2013</a> の 10 プロダクトのうちのひとつに選ばれました。</p>

<p>昨年末に、候補が20まで絞り込まれた段階で一度連絡があって、その後、今月中旬ぐらいに、選ばれたよ、おめでとう、という連絡が来ました。最初の連絡が来るまで、そもそもこの賞の存在を知らなかったので、どの程度影響力がある賞なのかはよくわかりませんが、Docker とか超有名どころと一緒に並んでるのは、嬉しいというよりもむしろ恐れ多いですね。</p>

<p><a href="http://sourceforge.jp/magazine/14/01/29/190000">SourceForge.JP Magazine の日本語記事では、タイトルにも serverspec を含めて</a> くれていてありがたいです。</p>

<p>それから、<a href="http://www.thoughtworks.com/radar/#/Techniques/710">Thought Works Technology Radar January 2014</a> にも serverspec の文字が見えていて、すごいなー、これ本当に俺がつくったのかなー、とか思ったりしてます。</p>

<p>serverspec で一財産築いて寿司を食べに行きたい。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[2013年の振り返り]]></title>
    <link href="http://mizzy.org/blog/2013/12/31/1/" />
    <updated>2013-12-31T01:45:45+09:00</updated>
    <id>http://mizzy.org/blog/2013/12/31/1/</id>
    <content type="html"><![CDATA[
<p>2012年はターニングポイント的な年だったし、自分自身注目を浴びることも多く、エンジニアとしてピークで後は落ちていくだけなんじゃないかと思ったので、珍しく<a href="http://mizzy.org/blog/2012/12/31/1/">振り返りエントリ</a> を書いてみたわけですが、どうやらピークは今年だったようなので、また振り返りエントリを書いてみます。</p>

<hr>

<h2>3分で常松</h2>

<p>2013年に自分が生み出した最大の成果がこの言葉ですね。残念ながら流行語大賞にはノミネートすらされませんでしたが、一部ではとても高い評価を頂いているようです。</p>

<p>この言葉が生まれたのは2013/2/20でした。</p>

<blockquote class="twitter-tweet" lang="en"><p>3分で常松</p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/statuses/304232126373588994">February 20, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>言葉の由来は、一度飲み会で限られた人に話した以外は、長らくベールにつつまれたままだったのですが、先日ついに公表しました。</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/search?q=%233%E5%88%86%E3%81%A7%E5%B8%B8%E6%9D%BE&amp;src=hash">#3分で常松</a> の由来は、mirakuiさんの「3分でイナフ」と「俺の常松フォルダが火を噴くぜ」の合わせ技です。</p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/statuses/416370050648395776">December 27, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>上記ツイートにあるように、<a href="twitter.com/mirakui">@mirakui</a> さんの以下の2つが元ネタとなっています。</p>

<ul>
<li><a href="https://speakerdeck.com/mirakui/quan-zi-dong-parametatiyuningusan?slide=19">3分でイナフ</a></li>
<li><a href="http://diary.mirakui.com/post/43078265670">俺の常松フォルダが火を噴くぜ</a></li>
</ul>

<p>上述の飲み会で話した場には mirakui さんもいらっしゃったのですが、お気づきではなかったようで、「えー、そうだったんですか！？」という反応でした。</p>

<p>以下、由来公表に対するみなさんからの反応です。</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/search?q=%233%E5%88%86%E3%81%A7%E5%B8%B8%E6%9D%BE&amp;src=hash">#3分で常松</a> の説明を見ても謎が謎を呼ぶだけだった。さすがserverspecより上をいくだけあって敷居が高いぜ…!</p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/statuses/416376341152272384">December 27, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p>「3分でイナフ」と「俺の常松フォルダが火を噴くぜ」の組合せで <a href="https://twitter.com/search?q=%233%E5%88%86%E3%81%A7%E5%B8%B8%E6%9D%BE&amp;src=hash">#3分で常松</a> が出現したという由来、何度見返してもわからないし、まだ何か謎が隠されてるか、もしくは超次元の問題っぽい</p>&mdash; Wataru MIYAGUNI (@gongoZ) <a href="https://twitter.com/gongoZ/statuses/416376829490896897">December 27, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/search?q=%233%E5%88%86%E3%81%A7%E5%B8%B8%E6%9D%BE&amp;src=hash">#3分で常松</a> の由来やっと把握したけど、把握したように思えてやっぱり良くわからなかった</p>&mdash; そのっつ (SEO Naotoshi) (@sonots) <a href="https://twitter.com/sonots/statuses/416395793499582464">December 27, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2>serverspec</h2>

<p>3分で常松に次ぐ成果がこれですね。これについては色んなところで話したので省略。どうせもうみんな飽きてるでしょ？</p>

<hr>

<h2>登壇イベント</h2>

<p>最近はお声がけ頂いたイベントには出るけど、自分から名乗りを上げる、ということはほとんどしてなくて、それでもこれだけの数のイベントでお話をさせて頂けて、本当にありがたいです。（「第2回 コンテナ型仮想化の情報交換会＠東京」だけは、<a href="https://twitter.com/ten_forward">@ten_forward</a> さんと <a href="https://twitter.com/matsumotory">@matsumotory</a> さんにお会いしたかったので、自分から名乗りを上げて登壇しました。）</p>

<ul>
<li><a href="http://atnd.org/event/201301qpstudy">qpstudy 2013.01 DevOpsをぶち壊せ〜DevOps言うな〜</a>

<ul>
<li><a href="http://www.slideshare.net/mizzy/dev-ops-qpstudy">DevOps とは何か 何であるべきか</a></li>
</ul></li>
<li><a href="http://techtalk2.labs.gree.jp/">GREE Teck Talk#02 GitHub:E Casual Talk</a>

<ul>
<li>ペパボでの GitHub の使い方について発表</li>
</ul></li>
<li><a href="http://www.slideshare.net/mizzy/maglica-techkayac">カヤック社内勉強会で Maglica についてプレゼン</a></li>
<li><a href="http://heartbeats.jp/hbstudy/2013/06/hbstudy45.html">hbstudy#45 serverspecが拓いたサーバテストの世界</a>

<ul>
<li><a href="http://www.slideshare.net/mizzy/serverspec-hbstudy45">発表資料</a></li>
</ul></li>
<li><a href="http://www.techfesta.jp/">July Tech Festa 2013</a>

<ul>
<li><a href="http://www.techfesta.jp/p/program-2.html#A30">serverspec: Chef/Puppetと一緒に使うサーバテストのためのテスティングフレームワーク</a></li>
<li><a href="http://www.slideshare.net/mizzy/serverspec-jtf2013">発表資料</a></li>
</ul></li>
<li><a href="http://atnd.org/events/40914">Testing Casual Talks #1</a>

<ul>
<li>serverspecによるテスト駆動サーバ構築＋CI</li>
<li>デモが中心なので発表資料なし</li>
</ul></li>
<li><a href="http://atnd.org/events/40915">第2回 コンテナ型仮想化の情報交換会＠東京</a>

<ul>
<li><a href="https://speakerdeck.com/mizzy/sqaledecgroupsnifork-bombdui-ce-woru-retahua-at-di-2hui-kontenaxing-jia-xiang-hua-falseqing-bao-jiao-huan-hui-dong-jing">Sqaleでcgroupsにfork bomb対策を入れた話</a></li>
</ul></li>
<li><a href="http://atnd.org/event/E0021065">WEBエンジニア・クリエイターのための「第5弾　週末ランサーズ」～クラウド環境構築最速選手権～</a>

<ul>
<li><a href="https://speakerdeck.com/mizzy/future-of-server-provisioning">サーバプロビジョニングのこれまでとこれから</a></li>
</ul></li>
<li><a href="http://kiban.doorkeeper.jp/events/6799">秋のエンジニアぶつかり稽古 2013</a>

<ul>
<li>「俺の本気を見せるプレゼンタイム」で大学生活についてのプレゼン。</li>
</ul></li>
</ul>

<p>来年も既に登壇イベントが2つほど決まっております。</p>

<hr>

<h2>Immutable Infrastructure</h2>

<p>インフラ系界隈での今年一番のトピックがこれですね。<a href="http://mizzy.org/blog/2013/10/29/1/">インフラ系技術の流れ</a> というエントリで、このトピックの日本での盛り上がりに微力ながら貢献させて頂きました。</p>

<p>この流れで <a href="http://mizzy.org/blog/2013/11/25/1/">configspec というツール</a> をつくってみたのですが、「Immutable Infrastcuture 用」と謳ってるのは半分煽りだし、そもそも RSpec で副作用のある何かをやる、というのは、<a href="http://twitter.com/r7kamura">@r7kamura</a> 氏の RSpec アートにインスパイアされたハイコンテキストなネタのつもりだったのですが、割とまじめに受け止められている方も多いようで、せっかくなので開発を続けてみようと思います。</p>

<p>ただし、コアな部分は <a href="https://github.com/serverspec/specinfra">SpecInfra</a> という別 gem に切り出したので、こちらの開発が今後メインになりそうです。</p>

<hr>

<h2>Rebuild にゲスト出演</h2>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/gosukenator">@gosukenator</a> あした11時から、どうすか cc <a href="https://twitter.com/naoya_ito">@naoya_ito</a></p>&mdash; Tatsuhiko Miyagawa (@miyagawa) <a href="https://twitter.com/miyagawa/statuses/347948235471613952">June 21, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>こんな感じのノリで、<a href="http://rebuild.fm/14/">Rebuild: 14: DevOps with Docker, chef and serverspec (naoya, mizzy)</a> に呼んでいただきました。Docker まだ触ってもないのに、Docker をメインとした回に呼ばれてしまって、少しでも触っとこうと思ったのですが、結局触らないまま収録当日を迎えました。</p>

<p>また、上述の Immutable Infrastructure エントリ絡みで、<a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure (Naoya Ito, Gosuke Miyashita)</a> にも呼んで頂きました。</p>

<p>今最もWeb系エンジニアに影響力のあるポッドキャストにゲスト出演させてもらい、大変光栄です。</p>

<hr>

<h2>最も活発な GitHub ユーザーランキング</h2>

<p><a href="http://git.io/top">Most active GitHub users</a> に載りました。現在106位で、101位にはペパボ技術基盤チームメンバーである <a href="http://twitter.com/hsbt">@hsbt</a> さん、241位には同じくチームメンバーの <a href="http://twitter.com/kentaro">あんちぽ</a> さんが載っています。</p>

<p><img src="/images/2013/12/github-ranking.png" alt="Most active GitHub users"></p>

<p>アクティビティが多ければいいというわけではないんでしょうが、常日頃から社内では、OSS に貢献しろ、自分のコードをオープンにしろ、ってなことを僕ら3人は言っているので、このようなランキングに載るということは、それを自ら実践している証になり、これでまた社内で偉そうなことが言えます。</p>

<hr>

<h2>論文執筆をはじめました</h2>

<blockquote class="twitter-tweet" lang="en"><p>serverspecとか見てると普通に論文書けそうだなぁ。論文書いて国際会議通してジャーナル書くのも面白いね。</p>&mdash; MATSUMOTO, Ryosuke (@matsumotory) <a href="https://twitter.com/matsumotory/statuses/360036222053253121">July 24, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>という matsumotory さんのツイートがきっかけになって、それまで考えたこともなかった論文執筆について考えるようになり、matsumotory さんにお会いした時にも、この辺について聞いたりしてみたのですが、まだ先のことかなー、と考えていたら、<a href="http://iot.ipsj.or.jp/news/iot24-cfp">これ</a> に出してみませんか？と誘われたので、じゃあやってみます、って感じで、「serverspec: 宣言的記述でサーバの状態をテスト可能な汎用性の高いテストフレームワーク」というタイトルで論文書いて発表することになりました。</p>

<hr>

<h2>2014 年に向けて</h2>

<p>上記の論文発表が控えていますし、雑誌に載る原稿の執筆もはじめました。それから、ChefConf や Velocity なんかで serverspec の話をしたいなー、と思っているので、CFP 出してみるつもりです。</p>

<p>2012 年は注目されることが多かったけど、大学行ったとか、ペパボの技術者評価制度とか、ペパボでの GitHub の使い方とか、YAPC でクロージングキーノートつとめたとか、そういった自分の技術力とかプロダクトとは直接関係ない部分で注目されていて、それはそれでありがたいことだけど、エンジニアであるからには、技術力やプロダクトで評価されたい、と思っていたので、2013 年は serverspec を世に出したことで、それが達成できてよかったです。</p>

<p>また、論文執筆という、今まで考えたこともなかった道が開けたので、きっかけをつくってくださった matsumotory さんに感謝しつつ、新しい可能性を模索していけたらと思います。</p>

<p>もうすぐ39歳、40歳一歩手前だけど、エンジニアとしてまだまだやれそうだ。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[specinfra をベースとしたオレオレ Configuration Management Tool/オレオレ serverspec 構想]]></title>
    <link href="http://mizzy.org/blog/2013/12/04/1/" />
    <updated>2013-12-04T00:32:14+09:00</updated>
    <id>http://mizzy.org/blog/2013/12/04/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://mizzy.org/blog/2013/11/30/1/">specinfra</a> v0.0.6 では、<a href="https://github.com/serverspec/serverspec">serverspec</a>/<a href="https://github.com/serverspec/configspec">configspec</a>/<a href="https://github.com/serverspec/syllabus">Syllabus</a> で実行する具体的なコマンドを SpecInfra::Command::* に統合しました。</p>

<p>以前のバージョンまでは「OS を自動判別し、OS に適したコマンドクラスを返す commands と呼んでいるレイヤー」を specinfra で提供していましたが、コマンドクラスは各プロダクト側で実装していました。</p>

<p>specinfra v0.0.6 では、コマンドクラスも specinfra 側で持つようになりました。</p>

<p>これで何がうれしいのかというと、オレオレ Configuration Management Tool が簡単に実装できるようになる、ということです。</p>

<p>Exec/SSH といったバックエンド実行形式の切り替えや、OSを自動判別して適切なコマンドを実行する部分はすべて specinfra 側に任せられるので、CMT を新たに実装する人は、DSL 的な部分と、その DSL から呼び出すメソッドを定義するだけで良い、ということになります。（とはいえ、CMT で使えるコマンドは specinfra 側で出そろってないので、まだまだこれからではありますが。）</p>

<p>configspec では RSpec ベースな DSL、Syllabus では手続き的な DSL を採用していますが、これらが好みではない人は、自分の好きな DSL を持った CMT を容易に実装することができるようになります。</p>

<p>また、serverspec のコマンドも specinfra に統合されたので、オレオレ serverspec の実装も簡単にできるようになります。例えば、RSpec は好みじゃないから minitest ベースの serverspec を実装する、みたいなことが容易にできるはずです。</p>

<p>というわけで、みんなでオレオレ Configuration Management Tool/オレオレ serverspec をつくってみましょう。</p>

<p>（コマンドを specinfra に統合する、というアイデアは、あんちぽさんから頂きました。いつもありがとうございます。）</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[configspec/serverspec でシェルスクリプトを生成できるようにした]]></title>
    <link href="http://mizzy.org/blog/2013/12/01/2/" />
    <updated>2013-12-01T00:20:31+09:00</updated>
    <id>http://mizzy.org/blog/2013/12/01/2/</id>
    <content type="html"><![CDATA[
<p>specinfra で <a href="https://github.com/mizzy/specinfra/pull/1">ShellScript backend に対応</a> したので、configspec や serverspec で実行されるコマンドをシェルスクリプト形式でダンプできるようになった。</p>

<p>例えば configspec の場合</p>

<pre><code class="ruby">require &#39;configspec&#39;

include SpecInfra::Helper::ShellScript
include SpecInfra::Helper::RedHat
</code></pre>

<p>といった spec_helper.rb を用意して</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe package(&#39;httpd&#39;) do
  it { should be_installed }
end
</code></pre>

<p>といった内容の spec を書いて実行すると</p>

<pre><code class="sh">#!/bin/sh

yum -y install httpd
</code></pre>

<p>こんな内容の spec.sh というファイルを生成してくれる。</p>

<p>また、serverspec の場合</p>

<pre><code class="ruby">require &#39;serverspec&#39;

include SpecInfra::Helper::ShellScript
include SpecInfra::Helper::RedHat
</code></pre>

<p>といった spec_helper.rb を用意して</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe package(&#39;httpd&#39;) do
  it { should be_installed }
end

describe service(&#39;httpd&#39;) do
  it { should be_enabled   }
  it { should be_running   }
end

describe port(80) do
  it { should be_listening }
end

describe file(&#39;/etc/httpd/conf/httpd.conf&#39;) do
  it { should be_file }
  it { should contain &quot;ServerName users501&quot; }
end
</code></pre>

<p>という serverspec-init で生成されるサンプルの spec を実行すると</p>

<pre><code class="sh">#!/bin/sh

rpm -q httpd
chkconfig --list httpd | grep 3:on
service httpd status
netstat -tunl | grep -- :80\
test -f /etc/httpd/conf/httpd.conf
grep -q -- ServerName\ users501 /etc/httpd/conf/httpd.conf || grep -qF -- ServerName\ users501 /etc/httpd/conf/httpd.conf
</code></pre>

<p>こんな内容の spec.sh を吐き出してくれる。</p>

<p>さらに <code>include SpecInfra::Helper::RedHat</code> を <code>include SpecInfra::Helper::Solaris11</code> に変えると</p>

<pre><code class="sh">#!/bin/sh

pkg list -H httpd 2&gt; /dev/null
svcs -l httpd 2&gt; /dev/null | egrep &#39;^enabled *true$&#39;
svcs -l httpd status 2&gt; /dev/null | egrep &#39;^state *online$&#39;
netstat -an 2&gt; /dev/null | grep -- LISTEN | grep -- \\.80\
test -f /etc/httpd/conf/httpd.conf
grep -q -- ServerName\ users501 /etc/httpd/conf/httpd.conf || grep -qF -- ServerName\ users501 /etc/httpd/conf/httpd.conf
</code></pre>

<p>といった感じで、Solaris 11 用のシェルスクリプトを吐き出してくれる。（実際にはパッケージ名が違ってそのままでは使えないだろうけど。）</p>

<p>serverspec の場合は、シェルコマンドだけじゃなく Ruby で処理してる部分もあるので、ダンプされるシェルスクリプトで serverspec がやってることをそのまま再現できるわけではないし、そもそもシェルスクリプトでダンプすることに意味があるのか、という感じだけど、specinfra 側で対応するだけで、configspec と serverspec 両方で使えるようになる、という実例として挙げてみた。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[configspec の Dockerfile バックエンドで FROM をサポートした]]></title>
    <link href="http://mizzy.org/blog/2013/12/01/1/" />
    <updated>2013-12-01T00:08:16+09:00</updated>
    <id>http://mizzy.org/blog/2013/12/01/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://mizzy.org/blog/2013/11/26/1/">configspec で Dockerfile を生成できるようにした</a> のだけど、Dockerfile 生成するなら、<code>FROM</code> の定義は外せないだろう、ってことで、<a href="https://github.com/mizzy/configspec/pull/4">できるようにした</a> 。</p>

<pre><code class="ruby">require &quot;configspec&quot;

include Configspec::Helper::Dockerfile
include SpecInfra::Helper::RedHat
</code></pre>

<p>こんな spec_helper.rb を用意して、</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe dockerfile do
  it { should be_from &#39;centos&#39; }
end

describe package(&#39;httpd&#39;) do
  it { should be_installed }
end
</code></pre>

<p>ってな spec を書いて実行したら、</p>

<pre><code>FROM centos
RUN yum -y install httpd
</code></pre>

<p>という内容の Dockerfile を生成してくれる。</p>

<p>Dockerfile バックエンドは specinfra の方で実装しても良かったんだけど、serverspec では使い道ないな、と思ったので、configspec の方で実装した。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[specinfra という serverspec/configspec に共通する処理を抜き出した gem をつくった]]></title>
    <link href="http://mizzy.org/blog/2013/11/30/1/" />
    <updated>2013-11-30T23:34:48+09:00</updated>
    <id>http://mizzy.org/blog/2013/11/30/1/</id>
    <content type="html"><![CDATA[
<blockquote class="twitter-tweet" lang="en"><p>The backend of serverspec/configspec might have to be extracted to a gem to accommodate people&#39;s preferences to abstraction level.</p>&mdash; kentaro (@kentaro) <a href="https://twitter.com/kentaro/statuses/405342692856451072">November 26, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>とあんちぽさんからごもっともな指摘をいただいたし、実際に <a href="http://mizzy.org/blog/2013/11/25/1/">configspec</a> を書いてて、ほとんどが serverspec からのコピペで、今後開発をつづけるのであれば、共通部分を抜き出した gem をつくるべきだな、と思ったので、<a href="http://github.com/mizzy/specinfra">specinfra</a> という gem をつくった。</p>

<p>specinfra で抜き出した処理は以下の部分。</p>

<ul>
<li>SSH, ローカル、WinRM などの実行形式を抽象化している backend と呼んでいるレイヤー</li>
<li>OS を自動判別し、OS に適したコマンドを返す commands と呼んでいるレイヤー</li>
<li>properties, configuration といったヘルパーメソッド</li>
</ul>

<p>こんな感じで、実行形式の違いや OS の違いを吸収してくれるレイヤーとして specinfra を利用し、serverspec や configspec では、RSpec のマッチャに応じた具体的なコマンドを定義していくだけ、といった感じにした。</p>

<p>serverspec v0.12.0 や configspec v0.0.6 からは specinfra ベースになってる。serverspec は従来の spec_helper の書き方でも問題なく動くようにしてあるし、CI でヘビーに使ってる環境で問題なかったのでたぶん大丈夫だけど、何か問題とかあったらお知らせください。</p>

<p>specinfra を使うと、serverspec や configspec のような、RSpec でテスト書いたら裏で何かコマンドが実行される、みたいなものが比較的簡単につくれるはず。（つくりたい人が他にいるかどうか知らんけど。）</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[configspec で Dockerfile を生成できるようにした]]></title>
    <link href="http://mizzy.org/blog/2013/11/26/1/" />
    <updated>2013-11-26T14:47:38+09:00</updated>
    <id>http://mizzy.org/blog/2013/11/26/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://mizzy.org/blog/2013/11/25/1/">configspec</a> とか Immutable Infrastructure について、<a href="https://twitter.com/kazuho">@kazuho</a> さんから色々とありがたいツッコミをいただきまして、その中で</p>

<blockquote class="twitter-tweet" lang="en"><p>個人的にはSCMあるいはLVMの管理下において、record-cmd yum -y install httpd とかすると、コマンドがSCMのコメントに残りつつ、ファイルシステムに発生した差分が変更履歴として保存されるくらいでいいんじゃないかと思う</p>&mdash; Kazuho Oku (@kazuho) <a href="https://twitter.com/kazuho/statuses/405183158674403329">November 26, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>といった tweet があり、それは Docker でやれるけど、configspec でやることではないなー、と思っていたところ、ふと</p>

<blockquote class="twitter-tweet" lang="en"><p>configspec から Dockerfile を生成する、というアプローチもありな気がしてきた。</p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/statuses/405184497550782464">November 26, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ってなことを思いつき、時同じくして <a href="https://twitter.com/naoya_ito">@naoya_ito</a> さんからも</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/gosukenator">@gosukenator</a> configspecみたいなのがDockerfileを出力すればいいと思います</p>&mdash; Naoya Ito (@naoya_ito) <a href="https://twitter.com/naoya_ito/statuses/405185262411460608">November 26, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>とリプライいただいたので、早速実装してみた。v0.0.5 では、以下の様に Dockerfile の生成ができます。</p>

<pre><code>$ configspec-init
Select a backend type:

  1) SSH
  2) Exec (local)
  3) Dockerfile

Select number: 3

 + spec/
 + spec/001_httpd_spec.rb
 + spec/spec_helper.rb
 + Rakefile

$ rake spec
/opt/boxen/rbenv/versions/2.0.0-p247/bin/ruby -S rspec

Package &quot;httpd&quot;
  should be installed

Finished in 0.00229 seconds
1 example, 0 failures

$ cat Dockerfile
RUN yum -y install httpd
</code></pre>

<p>まだ RedHat 系のパッケージインストールしか対応してないので、<code>RUN yum -y install</code> しか出力できないけど、おいおい対応していきます。</p>

<p>（というか、RSpec で副作用のある何かするの、<a href="https://twitter.com/r7kamura">@r7kamura</a> 氏のネタに乗っかった側面が強いんだけど、本当にこの方向性でいいの？って気がしなくもない。）</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[configspec という Immutable Infrastructure 用 Configuration Management Tool をつくってみた]]></title>
    <link href="http://mizzy.org/blog/2013/11/25/1/" />
    <updated>2013-11-25T23:28:50+09:00</updated>
    <id>http://mizzy.org/blog/2013/11/25/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://togetter.com/li/594684">Immutable Infrastructure の有用性 - Togetter</a> の流れの勢いで、<a href="http://mizzy.org/blog/2013/10/29/1/">インフラ系技術の流れ</a> とか <a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure (Naoya Ito, Gosuke Miyashita)</a> とかで言ってたような、冪等性とか依存関係とかを考慮しないシンプルな Configuratin Management Tool である <a href="https://github.com/mizzy/configspec">configspec</a> をつくってみました。<a href="https://rubygems.org/gems/configspec">rubygems.org</a> にもアップしてます。</p>

<p>この手のツールに自分が望む要件は以下の様な感じ。</p>

<ul>
<li>冪等性とかどうでもいい

<ul>
<li>まっさらな状態からのセットアップでしか使わない</li>
</ul></li>
<li>依存関係とかどうでもいい

<ul>
<li>ファイル名順、上から書いた順で実行してく </li>
</ul></li>
<li>対象サーバに余分なものをインストールしたくない

<ul>
<li>対象サーバに SSH さえできれば OK</li>
</ul></li>
<li>シェルスクリプトよりは抽象度を高めたい

<ul>
<li>今さらシェルスクリプトでのセットアップには戻りたくない…</li>
</ul></li>
</ul>

<p>使い方はこんな感じ。</p>

<pre><code>$ configspec-init
Select a backend type:

  1) SSH
  2) Exec (local)

Select number: 1

Vagrant instance y/n: y
Auto-configure Vagrant from Vagrantfile? y/n: n
Input vagrant instance name: www
 + spec/
 + spec/www/
 + spec/www/001_httpd_spec.rb
 + spec/spec_helper.rb
 + Rakefile

 ~/tmp/configspec/spec
$ rake spec
/opt/boxen/rbenv/versions/2.0.0-p247/bin/ruby -S rspec spec/www/001_httpd_spec.rb

Package &quot;httpd&quot;
  should be installed

Finished in 3.44 seconds
1 example, 0 failures
</code></pre>

<p>サンプルとして生成される <code>001_httpd_spec.rb</code> の中身はこんな感じ。</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe package(&#39;httpd&#39;) do
  it { should be_installed }
end
</code></pre>

<p>これによって、<code>rake spec</code> を実行すると、裏では <code>yum -y install httpd</code> が実行される。</p>

<p>これを見て、serverspec とほぼ同じだ、と思った方、正解です。コードも serverspec からとほんどコピペしてます。違いは、<code>be_installed</code> で実行されるのが、serverspec の場合は <code>rpm -q</code> で、configspec では <code>yum install -y</code> といったところぐらいですね。</p>

<p>この configspec は、とりあえず proof of concept として作ってみただけで、RedHat 系 OS でパッケージインストールしかできないので、まだまだ実用には耐えませんが、つくりが serverspec とまんま一緒なので、同じような感じで拡張していけます。</p>

<p>serverspec にこういった機能を組み込むことも考えましたが、serverspec のようにサーバの状態をテストするのと、configspec のようにサーバに副作用のある何かを実行するのでは、書くべき内容が異なってくるだろう、と考えて、別プロダクトにしました。</p>

<p>RSpec の副産物として副作用のある何かが実行されるというのは、もちろん <a href="http://r7kamura.github.io/2013/11/18/sitespec.html">Sitespec</a> の影響受けてます。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[インフラ系技術の流れ]]></title>
    <link href="http://mizzy.org/blog/2013/10/29/1/" />
    <updated>2013-10-29T03:01:13+09:00</updated>
    <id>http://mizzy.org/blog/2013/10/29/1/</id>
    <content type="html"><![CDATA[
<p>ここ最近のインフラ系技術の流れがおもしろいなー、と思ったので、Puppet が出た辺りぐらいから、振り返って整理してみる。殴り書きなので、後から修正したり書き加えたりするかも。特に後半の方は、あまり考えが整理できてない。</p>

<p>最近のウェブ界隈での「インフラ」という用語の使われ方には、色々異論もあるようだけど、ここではごく最近使われるようになってきた、OS からミドルウェアといったソフトウェアレイヤーを指す言葉としてのインフラについて触れる。（英語圏でも同様の意味で使われているようなので、ある程度市民権を得たと言っても良さそうだし。）</p>

<h2>プロビジョニングレイヤー</h2>

<p>まず、前提知識としてプロビジョニングレイヤーと自分が勝手に呼んでるものについて整理。</p>

<p>Chef や Puppet は「プロビジョニングフレームワーク」とも呼ばれているが、以下の議論をより厳密にするために、<a href="http://en.oreilly.com/velocity-mar2010/public/schedule/detail/14180">Lee Thompson 氏による Velocity 2010 での Provisioning Toolchain というタイトルのプレゼン</a> に基づき、プロビジョニングを以下の3つのレイヤーにわけて考える。（イメージしやすいように、それぞれに該当するツールやサービスを当て込んでみた。）</p>

<ul>
<li>Orchestration

<ul>
<li>Fabric, Capistrano, MCollective</li>
</ul></li>
<li>Configuration

<ul>
<li>Puppet, Chef, AWS OpsWorks</li>
</ul></li>
<li>Bootstrapping

<ul>
<li>Kickstart, Cobbler, OpenStack, AWS</li>
</ul></li>
</ul>

<p>下の方から見ていくと、Bootstrapping はいわゆる OS インストールにあたる領域。Configuration はミドルウェアレベルまでの設定、Orchestration はアプリケーションデプロイなどを行って、個別のシステムをひとつのサービスとして協調動作させる、といった感じか。</p>

<p>この分類では、Puppet や Chef は Configuration 領域に属するものであり、プロビジョニングフレームワークという呼び方は適切ではなく、Configuration Management Tool とでも呼ぶべきものであるが、まあそこは些末なことなのでどうでもいい。</p>

<p>また、これらは厳密に区別できるものでもない。たとえば、Kickstart ファイルの中で Puppet を呼び出すなんてこともできるし、Puppet をアプリケーションデプロイにも利用するはめになって辛い、といった話を聞いたことがあったり、Capistrano でミドルウェアのインストールや設定なんかをやる、なんて事例も聞いたことがある。</p>

<p>最近出てきた Ansible なんかも、Orchstration と Configuration の中間に位置するような存在に見える。</p>

<h2>Puppet 以前</h2>

<p>ここから、ある程度時間の流れにそって、プロビジョニングにまつわる技術の流れを振り返ってみたい。といっても、項目毎に、時間軸がオーバーラップしてたり、前後してたりするので、あまり厳密ではない。</p>

<p>いわゆる「Configuration Management Tool」としては、Puppet より前は、CFEngine, LCFG, BCFG といったものがあったようだが、どれもきちんと触ったことがないので、この辺はあまりよく知らない。この中では CFEngine が一番有名か。</p>

<p>システム管理自動化の走りがこの辺のツールなのかな。</p>

<h2>Puppet</h2>

<p>Puppet が出てきたのは 2006 年あたり。Infrastructure as Code の流れの最初のきっかけを作ったのが Puppet なんじゃないかと。</p>

<p>LISA &#39;07 では <a href="https://www.usenix.org/conference/lisa-07/panel-configuration-tools-lcfg-cfengine-bcfg-and-puppet">CFEngine や Puppet 等の開発者のパネルディスカッションが行われていた</a> 。</p>

<h2>AWS EC2</h2>

<p>これも登場は Puppet と同じく 2006 年あたりだった気がする。</p>

<p>Puppet での Infrastructure as Code はインフラをコードで記述するという意味であり、EC2 での Infrastracture as Code は、インフラをコードで操作する、という意味合いになる。</p>

<p>こんな形で、Infrastructure as Code を意味づける2つの技術が、2006年あたりに登場してる。</p>

<h2>Chef</h2>

<p>Chef が出てきたのは 2009 年ぐらいかな？Puppet をベースに、さらにインフラをプログラマブルに扱う、という思想を推し進めたツールが Chef だと思う。これが IaaS の台頭により、開発者がインフラを触る機会が多くなり、そういった人たちに受け入れられたのが、今の Chef 人気の背景にはあるんじゃないかと。</p>

<h2>テスト駆動インフラ</h2>

<p>これはここ数年で出てきた言葉で、認知されてきたのはごく最近のような気もするし、まだまだ認知されてないような気もする。</p>

<p>概念自体は 2007 年ぐらいから実は考えていて、その当時はインフラという言葉は今のような使われ方をしていなかったので、<a href="http://mizzy.tumblr.com/post/46834223858">テスト駆動サーバ構築</a> という呼び方をしていた。</p>

<p>これを考え始めたきっかけは Puppet を使い始めたことで、構築は自動化できたけど、その確認作業を従来通り、目視の手動チェックでやるのはいけてないな、と考えたから。で、<a href="http://tokyo2007.yapcasia.org/sessions/2007/02/assurer_a_pluggable_server_tes.html">Assurer というツール</a> でこれを実現しようとしてたんだけど、いろいろ夢が膨らみ、詰め込みすぎてすごく複雑になったり、自分の技術力もなかったりで、使わないまま消え去った。</p>

<p>書籍としては 2011 年に <a href="http://shop.oreilly.com/product/0636920020042.do">Test-Driven Infrastructure with Chef</a> が出ていて、最近 <a href="http://shop.oreilly.com/product/0636920030973.do">これの第2版</a> が出た。with Chef とタイトルにあるように、この辺りは Chef とその周辺ツールが色々と充実してる印象。</p>

<p>でも、自分は Chef 使ってないし、特定の Configuration Management Tool に縛られるのってどうなんだろう、と思って、もっと汎用的にシンプルにインフラのテストをしたい、と思って開発したのが <a href="http://serverspec.org/">serverspec</a> 。2007年から考えていたテスト駆動インフラが、6年かかってようやく実現できた。長かった。</p>

<p>上で書いたように、この辺りのツールは Chef まわりが充実してるものの、テスト駆動インフラという考え方は、いまいち認知されてなかったように感じる。（特に日本では。海外はよくわからない。）</p>

<p>それが serverspec が登場することによって、だいぶ認知されてきたんじゃないかと自画自賛してる。</p>

<h2>インフラCI</h2>

<p>アプリケーション開発と同じように、テスト駆動したら次は CI だ、というのは自然な流れだと思う。serverspec もこれがやりたいがために開発した。</p>

<p>インフラCIについては、実は <a href="http://blog.riywo.com/2012/05/27/145310">@riywo くんが昨年ブログエントリを書いている</a> 。彼は現状を把握し、先を見通し、やるべきことを考え、それを実現する技術力がある、希有なエンジニアだと思う。</p>

<p>ペパボではちいさなプロジェクトで、Docker + Puppet + serverspec + Jenkins でのインフラ CI を最近やりはじめたところ。</p>

<h2>Immutable Infrastructure</h2>

<p><a href="http://chadfowler.com/blog/2013/06/23/immutable-deployments/">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components - Chad Fowler</a> というブログエントリで知った言葉。</p>

<p>おおざっぱに言うと、システムを変更する際に、既に動いているサーバに対して変更を加えるのではなく、新しく別にシステムを構築し、古いシステムと差し替える、ってなことをやる。</p>

<p>日本語での解説は <a href="http://apatheia.info/blog/2013/08/10/immutable-infrastructure/">Immutable Infrastracture について - apatheia.info</a> にあるのでこちらを参照してください。</p>

<p>オンプレな環境でもできないことはないんだろうけど、EC2 みたいに仮想マシンをプログラマブルに扱え、作ったり破棄したりすることが容易にできる環境があるからこそのテクニック。</p>

<p>これができるようになると、Chef や Puppet が謳う冪等性ってのはどうでもよくなってくる。ひとつのシステムにマニフェストやレシピを何度も何度も適用することがなくなるから。なので、Chef や Puppet に変わって、Immutable Infrastructure に適した Configuration Management Tool が今後出てくると思う。よりシンプルで、実行順序がわかりやすく制御しやすいものが。</p>

<h2>Container Base Deployment</h2>

<p>Immutable Infrastructure は EC2 のような、ハイパーバイザー型仮想マシンでの話が主流だと思われるが、今後はコンテナ型仮想マシンで同じようなことをやる、という話が増えてくると思う。</p>

<p>ハイパーバイザー型仮想マシンによる Immutable Infrastructure では、リモートの本番環境に仮想マシンをつくって、それと古い仮想マシンを差し替える形になるが、コンテナの場合には、ローカルでコンテナをつくって、それをまるっとリモートに送り込む形のデプロイになるのではないだろうか。</p>

<p>コンテナの持つポータビリティの高さによって、こういうことが実現できるようになると思う。これができると何がうれしいかというと、既にペパボの一部でもやっているような、Docker でコンテナを作成、Puppet マニフェストを流し込んで serverspec でテスト、をした後に、現在であればコンテナをそのまま破棄してるけど、破棄せずにそのまままるっと本番にデプロイ、なんてことができるようになるんじゃないか、と妄想してる。</p>

<p>もちろん、ハイパーバイザー型仮想マシンの場合でも、Packer のようにローカル（Vagrant VM等）とリモート（EC2インスタンス）を抽象化して同じように扱えるような仕組みはあるが、コンテナの場合には「同じように扱える」ではなく「まったく同じもの」になるので、ローカルでコンテナをつくって十分にテストし、それを本番にデプロイしても、同じようにちゃんと動くだろう、という安心感はより高いと言えそう。</p>

<h2>Docker</h2>

<p>上のインフラ CI や Container Base Deployment の項には何の説明もなく Docker が出てきてるが、これについては <a href="http://d.hatena.ne.jp/naoya/20130620/1371729625">naoya さんのエントリ</a> や 　<a href="http://rebuild.fm/14/">Rebuild: 14: DevOps with Docker, chef and serverspec (naoya, mizzy)</a> を参照。</p>

<h2>Serf</h2>

<p>最近出てきた Serf。現在の Puppet や Chef をメインとしたプロビジョニングにおいては、サーバ毎に微妙に異なる設定（ホスト名やIPアドレスにひもづいた設定）や、サーバの増減によって動的に変わるような設定（ロードバランサや Nagios の監視対象など）なんかも、Puppet や Chef で管理しているが、これは Immutable Infrastructure のようなやり方とはあまり相性がよくなさそう。</p>

<p>特に動的に変わるような設定は、プロビジョニングの中でも、Configuration ではなく Orchestration の範疇になるので、最初の分類にしたがうと、Puppet や Chef はあまり向いてない領域とも言える。</p>

<p>これを解決するための手段のひとつが Serf で、Puppet や Chef でやってしまっている Orchestration 領域の仕事を Serf の方に任せることによって、良い感じのプロビジョニングができそう。<a href="http://www.serfdom.io/intro/vs-chef-puppet.html">Serf vs. Chef, Puppet, etc.</a> に書いてあることは、そういうことだと理解した。</p>

<p>とはいえ、Serf 自体はゴシップベースプロトコルによるクラスタリングとイベントプロパゲーションが主な仕事で、その上で Orchestration するような仕組みを自分で作らないといけなさそう、今のところは。</p>

<p>Serf の次はその辺を解決するようなプロダクトを Mitchell Hashimoto 氏は出してくるのかな。（または、Serf にはプラグインの仕組みがあるようなので、プラグインで解決するのかもしれない。）</p>

]]></content>
  </entry>


</feed>
