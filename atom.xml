<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2013-09-21T21:59:02+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[自分のプロダクトを海外でも認知してもらうには]]></title>
    <link href="http://mizzy.org/blog/2013/09/21/1/" />
    <updated>2013-09-21T21:59:02+09:00</updated>
    <id>http://mizzy.org/blog/2013/09/21/1/</id>
    <content type="html"><![CDATA[
<p>ブログを書くまでが YAPC、ってことなので書きます。</p>

<p>YAPC 懇親会で <a href="https://twitter.com/hirose31">@hirose31</a> さんと「日本人の作ったプロダクトでとても優れていて日本では知名度抜群なのに、海外では全然知られてない、みたいの割とあるけど、どうやったら serverspec みたいに海外でも認知されるようになるんですかね」みたいな話をしました。</p>

<p>serverspec の海外での知名度、といっても、日本での知名度と比較すればまだまだ全然、という感じですが、たまに海外の方の tweet を見かけたり、<a href="http://jjasghar.github.io/blog/2013/07/12/serverspec-the-new-best-way-to-learn-and-audit-your-infrastructure/">Serverspec the New Best Way to Learn and Audit Your Infrastructure</a> というブログエントリを書いてくださった方がいたり、<a href="http://foodfightshow.org/2013/05/testing-in-practice.html">Food Fight という Podcast で取り上げられたり</a>、<a href="http://shop.oreilly.com/product/0636920030973.do">O&#39;Reilly の Test-Driven Infrastructure with Chef 2nd Edition</a> で取り上げられたり、<a href="https://github.com/serverspec/serverspec/pull/128">Puppet Labs の中の人が Vagrant 対応パッチを送ってくれたり</a>、<a href="https://github.com/serverspec/serverspec/issues/239">Opscode の中の人が issue open してくれたり</a>、といった感じで、そこそこ海外の方にも知られる存在になっていて、そうなるように意識してやったことがいくつかあるので、それについて簡単に整理してみます。</p>

<h2>英語でドキュメントを書く</h2>

<p>これは当たり前、というか、大前提なので、特に説明の必要はないですね。</p>

<h2>メジャーなキーワードを散りばめる</h2>

<p><a href="https://github.com/serverspec/serverspec">GitHub の description</a> や <a href="http://serverspec.org/">serverspec.org</a> には serverspec の説明として <strong>&quot;RSpec tests for your servers configured by Puppet, Chef or anything else&quot;</strong> といった言葉があるのですが、<strong>&quot;Puppet&quot;</strong> や <strong>&quot;Chef&quot;</strong> といったワードがあるために、辿り着いて興味を持った人が多いのではないかと思います。特に、Puppet Labs や Opscode の中の人は、Puppet や Chef でエゴサーチしてるでしょうし、そういった方々にリーチして、tweet してもらったりすることで、認知度が高まったのではないかと。</p>

<h2>ぱっと見てどんなものかわかりやすくする</h2>

<p>検索等で辿り着いたとしても、ぱっと見て何をするものなのかがわからないと、すぐに興味を失って二度と訪れてくれなくなるので、<a href="http://serverspec.org/">serverspec.org</a> のトップページは、ざっと見ただけで何をするものなのかがすぐに理解できる、ということ意識しています。</p>

<h2>名前が覚えやすい</h2>

<p><strong>serverspec = server + rspec</strong> ととても安直ですが、それが故に覚えやすく、名前から何をするものなのかが連想しやすいし、tweet 等する時に書きやすいので、それも良かったのではないかと。</p>

<h2>簡単に試せる</h2>

<p>どんなに優れたプロダクトでも、動かすまでの敷居が高いと、途中で挫折して、もういいや、と離脱されて忘れ去られてしまうし、実際に動かしてみることで、はじめてそのプロダクトの価値がわかる、ということもよくあるので、いかに敷居を低くして、実際に動かして体験してもらうか、ということも意識しています。（これは海外向けに意識したこと、というわけではないですが、広く利用してもらうために意識したことなので、追記。）</p>

<hr>

<p>とまあこんな感じで、そんな大したことやってないですが、他にも要因は色々あるんでしょうね。例えば、Test-Driven Infrastructure という考え方が浸透してきたけど、serverspec ほどシンプルで敷居の低いツールが他になかった、とか、いわゆる開発者と呼ばれる人たちに Puppet や Chef が浸透してきて、そういった人たちに「サーバのテストを RSpec でやる」というコンセプトが響いた、とか、時代の流れ的なものにうまく嵌まったのかなー、と。</p>

<hr>

<p>あと、この話は、serverspec のような、技術者向けのツールとかライブラリにはある程度あてはまるでしょうけど、そうじゃないものだと、言語や文化の壁が大きくて、こうはいかないでしょうね。</p>

<hr>

<p>とはいえ、海外で認知してもらう前に、そもそも国内で認知してもらえるような良いプロダクトを作らないといけないわけだけど、その方法については自分は知りません。むしろ教えて欲しいです。</p>

<hr>

<p>というわけで、ブログ書くまでが YAPC と言っておきながら、YAPC 全然関係ないエントリをお送りしました。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec の並列処理]]></title>
    <link href="http://mizzy.org/blog/2013/06/22/1/" />
    <updated>2013-06-22T23:44:52+09:00</updated>
    <id>http://mizzy.org/blog/2013/06/22/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://connpass.com/event/2580/">hbstudy #45</a> や <a href="http://podcast.bulknews.net/post/53587224871/ep14-docker-naoya-mizzy">Tatsuhiko Miyagawa&#39;s Podcast ep14</a> なんかで、serverspec の並列処理が課題、ってな話をしていて、<a href="http://net-ssh.rubyforge.org/">Net::SSH</a> がイベントドリブンな処理になってるのがネックになりそうだなー、どうしようかなー、と悩んでたんですが、とりあえず試してみた方が早いだろう、ってことで <a href="https://github.com/grosser/parallel_tests">parallel_tests</a> を試してみた。</p>

<p>6つの VM に対して 311 examples を実行した結果で比較。</p>

<p>parallel_tests を使わない場合。</p>

<pre><code>$ rspec spec
.......................................................................................................................................................................................................................................................................................................................

Finished in 50.28 seconds
311 examples, 0 failures
</code></pre>

<p>parallel_tests を使った場合。</p>

<pre><code>$ parallel_rspec spec
8 processes for 42 specs, ~ 5 specs per process
.............................................................................................................................................................................................................................................
.....
Finished in 14.69 seconds
33 examples, 0 failures
...........

Finished in 15.32 seconds
37 examples, 0 failures
..............

Finished in 16.38 seconds
38 examples, 0 failures
................

Finished in 17.99 seconds
32 examples, 0 failures
.....

Finished in 17.74 seconds
38 examples, 0 failures
...........

Finished in 18.99 seconds
41 examples, 0 failures
...

Finished in 18.97 seconds
52 examples, 0 failures
.........

Finished in 21.49 seconds
40 examples, 0 failures

311 examples, 0 failures

Took 24.075618 seconds
</code></pre>

<p>実行時間は約50秒から約24秒と、半分ほどになった。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec でホスト固有の属性値を扱う方法]]></title>
    <link href="http://mizzy.org/blog/2013/05/12/2/" />
    <updated>2013-05-12T22:05:26+09:00</updated>
    <id>http://mizzy.org/blog/2013/05/12/2/</id>
    <content type="html"><![CDATA[
<p><strong>注意！ ここで解説する方法は v0.3.0 から利用できます。</strong></p>

<p><a href="http://blog.takus.me/2013/05/12/provisioning-frameworks-casual-talks-001/">Provisioning Frameworks Casual Talks vol.1 に行ってきた #pfcasual - TAKUMI SAKAMOTO&#39;S BLOG</a> で触れられている attributes 周りについて、この辺は必要になるだろうなー、と前から思ってはいたので、それを実現するための極々簡単な仕組みを <a href="https://github.com/mizzy/serverspec/pull/98">試験的に実装してみた</a> 。</p>

<p>これは単に <code>attr_set</code> と <code>attr</code> という2つのヘルパーメソッドを使えるようにしただけのものなんだけど、以下のような感じで使える。</p>

<p>今回は例として、ホスト毎に MySQL の server-id が外部ファイルで定義されていて、各サーバの /etc/my.cnf で正しく server-id が設定されているかをテストする、という状況を想定する。</p>

<p>属性値の定義は、今回は YAML ファイルで行うので、以下のような YAML ファイルを用意する。</p>

<div><script src='https://gist.github.com/5563530.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5563530&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>

<p>次に、<a href="/blog/2013/05/12/1/">serverspec のテストをホスト間で共有する方法</a> と似たような感じで、YAML で定義されたロールに応じて適切なテストを行うような <code>Rakefile</code> を書く。</p>

<div><script src='https://gist.github.com/5563531.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5563531&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>

<p>そして <code>spec_helper.rb</code> を以下のように書く。</p>

<div><script src='https://gist.github.com/5563533.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5563533&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>

<p><code>attr_set attributes[c.host]</code> で属性値のセットを行っている。</p>

<p>最後に、属性値を参照して <code>attr[:server_id]</code> が <code>/etc/my.cnf</code> で定義されているかどうかをテストする spec を書く。</p>

<div><script src='https://gist.github.com/5563537.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5563537&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>

<p>仕組みは単純なので、<code>YAML.load_file</code> している部分を好きなように変えれば、自身の環境に合った使い方ができるでしょう。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec のテストをホスト間で共有する方法]]></title>
    <link href="http://mizzy.org/blog/2013/05/12/1/" />
    <updated>2013-05-12T03:06:48+09:00</updated>
    <id>http://mizzy.org/blog/2013/05/12/1/</id>
    <content type="html"><![CDATA[
<p>今回は serverspec のテストをホスト間で共有する方法について説明します。</p>

<p>serverspec-init を実行して生成されるひな形ファイルは以下のようになっています。</p>

<pre><code>|-- Rakefile
`-- spec
    |-- spec_helper.rb
    `-- www.example.jp
        `-- httpd_spec.rb
</code></pre>

<p>これを見てわかる通り、テスト対象となるホスト名でディレクトリが掘られ、その下に対象ホストに対する spec が置かれる、という形になっています。</p>

<p>したがって、複数の役割が同じホストに対してテストを実行しようとすると、こんな感じで同じ内容の spec ファイルが重複して置かれることになります。</p>

<pre><code>|-- Rakefile
`-- spec
    |-- app001.example.jp
    |   `-- ruby_spec.rb
    |-- app002.example.jp
    |   `-- ruby_spec.rb
    |-- proxy001.example.jp
    |   `-- nginx_spec.rb
    |-- proxy002.example.jp
    |   `-- nginx_spec.rb
    `-- spec_helper.rb
</code></pre>

<p>実はこのようなファイル構成は、<code>serverspec-init</code> で生成される <code>Rakefile</code> や <code>spec_helper.rb</code> に依存しているだけで、serverspec 本体の仕様には依存してません。したがって、<code>Rakefile</code> や <code>spec_helper.rb</code> をカスタマイズすれば、好きなファイル構成にすることができます。</p>

<p>その一例として、spec をサーバのロール毎にわけ、各サーバに対して属するロールにひもづいたテスト実行する、というやり方について説明します。</p>

<p>まず、以下のようにロール毎にディレクトリを作成し、その下にロールにひもづいた spec ファイルを置きます。</p>

<pre><code>|-- Rakefile
`-- spec
    |-- app
    |   `-- ruby_spec.rb
    |-- base
    |   `-- users_and_groups_spec.rb
    |-- db
    |   `-- mysql_spec.rb
    |-- proxy
    |   `-- nginx_spec.rb
    `-- spec_helper.rb
</code></pre>

<p>次に、以下のような <code>Rakefile</code> と <code>spec/spec_helper.rb</code> を置きます。</p>

<div><script src='https://gist.github.com/5560916.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5560916&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>

<p><code>rake -T</code> を実行すると以下のように表示され、<code>rake serverspec</code> ですべてのホストに対して実行したり、<code>rake serverspec:host</code> で特定のホストに対して実行したりできることがわかります。</p>

<pre><code>$ rake -T
rake serverspec           # Run serverspec to all hosts
rake serverspec:app001    # Run serverspec to app001.example.jp
rake serverspec:app002    # Run serverspec to app002.example.jp
rake serverspec:db001     # Run serverspec to db001.example.jp
rake serverspec:db002     # Run serverspec to db002.example.jp
rake serverspec:proxy001  # Run serverspec to proxy001.example.jp
rake serverspec:proxy002  # Run serverspec to proxy002.example.jp
</code></pre>

<p><code>Rakefile</code> 内で定義しているホストとロールのひもづけは、外部から JSON などで取得してきてもいいですし、工夫すれば、特定のロールに属するホスト群に対してのみ実行、といったこともできるでしょう。</p>

<p>こんな形で、どのホストに対してどのテストを実行するのか、というのは、serverspec 本体の仕様とは疎になってるので、<code>Rakefile</code> と <code>spec_helper.rb</code> をカスタマイズすることで、各自の環境や目的にあったファイル構成にしたり、対象のホストに関する情報を外部から引っ張ってきたり、といったことも可能です。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec のサイトつくりました]]></title>
    <link href="http://mizzy.org/blog/2013/03/30/1/" />
    <updated>2013-03-30T21:38:46+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/30/1/</id>
    <content type="html"><![CDATA[
<p>GitHub Pages で <a href="http://serverspec.org/">serverspec のサイト</a> をつくりました。</p>

<p><a href="http://serverspec.org/matchers.html">マッチャの一覧ページ</a> もつくったので、これを見てもらえれば、現状どういったテストができるのか一通り把握できるかと思います。</p>

<p>他にもこういったテストが欲しい、など要望があれば、<a href="https://github.com/mizzy/serverspec">こちら</a> までプルリク送ってください。</p>

<p>次は serverspec 自体の spec を充実させる予定。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec で同一ホストへの SSH 接続を再利用するようにしました]]></title>
    <link href="http://mizzy.org/blog/2013/03/28/1/" />
    <updated>2013-03-28T23:09:20+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/28/1/</id>
    <content type="html"><![CDATA[
<p>今まで <a href="https://github.com/mizzy/serverspec">serverspec</a> では、テストをひとつ実行するたびに、ホストへの SSH 接続/切断を繰り返していたのですが、バージョン 0.0.13 では、同一ホストへの SSH 接続を再利用することで、テスト時間を短縮できるようにしました。</p>

<p>接続の管理は serverspec-init 実行時に生成される spec/spec_helper.rb で行っているため、0.0.12 以前から利用している方は、一度 spec/spec_helper.rb を削除して、再度 serverspec-init を実行して再作成してください。</p>

<pre><code>$ rm spec/spec_helper.rb
$ serverspec-init
 + spec/spec_helper.rb
</code></pre>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Continuous Integration of Puppet with Ukigumo and serverspec]]></title>
    <link href="http://mizzy.org/blog/2013/03/27/2/" />
    <updated>2013-03-27T22:36:46+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/27/2/</id>
    <content type="html"><![CDATA[
<p>I made Puppet CI enviroment with <a href="http://ukigumo.github.com/ukigumo/">Ukigumo</a> . I realize following things.</p>

<ul>
<li>Manage Puppet manifests by Git repository</li>
<li>Set up <a href="http://ukigumo.github.com/Ukigumo-Server/">Ukigumo Server</a> </li>
<li>Make LXC system containers with <a href="/blog/2013/03/24/1">puppet-lxc-test-box</a></li>
<li>Run <a href="https://gist.github.com/mizzy/5252543">my own Ukigumo Client script</a> periodically by cron

<ul>
<li>If master branch of Puppet manifests repository is updated, pull manifests, apply them to LXC system containers and post results to Ukigumo Server.</li>
<li>Run <a href="/blog/2013/03/24/4">serverspec</a> tests to LXC system containers and post results to Ukigumo Server.</li>
</ul></li>
</ul>

<p>This is Ukigumo Server&#39;s top page. Latest results are listed up.</p>

<p><img src="/images/2013/03/ukigumo-top.jpg"></p>

<p>This is the detail of the result of applying Puppet manifests.</p>

<p><img src="/images/2013/03/ukigumo-puppet.jpg"></p>

<p>This is the detail of the results of serverspec tests.</p>

<p><img src="/images/2013/03/ukigumo-serverspec.jpg"></p>

<p>Alaso results are posted to IRC through <a href="http://search.cpan.org/%7Eyappo/App-Ikachan-0.11/lib/App/Ikachan.pm">Ikachan</a>.</p>

<p><img src="/images/2013/03/ukigumo-irc.jpg"></p>

<p>I will refactor Puppet manifests upon this CI environment.</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Ukigumo と serverspec で Puppet の継続的インテグレーション]]></title>
    <link href="http://mizzy.org/blog/2013/03/27/1/" />
    <updated>2013-03-27T21:38:39+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/27/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://blog.64p.org/">tokuhirom</a> さんにより開発されている <a href="http://ukigumo.github.com/ukigumo/">Ukigumo</a> を利用して、Puppet の CI 環境を構築してみた。やってることは以下の通り。</p>

<ul>
<li>Puppet マニフェストを Git リポジトリで管理</li>
<li><a href="http://ukigumo.github.com/Ukigumo-Server/">Ukigumo Server</a> を立てる</li>
<li><a href="/blog/2013/03/22/1/">puppet-lxc-test-box</a> で Puppet マニフェストを流し込むシステムコンテナを必要なロールの分だけ用意</li>
<li><a href="https://gist.github.com/mizzy/5252543">自前の Ukigumo クライアントスクリプト</a> を cron で定期的に走らせ以下を実行

<ul>
<li>Puppet マニフェストリポジトリの master ブランチが更新されていたら、git pull して Puppet マニフェストをシステムコンテナに適用し、適用結果を Ukigumo サーバに投げる</li>
<li><a href="/blog/2013/03/24/3/">serverspec</a> によるテストをシステムコンテナに対して実行し、結果を Ukigumo サーバに投げる</li>
</ul></li>
</ul>

<p>Ukigumo のトップ画面はこんな感じ。最新の結果一覧が表示されている。</p>

<p><img src="/images/2013/03/ukigumo-top.jpg"></p>

<p>Puppet マニフェストの適用結果の詳細はこんな感じ。</p>

<p><img src="/images/2013/03/ukigumo-puppet.jpg"></p>

<p>serverspec によるテスト結果の詳細はこんな感じ。</p>

<p><img src="/images/2013/03/ukigumo-serverspec.jpg"></p>

<p>結果は <a href="http://blog.yappo.jp/yappo/archives/000760.html">Ikachan</a> に投げて IRC で通知してる。</p>

<p><img src="/images/2013/03/ukigumo-irc.jpg"></p>

<p>これで Puppet マニフェストをガリガリとリファクタリングするための準備が整った。</p>

<p><a href="/blog/2013/03/22/1/">puppet-lxc-test-box</a> や <a href="/blog/2013/03/24/3/">serverspec</a> をつくったのは、こういうことがやりたかったから、ってなことを社内 IRC に書いたら、<a href="https://twitter.com/search/realtime?q=%233%E5%88%86%E3%81%A7%E5%B8%B8%E6%9D%BE&amp;src=typd">#3分で常松</a> くんを濡らすことに成功した。</p>

<blockquote class="twitter-tweet"><p>「15:00 mizzy: 最近ブログに書いてたことは、すべてこれへの布石」のカッコイイ感はんぱなくて濡れる</p>&mdash; TSUNEMATSU Shinya (@tnmt) <a href="https://twitter.com/tnmt/status/316792813712977920">March 27, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Ukigumo もとてもシンプルでいいですね。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec が Debian 対応した（してもらった）]]></title>
    <link href="http://mizzy.org/blog/2013/03/25/1/" />
    <updated>2013-03-25T01:52:46+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/25/1/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2013/03/24/3/">構築済みサーバを RSpec でテストする serverspec という gem をつくった</a> で、「Red Hat 系 Linux 前提のつくりになってしまっているので、他のディストリビューションや OS で利用したい、という方は、ぜひプルリクエストください」と書いていたら、早速 <a href="https://github.com/mizzy/serverspec/pull/1">Debian 系 OS 対応のプルリクエスト</a> をいただきました。ありがとうございます！</p>

<p>単に Debian 系 OS に対応するだけではなく、他の OS にも対応できるよう拡張しやすい形に書き換えていただいたり、serverspec 自体の spec も追加していただいたりと、至れり尽くせりで感謝感謝です。</p>

<pre><code class="ruby">c.include(Serverspec::DebianHelper, :os =&gt; :debian)
</code></pre>

<p>みたいな書き方も知らなかったので、大変参考になりました。</p>

<p><a href="https://github.com/mizzy/serverspec/blob/master/README.md">README</a> にも書いてありますが、こんな感じで OS を指定します。</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe &#39;httpd&#39;, :os =&gt; :debian do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39;, :os =&gt; :debian do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39;, :os =&gt; :debian do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p><code>:os =&gt; :debian</code> と何度も書くのが面倒なら、</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe &#39;www.example.jp&#39;, :os =&gt; :debian do
  it do
    &#39;httpd&#39;.should be_installed
  end
  it do
    &#39;httpd&#39;.should be_enabled
  end
  it do
    &#39;httpd&#39;.should be_running
  end

  it do
    &#39;port 80&#39;.should be_listening
  end

  conf = &#39;/etc/httpd/conf/httpd.conf&#39;
  it do
    conf.should be_file
  end
  it do
    conf.should contain &quot;ServerName www.example.jp&quot;
  end
end
</code></pre>

<p>とか書いてもいいですし、</p>

<p><code>serverspec-init</code> で生成される spec/spec_helper.rb に</p>

<pre><code class="ruby">require &#39;serverspec&#39;
require &#39;pathname&#39;

RSpec.configure do |c|
  c.include(Serverspec::DebianHelper)
  c.before do
    c.host = File.basename(Pathname.new(example.metadata[:location]).dirname)
  end
end
</code></pre>

<p>な感じで <code>c.include(Serverspec::DebianHelper)</code> を追加して、</p>

<pre><code class="ruby">require &#39;spec_helper&#39;

describe &#39;httpd&#39; do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39; do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39; do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p>といった感じで、spec 内では OS は指定しない、といった書き方もできます。</p>

<p>好きなスタイルを選んでください。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[serverspec - a rubygem for testing provisioned servers with RSpec]]></title>
    <link href="http://mizzy.org/blog/2013/03/24/4/" />
    <updated>2013-03-24T18:55:10+09:00</updated>
    <id>http://mizzy.org/blog/2013/03/24/4/</id>
    <content type="html"><![CDATA[
<p>In <a href="/blog/2013/03/24/2/">Testing servers provisioned by Puppet or Chef with RSpec</a>, I wrote how to test provisioned servers with RSpec.</p>

<p>I&#39;ve created a rubygem <a href="https://rubygems.org/gems/serverspec">serverspec</a> for that purpose.</p>

<p><a href="https://github.com/mizzy/serverspec">mizzy/serverspec</a></p>

<p>You can install serverspec with gem install.</p>

<pre><code>$ gem install serverspec
</code></pre>

<p>serverspec-init command creates template files and directories.</p>

<pre><code>$ serverspec-init
 + spec/
 + spec/www.example.jp/
 + spec/www.example.jp/httpd_spec.rb
 + spec/spec_helper.rb
 + Rakefile
</code></pre>

<p>spec/<a href="http://www.example.jp/httpd_spec.rb">www.example.jp/httpd_spec.rb</a> contains example spec code.</p>

<pre><code>require &#39;spec_helper&#39;

describe &#39;httpd&#39; do
  it { should be_installed }
  it { should be_enabled   }
  it { should be_running   }
end

describe &#39;port 80&#39; do
  it { should be_listening }
end

describe &#39;/etc/httpd/conf/httpd.conf&#39; do
  it { should be_file }
  it { should contain &quot;ServerName www.example.jp&quot; }
end
</code></pre>

<p>You can write test code like this.</p>

<p>You may need some settings in ~/.ssh/config and ssh-agent for logging into the target server without the password/passphrase.</p>

<pre><code>Host *.example.jp
   User root
   IdentityFile ~/.ssh/for_serverspec_rsa
</code></pre>

<p>Run tests with rake spec.</p>

<pre><code>$ rake spec
/usr/bin/ruby -S rspec spec/www.example.jp/httpd_spec.rb
......

Finished in 0.99715 seconds
6 examples, 0 failures
</code></pre>

]]></content>
  </entry>


</feed>
