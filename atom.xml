<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Gosuke Miyashita]]></title>
    <link href="https://mizzy.org/atom.xml" rel="self"/>
    <link href="https://mizzy.org/"/>
    <updated>2025-08-30T21:31:14+09:00</updated>
    <id>https://mizzy.org/</id>
    <author>
        <name><![CDATA[Gosuke Miyashita]]></name>
    </author>
    <generator uri="https://github.com/mizzy/nebel/">Nebel</generator>

    <entry>
        <title type="html"><![CDATA[RigelというAI Coding Agentを開発している]]></title>
        <link href="https://mizzy.org/blog/2025/08/30/2/"/>
        <updated>2025-08-30T21:31:14+09:00</updated>
        <id>https://mizzy.org/blog/2025/08/30/2/</id>
        <content type="html"><![CDATA[
<h2>きっかけ</h2>
<p>tokuhiromさんの<a href="https://blog.64p.org/entry/2025/08/29/170302">ashronというAI Coding Agentを開発している</a>というブログ記事や以下のポストを読んだ。</p>
<!-- markdownlint-disable MD013 -->
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ashron っていう、Coding Agent を書いている - Blog::Amrta <a href="https://t.co/fKU4l0QTQq">https://t.co/fKU4l0QTQq</a></p>&mdash; tokuhirom (@tokuhirom) <a href="https://twitter.com/tokuhirom/status/1960847865967780266?ref_src=twsrc%5Etfw">August 29, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<!-- markdownlint-enable MD013 -->
<p>Clineがいい、Cursorだ、いやClaude Codeだ、Codexだ、みたいな流行に振り回されたくないし、ローカルLLMをうまく扱えるコーディングエージェントもなかなか見つからない。CodexがローカルLLM対応してるけど、期待したとおりに動いてくれない。</p>
<p>なので、自分でAI Coding Agentを作るのがよいかもしれない、と考えていた。</p>
<p>そんな状況で、tokuhiromさんの記事を読んで背中を押された感じ。</p>
<p>というわけで、自分もRigelというAI Coding Agentを作り始めた。</p>
<hr />
<h2>Rigelについて</h2>
<p><a href="https://github.com/mizzy/rigel">Rigel</a>は、Goで実装しているAI Coding Agent。</p>
<p>主な特徴は以下の通り。</p>
<ul>
<li>ターミナルベースのチャットインターフェース</li>
<li>複数のLLMプロバイダーに対応（Anthropic Claude、Ollama）</li>
<li>サンドボックスでの安全なコード実行</li>
</ul>
<p>特にローカルLLMを扱えるようにOllamaに対応しているのがポイント。何も設定しない場合、デフォルトでローカルのOllama + gpt-oss:20bを利用するようになっている。エージェント実行中に、AnthropicかOllamaかを切り替えたり、モデルを切り替えたりもできる。</p>
<p>実際に動かすとこんな感じ。</p>
<p><img src="/images/2025/08/rigel.jpg" alt="Rigelのスクリーンショット" /></p>
<p>ちなみにRigelという名前はオリオン座の1等星から拝借しているけど、特に意味はない。リゲルは青白い星なので、色使いもそんな感じにしている。</p>
<hr />
<h2>今後の開発</h2>
<p>とりあえずベースができて会話できる程度にはなったけど、まだコーディングエージェントとして使える状態にはなっていない。今後はツール周りと、コンテキストをどう扱うか、といったあたりが開発の中心になりそう。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[ObsidianとQuartz 4でつくる雑なメモサイト]]></title>
        <link href="https://mizzy.org/blog/2025/08/30/1/"/>
        <updated>2025-08-30T12:30:00+09:00</updated>
        <id>https://mizzy.org/blog/2025/08/30/1/</id>
        <content type="html"><![CDATA[
<p>今までGistやはてなブログに書いていたホテルのワークチェアについてのメモだけど、もっと雑に更新したいし、行ったことあるホテルでは実際に椅子がどうだったのか、といったあたりもまとめておきたいな、と思った。</p>
<!-- markdownlint-disable MD013 -->
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">これ、もっと雑に更新したいし、行ったことあるホテルでは実際に椅子がどうだったのか、といったあたりもまとめておきたいな、と思ったので、ブログからは削除して https://t.co/KoTUjAm69A に内容を移した https://t.co/41tPIx2dMx</p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1961037784397021260?ref_src=twsrc%5Etfw">August 28, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<!-- markdownlint-enable MD013 -->
<p>なので、別サイトで管理することにした。</p>
<p>どうやって作ろうかな、と考えたところで、ObsidianとQuartz 4の組み合わせを使うことにした。</p>
<!-- markdownlint-disable MD013 -->
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ObisidianでMarkdownを書いてQuartz 4でGitHub PagesにPublishするようにした https://t.co/RwjecYnrw5</p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1961040479656849472?ref_src=twsrc%5Etfw">August 28, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<!-- markdownlint-enable MD013 -->
<hr />
<h2>ObsidianとQuartz 4の組み合わせ</h2>
<p><a href="https://obsidian.md/">Obsidian</a>は、Markdownベースのナレッジベースアプリ。ローカルで動作するので、データは自分の手元に置いておける。</p>
<p><a href="https://quartz.jzhao.xyz/">Quartz 4</a>は、Obsidianで書いたMarkdownファイルを静的サイトに変換してくれるツール。GitHub Pagesにデプロイできる。</p>
<p>この組み合わせの何がいいかというと、</p>
<ul>
<li>Obsidianで書いたメモをそのまま公開できる</li>
<li>GitHub Actionsで自動デプロイできる</li>
</ul>
<p>といったあたり。</p>
<hr />
<h2>セットアップ</h2>
<p>Quartz 4のセットアップは、ghコマンドとghqコマンドを使うと簡単。</p>
<pre><code class="language-shell">gh repo fork jackyzha0/quartz --clone=false
ghq get git@github.com:YOUR_USERNAME/quartz.git
cd $(ghq root)/github.com/YOUR_USERNAME/quartz
npm i
npx quartz create
</code></pre>
<p>あとは、<code>content</code>ディレクトリにObsidianのVaultを配置するか、シンボリックリンクを張るかすれば良い。</p>
<p>自分の場合は、Obsidianで管理してるVaultの<code>publish</code>ディレクトリだけを公開したかったので、Makefileを使って<code>content</code>ディレクトリにコピーするようにした。</p>
<p>実際のコードは<a href="https://github.com/hotel-memo/hotel-memo.github.io">hotel-memo/hotel-memo.github.io</a>にある。</p>
<hr />
<h2>雑なメモサイトとしての使い心地</h2>
<p>実際に<a href="https://hotel-memo.github.io/">ホテルメモサイト</a>を作って運用してみたところ、かなり使い心地が良い。</p>
<p>Obsidianで書いて、<code>make serve</code>でローカルでプレビュー確認、<code>make publish</code>で公開、という感じで手軽に運用できる。ブログほど構えずに、本当に雑なメモとして書ける。</p>
<hr />
<p>参考：</p>
<ul>
<li><a href="https://obsidian.md/">Obsidian</a></li>
<li><a href="https://quartz.jzhao.xyz/">Quartz 4</a></li>
<li><a href="https://hotel-memo.github.io/">ホテルメモ</a></li>
</ul>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[Twilog MCP Alternativeの実装]]></title>
        <link href="https://mizzy.org/blog/2025/07/31/1/"/>
        <updated>2025-07-31T05:26:59+09:00</updated>
        <id>https://mizzy.org/blog/2025/07/31/1/</id>
        <content type="html"><![CDATA[
<p>以下のポストに対して、Twilog MCPを利用するために課金していた一ユーザーとして思うところがあり、課金をやめて代わりになる仕組みを自前実装することにした。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">まったく書く予定じゃなかったnoteを書きました！やってしまいました＆やってしまったのは仕方ない＆やるしかない<br><br>7月30日16時過ぎから発生しているTwilogのデータベース障害について｜Togetter（トゥギャッター ） <a href="https://t.co/1CqVnqUu5x">https://t.co/1CqVnqUu5x</a></p>&mdash; yositosi (@yositosi) <a href="https://twitter.com/yositosi/status/1950577394219434263?ref_src=twsrc%5Etfw">July 30, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>ググってみると、アーカイブデータをDuckDBにインポートして、MCPで閲覧する、という仕組みを構築されている方がいらっしゃった。</p>
<p><a href="https://zenn.dev/tenkao/scraps/96996339ddf4c1">DuckDB + Claude Desktop + MCP で X（Twitter）のアーカイブデータを閲覧する</a></p>
<p>これを参考に、TwitterのアーカイブデータをDuckDBにインポートするプログラムをClaude Codeに実装してもらった。</p>
<p><a href="https://github.com/mizzy/tweetduck">mizzy/tweetduck: Twitter Archive to DuckDB Importer - Extract and import Twitter archive data (2025 format) into DuckDB for analysis</a></p>
<p>これと<a href="https://github.com/ktanaka101/mcp-server-duckdb">ktanaka101/mcp-server-duckdb: A Model Context Protocol (MCP) server implementation for DuckDB, providing database interaction capabilities</a>を組み合わせたら、完全にTwilog MCP Alternativeになった。</p>
<img src="/images/2025/07/duckdb-mcp.png" alt="" width="50%" height="50%"/>
<p>アーカイブデータの更新は手動になってしまうが、自分の用途的には、直近のツイートが入ってなくても問題ないので、これで十分。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[Synology NASをTailscaleのExit Nodeにして外からLANにアクセス]]></title>
        <link href="https://mizzy.org/blog/2025/05/29/1/"/>
        <updated>2025-05-29T09:04:51+09:00</updated>
        <id>https://mizzy.org/blog/2025/05/29/1/</id>
        <content type="html"><![CDATA[
<p>外出先から自宅のLANに接続するために、Synology NASをExit Nodeとして設定した時のメモ。</p>
<p>Tailscaleのオフィシャルドキュメントに、Synology NAS上でのインストール/設定方法がまとめられているので、基本的にはこれを見ればよい。</p>
<p><a href="https://tailscale.com/kb/1131/synology#manual-installation-steps">Access Synology NAS from anywhere · Tailscale Docs</a></p>
<p>ただしこのドキュメントでは、Exit Nodeとして設定してLANアクセスできるようにする方法は説明されていないので、こちらの動画も参考にした。</p>
<p><a href="https://www.youtube.com/watch?v=F7mqVt_pUJY">Setup Your Synology NAS As A Tailscale Exit Node - YouTube</a></p>
<p>具体的には、Synology NASにSSHでログインして、以下のコマンドを実行すれば良い。</p>
<pre><code class="language-shell">sudo tailscale up \
--advertise-exit-node \
--advertise-routes=192.168.100.0/24 \
--reset
</code></pre>
<p>その後、コンソール上でApproveする。</p>
<p><img src="/images/2025/05/tailscale-exit-node.png" alt="" /></p>
<p>これで外出先から、Tailscaleが入っていない/入れられない自宅LAN内のマシンにもアクセスできるようになった。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[社会保険料額情報HTMLジェネレーター]]></title>
        <link href="https://mizzy.org/blog/2025/05/24/1/"/>
        <updated>2025-05-24T18:36:10+09:00</updated>
        <id>https://mizzy.org/blog/2025/05/24/1/</id>
        <content type="html"><![CDATA[
<p>社会保険料額情報、電子データで受け取る申請を行って、無事受理された。</p>
<p><a href="https://www.nenkin.go.jp/denshibenri/online_jigyousho/denshidata/tsuchisho.html">電子データで受け取れる各種情報・通知書の詳細｜日本年金機構</a></p>
<p>申請時に、事業所整理記号をどう入力すれば良いのかよくわからず、何度かリジェクトされたけど。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">解決した。前2桁は都道府県コードを入れる必要があった。申請フォームに様式記入要領PDFへにリンクがあり、それを見ると書いてあった。 <a href="https://t.co/bfWQzaUiqL">https://t.co/bfWQzaUiqL</a></p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1926157537159610449?ref_src=twsrc%5Etfw">May 24, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>電子データはZIPファイルになっていて、中身を見るとXMLファイルとXSLファイルで構成されている。IEではそのまま閲覧できるようだが、Microsoft EdgeやSafariの場合は、ブラウザの設定変更が必要になる。</p>
<ul>
<li><a href="https://www.nenkin.go.jp/denshibenri/oshirase/zenpan/20220610.html">InternetExplorer以外のブラウザでの決定通知書の閲覧方法について｜日本年金機構</a></li>
<li><a href="https://www.nenkin.go.jp/faq/denshi/e-gov/koubunsho_hirakikata.html">機構から送付されるXML形式の通知書（公文書）の開き方を教えてください。｜日本年金機構</a></li>
</ul>
<p>また、普段使いしてるChromeでは、そのままさくっと表示する方法がなさそうで、以下のサイトを参考に、XMLとXSLからHTMLに変換して表示する方法を試してみた。</p>
<ul>
<li><a href="https://gammasoft.jp/blog/convert-xml-and-xsl-to-one-html-by-python/">電子公文書の XML と XSL を Python で１つのHTMLに変換する方法 - ガンマソフト</a></li>
<li><a href="https://zenn.dev/sora_kumo/articles/xsl-viewer-html">電子公文書(XML+XSL)をChromeで表示する</a></li>
</ul>
<p>この方法でばっちり表示されたのだが、PDFで保存した場合にもきれいにレイアウトしたい、と思い、<a href="https://claude.ai/">Claude</a>に社会保険料額情報HTMLジェネレーターつくってもらった。</p>
<p>ジェネレーターはひとつのHTMLファイルで構成されていて、開くとこのような画面になる。</p>
<p><img src="/images/2025/05/social-insurance-premium-amount-generator-0.png" alt="" /></p>
<p>社会保険料額情報のXMLが含まれるZIPファイルをアップロードするとこのようになる。</p>
<p><img src="/images/2025/05/social-insurance-premium-amount-generator-1.png" alt="" /></p>
<p>プレビュー表示するとこのようになり、PDFにするとA4横一枚におさまるレイアウトになっている。</p>
<p><img src="/images/2025/05/social-insurance-premium-amount-generator-2.png" alt="" /></p>
<p>ソースコードはこちら → <a href="https://github.com/mizzy/social-insurance">https://github.com/mizzy/social-insurance</a></p>
<p>こちらで実際に試せます → <a href="https://mizzy.org/social_insurance_premium_amount_generator.html">https://mizzy.org/social_insurance_premium_amount_generator.html</a></p>
<p>社会保険料額情報だけしか対応していないので、保険料納入告知額・領収済額通知書等にも対応予定。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[長時間のパソコン作業に適したホテル一選]]></title>
        <link href="https://mizzy.org/blog/2025/02/24/1/"/>
        <updated>2025-02-24T21:05:24+09:00</updated>
        <id>https://mizzy.org/blog/2025/02/24/1/</id>
        <content type="html"><![CDATA[
<p>三選とか十選とかいきたいところだけど、自分の少ないホテル宿泊経験では、ヒルトン福岡シーホークぐらいしか知らないので。</p>
<p>出張の際にホテルの部屋でパソコン仕事する際、問題になるのが椅子。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">家で仕事してると、椅子のことはあまり意識しないんだけど、ホテルで仕事してるとすぐに腰や背中が痛くなってくるので、家で使ってる椅子は本当に疲れにくいんだな、ということを実感する。</p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1605182622703161346?ref_src=twsrc%5Etfw">December 20, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>その点、ヒルトン福岡シーホークは<a href="https://jp.steelcase.com/collections/chairs-seating/products/think">SteelcaseのThinkチェア</a>が配備されていて、長時間パソコン作業しても疲れにくい。</p>
<p>ホテルサイトの写真を見る限りでは、和室以外のほとんどの部屋に配備されてそう。</p>
<blockquote>
<p><a href="https://www.hilton.com/ja/hotels/fukhihi-hilton-fukuoka-sea-hawk/rooms/">https://www.hilton.com/ja/hotels/fukhihi-hilton-fukuoka-sea-hawk/rooms/</a><br />
<img src="/images/2025/02/seahawk-rooms.png" alt="" /></p>
</blockquote>
<p>実際、<a href="https://mizzy.hateblo.jp/entry/2024/05/07/115701">色々なタイプの部屋に宿泊</a>したけど、スイート和洋室以外はすべてThinkチェアだった。欲を言えば、アームレストの高さが調節できるタイプだとなお良いのだけど、まともなワークチェアがあるだけで十分ありがたい。</p>
<p>ヒルトン福岡シーホーク以外だと、羽田エクセルホテル東急のプレミアと呼ばれるタイプの部屋にはThinkチェアがある模様。</p>
<blockquote>
<p><a href="https://www.tokyuhotels.co.jp/haneda-e/room/index.html">https://www.tokyuhotels.co.jp/haneda-e/room/index.html</a><br />
<img src="/images/2025/02/haneda-excel-hotel-rooms.png" alt="" /></p>
</blockquote>
<p>自分はスタンダードタイプの部屋には泊まったことがあるけど、Thinkチェアはなかった。</p>
<p>ホテル検索サイト、椅子でも検索できるといいのに。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[DuckDBで課金時間の多いGitHub Actionsワークフローを抽出]]></title>
        <link href="https://mizzy.org/blog/2025/02/15/1/"/>
        <updated>2025-02-15T09:03:26+09:00</updated>
        <id>https://mizzy.org/blog/2025/02/15/1/</id>
        <content type="html"><![CDATA[
<script src="https://gist.github.com/mizzy/774585268e81b49f38173f8e88622521.js"></script>
<p>ChatGPTにやらせても良い。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[吉祥寺.pm37に参加した]]></title>
        <link href="https://mizzy.org/blog/2025/02/01/1/"/>
        <updated>2025-02-01T01:38:10+09:00</updated>
        <id>https://mizzy.org/blog/2025/02/01/1/</id>
        <content type="html"><![CDATA[
<p><a href="https://kichijojipm.connpass.com/event/339040/">【n回目の増枠！！】吉祥寺.pm37【おいでよ吉祥寺！オフライン開催！】 - connpass</a></p>
<p>吉祥寺.pm初参加。コロナ禍以後、オフラインの技術系イベントは、CloudNative Days Fukuoka 2023とPHPカンファレンス福岡2024ぐらいしか参加していなかったので、もっと積極的に参加するようにしよう、と思ったタイミングで開催が目に止まったので参加してきた。</p>
<p>この記事は、参加レポートというほどでもない、雑なメモです。</p>
<hr />
<h2>会場到着まで</h2>
<p>開始時刻が19時で、それぐらいに到着するよう電車に乗ると、退勤ラッシュに巻き込まれそうだな、と思ったので早めに移動。17時には吉祥寺駅に着いていた。まだ使い切っていないモスカードがあるので、モスバーガーに入って<a href="https://www.oreilly.co.jp/books/9784814400911/">Tidy First?</a>でも読みながら時間まで待とう、と思ったが、改装中で休業だった。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">永久不滅ポイントと交換したモスカード2000円分x 5枚が届いた。残高移行して一枚にまとめた。これでモスバーガーで豪遊する。 <a href="https://t.co/o9FkTorEuc">pic.twitter.com/o9FkTorEuc</a></p>&mdash; mizzy (@gosukenator) <a href="https://twitter.com/gosukenator/status/1801092740383686798?ref_src=twsrc%5Etfw">June 13, 2024</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>当てが外れて、どこで時間潰そうかとウロウロしたのだけど、めんどくさくなって結局南口のマクドナルドにした。期間限定のメキシカンチーズチキン、もう1回ぐらい食べとくか、と思ったら販売してなかったので、チーズダブルてりやきを食べた。</p>
<p>で、Tidy First?読みながら時間潰していたのだけど、そういえばconnpassには開始時刻は書いてたけど、開場時刻は書いてなかったよな、何時になったら入れるんだろう、と思い、つぶやいておけば誰か反応してくれるかも、と思ったらsongmuさんが教えてくださった。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">18:30のようです <a href="https://t.co/1Uj9P3rb3P">https://t.co/1Uj9P3rb3P</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/1885257591884038484?ref_src=twsrc%5Etfw">January 31, 2025</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>ありがとうございました、助かりました。</p>
<hr />
<h2>会場到着</h2>
<p>受付があったけど、懇親会に参加しない自分は特に何もする必要がなかった。<a href="https://x.com/magnolia_k_">@magnolia_k_</a>さんにPayPayでカンパするためのQRコードがあったのでカンパした。企業スポンサーとかついてないのに参加費無料なので、会場代は@magnolia_k_さんのポケットマネーから出してるのかな、と思ってご本人に聞いたら、やはりそうだとのこと。ただ、毎回カンパで、赤字にもならず、それほど多過ぎもしない額が集まってるとのことなので安心した。</p>
<p>老眼が進んできてるので前から2列目の席に座った。</p>
<hr />
<h2>発表について</h2>
<p>LT含めて全部で発表者が15人と多いので、全てには触れずに、特に強く印象に残ったものだけ。</p>
<h3>初めての海外カンファレンス</h3>
<p>masasuzuさんによる発表。</p>
<p>今回のテーマは「ぼくのかんがえたさいきょうのアーキテクチャ」なのだけど、connpassでこの文章読み飛ばしていて、会場で聞いて初めて知った。そして、発表者のmasasuzuさんもテーマをご存知なかったとのことで、全然関係ないテーマですみません、と謝罪していて、ああ、知らなかったの自分だけじゃなく、発表者の方もなんだ、と妙に面白かった。</p>
<h3>ポッドキャストは作れる!</h3>
<p>Songmuさんの発表。Indie Web、コンテンツを自分で管理して公開したい、ブログエンジンも自作OSS、funが大事、といった話に共感しかなくて、これに関して自分の思うところを書こうと思ったら、ここだけ長文になって記事全体のバランスが悪くなるので、たぶん別記事で書くかもしれないし書かないかもしれない。</p>
<h3>DSLによる抽象レイヤーの構築</h3>
<p>yonekuboさんの発表。最初の方は、内部DSLや外部DSLとは、といったおさらい的な話。おすすめのDSLに関する本が2冊とも絶版になってる、と聞いて、確かに、最近はDSLって言葉を敢えて使うことはなく、当たり前のようにDSLを使っているよな、と。今更感のあるDSLの話をどう展開するのかな、と思ったら、後半は生成AIやJSXを絡めた今風なDSLの使い方の話になっていき、とても楽しめた。</p>
<h3>もうひとつのアーキテクチャ</h3>
<p>kondoyukoさんの発表。kondoyukoさん、以前から存じ上げていたけど、発表ははじめて聞いた。本物のアーキテクチャの話（建築の話）だった。</p>
<h3>AWSを使ったイベントの配信アーキテクチャ</h3>
<p>r_takaishiさんの発表。出てくるAWSのサービスが、全部聞いたことないやつだった。</p>
<h3>waiwai-aiを入社2ヶ月のエンジニア3人と作るためのさいきょうのアーキテクチャ</h3>
<p>Furudonoさんの発表。まさにコンウェイの法則の具体例で、4人チームと少人数でもこの法則が適用されるのか、面白い、と思った。</p>
<h3>戸籍の話 (connpass上ではTBDになってて正確なタイトル忘れた)</h3>
<p>toya524287さんの発表。<a href="https://toya.hatenablog.com/entry/2024/06/01/180018">先祖の戸籍の写しを取り寄せてみたら、214年前（江戸時代、文化7年）までさかのぼれた - Really Saying Something</a>の内容を5分で、といった感じの内容。ちゃんとアーキテクチャにも絡めた話にまとまっていてよかった。</p>
<p>以前勤めていた会社で、自由なテーマで発表するLT回をやったことがあるのだけど、その時のことを思い出した。自分はその時、<a href="https://www.slideshare.net/slideshow/ia-14907107/14907107">Ia型超新星とチャンドラセカール限界</a>というタイトルで発表した。</p>
<hr />
<h2>その他</h2>
<p>会場に早めに着いて、magnoliaさんとお話しできたのは良かったけど、それ以外の方とは全然お話しできなかった。参加者一覧を見ると、知り合いが結構参加してそうだったけど、全然見つけられなかった、というかそもそも、見つけて話かけるような時間がなかった。</p>
<p>帰りの電車の時間があるので懇親会に参加しないですぐに帰ったのだけど、今度は車で行って懇親会に参加しようかな、と思った。お酒飲めないのは損に感じることが多いのだけど、こういう場合に車移動を躊躇なく選択できるメリットもある。</p>
<p>最後に一句詠む発表者が多くてなぜだろう、と思ったら途中で解説があって、武蔵野公会堂の利用申請で、利用目的で「趣味」カテゴリを選ぶと「句会」しか選択肢がないとのことで、句会で利用申請しているから、とのことだった。</p>

]]></content>
    </entry>

    <entry>
        <title type="html"><![CDATA[Git scrapingでヒルトンの宿泊料金/ポイントをウォッチ]]></title>
        <link href="https://mizzy.org/blog/2025/01/30/1/"/>
        <updated>2025-01-30T13:25:16+09:00</updated>
        <id>https://mizzy.org/blog/2025/01/30/1/</id>
        <content type="html"><![CDATA[
<p>自分はHilton Honors会員かつ<a href="https://www.hpcj.jp/">HPCJ</a>会員なので、ポイントを利用する場合やHPCJ対象外ホテルを予約する場合はオフィシャルサイトから、ポイントを利用せずHPCJ対象ホテルを予約する場合はHPCJサイトから予約している。</p>
<p>どちらのサイトで予約する場合でも、前日までキャンセル可能なFlexible Rateで予約をしている。（HPCJサイトでの予約は必然的にFlexible Rateになる。）</p>
<p>ホテルの宿泊料金は変動するので、予約した後で自分が予約した時の料金より安くなることがよくある。なので、予約後も料金を時々チェックして、予約時より安くなっていたらキャンセルして予約し直す、といったことをしている。</p>
<p>そこで、<a href="/blog/2025/01/28/1/">PlaywrightでGit scraping</a>という記事で紹介した<a href="https://github.com/mizzy/git-scraping-playwright-template">git-scraping-playwright-template</a>をベースにして、指定した日程のヒルトン宿泊にかかる料金やポイントを自動でウォッチできるやつをつくってみた。</p>
<p><a href="https://github.com/mizzy/git-scraping-hilton"><img src="https://opengraph.githubassets.com/efbe89083ae3d67f091dde51fe157d2da35426dc8300f8baab15b6c14eeb82f5/mizzy/git-scraping-hilton" height="200" /></a></p>
<p>config.tsで以下のようにウォッチしたいヒルトンホテルの場所や日程を指定する。</p>
<script src="https://gist.github.com/mizzy/bb16cb6f2b0de94f25534c1b60c23232.js"></script>
<p>今のところ、福岡、お台場、有明しか対応していない。対応ホテルを増やしたい場合は、config_type.tsの以下の部分に追加する。</p>
<script src="https://gist.github.com/mizzy/88978b078626b9c464648f451f01b20a.js"></script>
<p>各ホテルの料金やポイントは、<code>https://www.hilton.com/en/book/reservation/rooms/?ctyhocn=FUKHIHI&amp;arrivalDate=...</code><br />
というURLから取得しているが、<code>ctyhocn=FUKHIHI</code>にホテルコードらしきものが入っているので、ロケーション名とホテルコードのマッピングを上のコードで行っている。</p>
<p>ポイントは「Pay with Points」に表示されているもの、料金は「Quick Book」のところに表示されているFlexible Rateの料金を取得している。</p>
<p><img src="/images/2025/01/hilton-odaiba.png" alt="" /></p>
<p>同じ日程、同じ部屋タイプでも様々な料金プランがあるが、基本的にはFlexible Rateと連動してるはずなので、Flexible Rateをウォッチしておけば、価格の変動はわかるはず。</p>
<p>より正確な情報を得ようとするならば、自分の場合、ポイント、Flexible RateにHonors Discountが適用された価格、HPCJ価格（Flexible Rate * 0.75）の3つがあれば良いので、次はこれらの料金を取得できるよう改善する予定。</p>

]]></content>
    </entry>

</feed>
