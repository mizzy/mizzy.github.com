<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gosuke Miyashita]]></title>
  <link href="http://mizzy.org/atom.xml" rel="self"/>
  <link href="http://mizzy.org/"/>
  <updated>2012-09-30T22:09:32+09:00</updated>
  <id>http://mizzy.org/</id>
  <author>
    <name><![CDATA[Gosuke Miyashita]]></name>
    
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2012 1日目]]></title>
    <link href="http://mizzy.org/blog/2012/09/30/2/" />
    <updated>2012-09-30T22:09:32+09:00</updated>
    <id>http://mizzy.org/blog/2012/09/30/2/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2012/09/30/1/">前夜祭</a> につづいて、1日目について。</p>

<p>この日は朝は会社で、YAPC スピーカーデビューとなる同僚の <a href="http://yapcasia.org/2012/talk/show/63dbff60-b365-11e1-befb-95586aeab6a4">まつけん</a> と <a href="http://yapcasia.org/2012/talk/show/3e7acdec-db1e-11e1-90c8-0d4e6aeab6a4">のんたん</a> の発表練習につきあってから会場に向かったので、<a href="https://twitter.com/hasegawayosuke">@hasegawayosuke</a> さんの <a href="http://yapcasia.org/2012/talk/show/aaade824-abc0-11e1-8865-57a46aeab6a4">Web::Security beyond HTML5</a> から聞き始めた。話の内容に興味がある、というよりも、生 hsegawa さんのお話を聞きたかった、という感じで参加。</p>

<p>午後からはりーおたんのトークが聞きたいなー、と思い、その前のトークから部屋に入ろうと思ったら満員で入れず。</p>

<p>しかたなく、多目的ホールで電源確保して、仕事したり自分のスライド書いたりなどしてたら、LTソンがすごい盛り上がりで、正直言うと最初はあまり興味なかったんだけど、聞いてるうちにうずうずしてきて、飛び入り参加でトークしてきました。</p>

<p>トーク内容は、技術的なことは一切話さず、Sqale クーポンあんちぽブロマイドの、撮影風景画像の紹介でした。ブロマイドに使われない写真ばかりで、その場で見られた方々は、とてもラッキーだったと思います。</p>

<p>これで、前夜祭に続いて、2日連続トーク達成。</p>

<p>LT ソン、本当にいい試みで、感動しました。<a href="https://twitter.com/uzulla">uzulla</a> さん、話がうまくておもしろく、場を盛り上げるのが本当にうまい。</p>

<p>最終日のトークで、Plagger Conference で LT デビューした（させられた）話をしたのですが、スピーカーになることが自分にとって大きな転機のひとつだったので、誰もがスピーカーになれるこういった機会がある、というのは、本当に素晴らしいことだと思います。</p>

<p>土日は家庭があるので、hajioji.pm は家から割と近いにも関わらず参加していなかったのですが、今度是非遊びに行きたいと思いました。（って書いてたら、後ろから見てた妻が、行ってきて良いよ、と言ってくれたので、今度行きます。）</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2012 Tokyo 前夜祭]]></title>
    <link href="http://mizzy.org/blog/2012/09/30/1/" />
    <updated>2012-09-30T20:47:56+09:00</updated>
    <id>http://mizzy.org/blog/2012/09/30/1/</id>
    <content type="html"><![CDATA[
<p>ブログを書くまでが YAPC、ってことで、ぼちぼち書いていきます。まずは前夜祭から。</p>

<p><a href="http://yapcasia.org/2012/talk/show/048d468c-ab9e-11e1-a3b5-2a656aeab6a4">Sqale の裏側</a> というタイトルで、ペパボが提供する Ruby/Rack アプリが動く PaaS <a href="http://sqale.jp/">Sqale</a> の裏側のアーキテクチャについてお話してきました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14492929" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/mizzy/inside-sqales-backend-at-yapcasia-tokyo-2012" title="Inside Sqale&#39;s Backend at YAPC::Asia Tokyo 2012" target="_blank">Inside Sqale&#39;s Backend at YAPC::Asia Tokyo 2012</a> </strong> from <strong><a href="http://www.slideshare.net/mizzy" target="_blank">Gosuke Miyashita</a></strong> </div>

<iframe width="640" height="360" src="http://www.youtube.com/embed/lxvT8mcilE4" frameborder="0" allowfullscreen></iframe>

<p>YAPC で Perl がまったく出てこない話をしたのは、これがはじめてです。こんなトークを採択してくださって、本当にありがとうございます。</p>

<p>内容的には、<a href="http://sapporo.rubykaigi.org/2012/ja/schedule/details/48.html">札幌 Ruby 会議 2012</a> でお話しした内容とほとんど同じで、Sqale で利用している技術のうち、主に以下の3つについてお話しました。</p>

<ul>
<li>LXC やカーネルパッチなどの OS レイヤー</li>
<li>ウェブプロキシのダイナミックルーティングを Nginx + Lua + Redis で実現</li>
<li>SSH のルーティングを如何に実現しているか</li>
</ul>

<p>スライドで紹介したリンクについて、こちらにもまとめておきます。</p>

<ul>
<li><a href="https://github.com/paperboy-sqale/sqale-patches">Sqale で利用しているカーネルパッチ</a></li>
<li><a href="https://github.com/hiboma">ひろやん</a> が Nginx + Lua + Redis について書いている <a href="http://d.hatena.ne.jp/hiboma/searchdiary?word=nginx%20lua%20redis">はてダエントリ</a></li>
<li><a href="https://github.com/mizzy/openssh-script-auth">OpenSSH Script Auth Patch</a></li>
<li>SSH ルーティングの着想を得た <a href="https://github.com/blog/530-how-we-made-github-fast">GitHub CTO のブログエントリ</a></li>
<li><a href="http://twitter.com/lamanotrama">@lamanotrama</a> さんによる <a href="https://docs.google.com/presentation/d/11QekgeD-ex8RWVABGWsn3VGcHWq6HDnSVZzZskPWNeg/present#slide=id.p">サーバ構築自動化(on AWS) Sqale の場合</a></li>
</ul>

<p>SSH Router 実現のためにあてている OpenSSH パッチ、似たようなパッチが実は、RedHat 系ディストリビューションで入る OpenSSH にあたっているのですが、期待している挙動と微妙に異なるため、独自にパッチをあてることにしました。</p>

<p>また、Heroku では SSH Router と同じことを実現するために <a href="http://twistedmatrix.com/trac/">Twisted</a> を使っている、という情報を刺身が中の人から仕入れてきたので調べてみたところ、<a href="http://twistedmatrix.com/documents/8.2.0/api/twisted.conch.ssh.html">twisted.conch.ssh</a>  という、SSHv2 実装がありました。</p>

<p>独自パッチをあてる方式は、OpenSSH へのアップデートに追従するのがきついので、Twisted ベースに切り替えることも検討しており、そのために <a href="https://github.com/mizzy/funnel">funnel</a> というものを開発中です。（まだ API 検討中なのと、動作確認コード書いただけですが。）</p>

<p>funnel という名称は、GitHub 社で Git のルーティングを実現しているライブラリの名前が Chimney で、それの類義語からとっています。アニメとかからとったわけではないです。</p>

<p>札幌 Ruby 会議 2012 でも、YAPC::Asia Tokyo 2012 でも聞き逃したけど、やっぱり生で聞きたい、という方、ご安心ください。12/7, 8 に行われる、RubyConf.tw 2012 でも <a href="https://github.com/rubytaiwan/rubyconf.tw/blob/master/2012/speakers/schedule.md">同じ内容でプレゼン</a> する予定です。台湾でお待ちしています。</p>

<p>札幌 Ruby 会議 2012 で登壇したペパボの同僚、<a href="https://github.com/hsbt">hsbt</a>, <a href="https://github.com/kentaro">kentaro</a>, <a href="https://github.com/kyanny">kyanny</a> も、同様に RubyConf.tw 2012 で登壇します。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[「Sqale の裏側」資料 at 札幌 Ruby 会議 2012]]></title>
    <link href="http://mizzy.org/blog/2012/09/15/1/" />
    <updated>2012-09-15T20:50:15+09:00</updated>
    <id>http://mizzy.org/blog/2012/09/15/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://sapporo.rubykaigi.org/2012/ja/">札幌 Ruby 会議 2012</a> 、まだ会期中ですが、一足お先に帰ってきました。（大学の必修科目である、基礎数学のスクーリング授業が今日から3日間あるため。）</p>

<p>YAPC::Asia 2011 の個人スポンサーTシャツを着て参加したのですが、Rubyist の皆さんの心が広いためか、宮川神のご加護があったからか、殴られたりせずに済んで一安心。</p>

<p><a href="http://www.paperboy.co.jp/">ペパボ</a> は徐々に Ruby にスイッチしてきており、Ruby が動く PaaS である <a href="http://sqale.jp/">Sqale</a> もリリースされたことから、宣伝も兼ねて <a href="http://www.slideshare.net/mizzy/inside-sqales-backend-at-sapporo-ruby-kaigi-2012">Sqale の裏側</a> というタイトルで発表させてもらいました。</p>

<p>Sqale は、 Ruby が動く PaaS でもあるし、Sqale 自体の開発も、フロントもバックもバリバリ Ruby が使われているのですが、Ruby の話はほとんどしない、出てくるコードも Lua と C の方が Ruby よりも多い、というトーク内容でしたが、技術的にはなかなかおもしろい内容になってると思いますので、PaaS の裏側、特にインフラ寄りの部分ってどうなってるんだろう、と興味のある方は、ぜひ資料をご覧になってみてください。</p>

<p>発表の会場には、Sqale の競合である Heroku の中の人でもあり、Ruby のパパでもある Matz さんがいらっしゃったので、ノートPCに張った Heroku ステッカーを見せて、しっかりと媚びを売ることも忘れませんでした。</p>

<p><a href="http://yapcasia.org/2012/">YAPC::Asia Tokyo 2012</a> の前夜祭でも、同じ内容でお話させていただきます。Perl の方は Ruby 以上に関係がなく、Perl の話はまったくしませんし、基本的には札幌 Ruby 会議で話した内容とほとんど同じですので、みなさん僕の話は聞かずに、Perl Mongers との交流を楽しむことをお勧めします。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[スクショをとってコメントつけて Git にアップする Automator Application つくってみた]]></title>
    <link href="http://mizzy.org/blog/2012/08/26/1/" />
    <updated>2012-08-26T01:03:23+09:00</updated>
    <id>http://mizzy.org/blog/2012/08/26/1/</id>
    <content type="html"><![CDATA[
<p>Gyazo にコメントつけてアップしたい、といった要望があって、それと似たようなことを実現する Automator Application をつくってみた。</p>

<p>この Application を起動すると、</p>

<p><img src="/images/2012/08/screenshot01.png"></p>

<p>といったダイアログが出るので、領域選択してスクショを取得、すると、</p>

<p><img src="/images/2012/08/screenshot02.png"></p>

<p>とコメントダイアログが出るので、コメントを入力して OK をクリックすると、入力したコメントをコミットメッセージとして、git commit &amp; git push してくれる。</p>

<p>実際にこれを使ってスクショを GitHub にあげてみた履歴が<a href="https://github.com/mizzy/screenshots/commits/master">こちら</a> 。</p>

<p>Application は <a href="https://github.com/mizzy/screenshots-to-git-with-comments/zipball/master">こちらからダウンロード</a> できます。利用の際には、画像保存先となる Git リポジトリがあるディレクトリ部分を適宜修正してください。</p>

<p>以下、Automator Application の各パーツを参考のために貼り付けておきます。</p>

<p><img src="https://raw.github.com/mizzy/screenshots/master/shot-20120826010951.png"></p>

<p><img src="https://raw.github.com/mizzy/screenshots/master/shot-20120826011024.png"></p>

<p><img src="https://raw.github.com/mizzy/screenshots/master/shot-20120826011121.png"></p>

<p><img src="https://raw.github.com/mizzy/screenshots/master/shot-20120826011151.png"></p>

<p><img src="https://raw.github.com/mizzy/screenshots/master/shot-20120826011222.png"></p>

<p><img src="https://raw.github.com/mizzy/screenshots/master/shot.png"></p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Paperboy's engineer evaluation system その後]]></title>
    <link href="http://mizzy.org/blog/2012/08/20/1/" />
    <updated>2012-08-20T23:59:43+09:00</updated>
    <id>http://mizzy.org/blog/2012/08/20/1/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2012/02/29/1/">Paperboy&#39;s engineer evaluation system</a> で書いた、ペパボの技術者評価制度、2回目の評価が完了しました。</p>

<p>前回は、</p>

<ol>
<li>シニア、またはアドバンスドシニアに上がりたい人には、自ら立候補してもらう。</li>
<li>立候補する人は、定められたフォーマットにしたがって、自分がそのポジションにふさわしいと思う理由や実績について Markdown で書き、指定した Git リポジトリに push する。（「定められたフォーマット」と言っても、最初に名前、次に希望のポジションを書いてもらうだけで、それ以外は自由。）</li>
<li>文書提出後、一人一人と面談を行う。</li>
<li>文書の内容と面談の結果にもとづいて、各人が提出した文書の末尾に、結果（通過 or 不通過）、評価ポイント、今後期待すること、を評価者が追記し、git push する。</li>
</ol>

<p>といった流れで、今回も基本的には同じ流れなのですが、2. の部分のやり方を変え、社内の Git リポジトリに push してもらう代わりに、GitHub 上にある文書提出用プライベートリポジトリを fork して、pull request を送ってもらう形にしました。</p>

<p>pull request をもらったら、一次評価者である自分が内容を確認し、ここをもう少し詳しく書いて、とか、こういうこともやってたから、盛り込んだらいいんじゃない、的なことを、pull request のコメントでやりとりして、修正してもらったらまた push、ってなことをやって、提出文書をブラッシュアップしてもらい、面談が終わったらマージ、fork 元のリポジトリにマージされた各人の提出文書に対して、評価結果とコメントを書き込む、という流れでした。</p>

<p>この、いったん提出してもらって、こちらから指摘して直してもらう、というのを、前回は個別に IRC とか口頭で話して、といった形でやってたんですが、今回は GitHub を利用することで、コミットの特定の行に対してピンポイントでコメントをつけることができて、すべて GitHub 上で完結できて便利でした。</p>

<p>また、GitHub のタイムラインを IRC にも流していたりするので、そのやりとりもすべて全社員が見る IRC チャンネルに流れる、という形で、よりオープンな評価ができたかな、と思っています。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[札幌Ruby会議2012 と YAPC::Asia Tokyo 2012 で登壇します]]></title>
    <link href="http://mizzy.org/blog/2012/08/07/1/" />
    <updated>2012-08-07T00:05:03+09:00</updated>
    <id>http://mizzy.org/blog/2012/08/07/1/</id>
    <content type="html"><![CDATA[
<p><a href="http://sapporo.rubykaigi.org/">札幌Ruby会議2012</a> と <a href="http://yapcasia.org/2012/">YAPC::Asia Tokyo 2012</a> で登壇することになりました。</p>

<p>札幌Ruby会議と YAPC::Asia Tokyo 2012 前夜祭では、「Sqale の裏側」というタイトルで、<a href="http://www.paperboy.co.jp/">ペパボ</a> が提供する PaaS「<a href="http://sqale.jp/">Sqale</a>」のアーキテクチャなどについて話します。</p>

<ul>
<li><a href="http://sapporo.rubykaigi.org/2012/ja/schedule/details/48.html">札幌Ruby会議2012でのトークアジェンダ</a></li>
<li><a href="http://yapcasia.org/2012/talk/show/048d468c-ab9e-11e1-a3b5-2a656aeab6a4">YAPC::Asia Tokyo 2012でのトークアジェンダ</a></li>
</ul>

<p>どちらのカンファレンスも内容的には同じ話をする予定で、Ruby/Perl 成分がほとんどなく、主に以下のようなキーワードについてお話をすることになるかと思います。</p>

<ul>
<li>Puppet/Chef</li>
<li>Resque</li>
<li>Unicorn</li>
<li>AWS(EC2, ELB, RDS, Route53)</li>
<li>Patched version of OpenSSH</li>
<li>Patched version of Linux kernel</li>
<li>OpenResty(ngx_openresty)</li>
<li>Redis</li>
<li>Git</li>
<li>LXC</li>
<li>etc.</li>
</ul>

<p>なので、Ruby や Perl も興味あるんだけど、PaaS の中身やミドルウェア、Linux カーネル などにより興味がある、という方はぜひ聞きに来てください。</p>

<p>また、<a href="http://yapcasia.org/2012/talk/show/79991522-db79-11e1-be22-0d4e6aeab6a4">YAPC::Asia Tokyo 2012 本編でも登壇</a> します。</p>

<p>こちらの方は、クロージング直前のいわゆるキーノートスピーチ的なもので、上の「Sqale の裏側」と異なり、技術的な成分はだいぶ薄めです。タイトルも「How Perl Changed My Life」と、どこかで聞いたことがある上に、時期を逸した感もありますが、タイトル通り、Perl や Perl コミュニティが自分の技術者人生に与えた影響についてお話させて頂く予定です。</p>

<p>このクロージング直前の枠、過去のトークを並べてみると、</p>

<ul>
<li><a href="http://tokyo.yapcasia.org/sessions/keynote.html">Keynote</a> by Larry Wall 氏</li>
<li><a href="http://tokyo2007.yapcasia.org/sessions/2007/02/perl_program_repair_shop_and_r.html">Perl Program Repair Shop and Red Flags</a> by Mark Jason Dominus 氏</li>
<li><a href="http://conferences.yapcasia.org/ya2008/user/780">Perl Is unDead</a> by Michael Schwern 氏</li>
<li><a href="http://conferences.yapcasia.org/ya2009/user/1681">Why I Stick With Perl</a> by Jonathan Rockway 氏</li>
<li><a href="http://yapcasia.org/2010/talks/63D5EA98-BC8C-11DF-8791-B9FC0F276C45">The Tale of Plack</a> by miyagawa さん</li>
<li><a href="http://yapcasia.org/2011/talk/66">Managing A Band Of Hackers</a> by hidek さん </li>
</ul>

<p>とまあすごい顔ぶれで、なんで自分なんかが選ばれたんだろう、という感じなんですが、気負わず自分らしい話ができればいいな、と思っています。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[「Mobageを支える技術」を献本いただいた]]></title>
    <link href="http://mizzy.org/blog/2012/06/12/1/" />
    <updated>2012-06-12T22:02:03+09:00</updated>
    <id>http://mizzy.org/blog/2012/06/12/1/</id>
    <content type="html"><![CDATA[
<p><img src="http://distilleryimage6.s3.amazonaws.com/871bb9a0b47511e1aebc1231381b647a_7.jpg"></p>

<p><a href="http://gihyo.jp/book/2012/978-4-7741-5111-3">「Mobageを支える技術 ～ソーシャルゲームの舞台裏～」</a> を <a href="http://twitter.com/nekokak">@nekokak</a> さんよりご献本いただきました。ありがとうございます！</p>

<p>写真は <a href="http://kentaro.hatenablog.com/">antipop</a> (<a href="http://twitter.com/kentaro">@kentaro</a>)さん撮影。</p>

<p>先週会社に届いてたのですが、福岡出張だったのと、昨日は体調不良により一回休みだったので、本日ようやく手にしました。</p>

<p>書評系のエントリ書くのは苦手で、薄っぺらいことしか書けないので、とりあえず宣伝＆自慢のみです。</p>

<p>トランスフォーマーの被り物にはなんの意味もありません。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[37歳の大学入学 ー 出願から入学まで]]></title>
    <link href="http://mizzy.org/blog/2012/04/25/1/" />
    <updated>2012-04-25T22:46:53+09:00</updated>
    <id>http://mizzy.org/blog/2012/04/25/1/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2012/04/24/2/">前回</a> は大学選びについて書いたので、今回は大学に入学するまでの過程について書きます。</p>

<p>大学を決めたら次にやることは、募集要項や出願書類などの資料請求ですね。自分は <a href="http://www.amazon.co.jp/dp/4862073735">社会人&amp;学生のための大学・大学院選び 2012年度版</a> に掲載されている資料請求用サイトから請求しました。複数の学校にまとめて請求ができるので便利です。（念のため、サイバー大学の資料も併せて請求しました。）1 校だけであれば、ウェブサイトに資料請求窓口がある大学もありますので、そちらを利用しても良いですね。</p>

<p>資料が届いたら、出願書類を揃えていきます。自分が提出したのは、以下のようなものです。正科生なのか科目履修生なのかとか、2年次以降からの編入なのかとか、人によって多少異なります。</p>

<ul>
<li><p>資料に含まれているもので、必要事項を記入したり、写真や切手を貼付して提出したもの</p>

<ul>
<li>志望理由書（400字程度）</li>
<li>通知カード

<ul>
<li>自分の住所氏名を書いた宛名シールですね。入学許可書などが同封された封筒に貼られます。</li>
</ul></li>
<li>出願書類通知書

<ul>
<li>出願書類を大学側で受け取ったあと、書類に不備がなかったかどうかを知らせてくれるハガキです。切手を貼って提出します。</li>
</ul></li>
<li>身上調査書および誓約書

<ul>
<li>身上調査書には、住所、氏名、学歴、緊急連絡先、家族構成といったものを記入します。</li>
<li>誓約書には、自分の住所、氏名、捺印等の他に、保証人の住所、氏名、捺印等も必要です。保証人は近くに住む伯父にお願いしました。</li>
</ul></li>
<li>入学時アンケート</li>
</ul></li>
<li><p>お金の振込みが必要なもの</p>

<ul>
<li>志願票

<ul>
<li>振込依頼書とセットになっていて、金融機関で収納印を押してもらう必要があります。</li>
<li>自分の場合、正科生の2年次編入学で、選考料や授業料など含めて、20 万円弱でした。入学が許可されなかったり、辞退した場合には、このうちの授業料分およそ15 万円は返却されるようです。</li>
</ul></li>
</ul></li>
<li><p>自分で取り寄せたりしたもの</p>

<ul>
<li>卒業証明書</li>
<li>成績証明書</li>
<li>健康診断書

<ul>
<li>健康診断書は、所定の用紙があり、3ヶ月以内に発行のもの、という条件があるため、会社で受けたものは使えませんでした。また、定められた項目がどの病院でも診断してもらえる、というわけではないですし、診断には予約が必要だったりするので、これは早めに用意するのがいいですね。</li>
</ul></li>
<li>講義概要またはシラバス（学士入学・編入学希望者のみ）

<ul>
<li>これは、編入学の場合に、以前の大学で取得した単位を、入学する大学の単位として認定してもらうために必要になるのですが、提出しないと認定してもらえない、というわけではないです。成績証明書からわかる科目名だけでも認定してもらえます。成績証明書だけでは不足の場合に、補強するための資料として必要なようです。自分は提出していません。</li>
</ul></li>
</ul></li>
</ul>

<p>これらを提出した後に、1, 2 週間ほどで出願書類通知書が返送されてきて、提出書類に特に不備はなかったことと、入学許可書等の発送は、◯月×日頃になる、ということが知らされました。無試験であり、2年次編入学の募集枠は若干名となっていて、合格基準がさっぱりわからず、書類送付してから若干不安な日々を送っていたのですが、この通知書によって、どうやら入学が許可されるらしい、ということがわかり、一安心でした。</p>

<p>その後、入学許可書等が予定通り送られ、同封された紙に「単位認定を希望するものは出身大学のシラバスを送付してください」と書かれているのですが、事情により出身大学のシラバスの取得が厳しそうだったため、教務課にメールで確認してみたところ、成績証明書だけでも、上限の32単位まで認定してもらえる、ということがわかり、シラバスを送付する必要はありませんでした。</p>

<p>次回は科目履修や学習計画について書く予定です。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[37歳の大学選び]]></title>
    <link href="http://mizzy.org/blog/2012/04/24/2/" />
    <updated>2012-04-24T23:14:20+09:00</updated>
    <id>http://mizzy.org/blog/2012/04/24/2/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2012/04/14/1/">37歳で大学生になりました</a> のつづき。</p>

<p>大学を選ぶにあたって、まず最初に考えたのは、以下の2点。</p>

<ol>
<li>全日か？夜間か？通信か？</li>
<li>大学か？大学院か？</li>
</ol>

<p>1 については、子供が5人いて妻は専業主婦であり、働かずに何年も暮らしていけるほどの貯蓄もないため、全日制はまず却下。夜間か通信かについては、職場か家から近くて通いやすいところであれば、夜間もありかな、とは思ったけれど、実際にそういった条件のところがなさそう、ということと、コンピュータについて学ぶ、ということであれば、曲がりなりにもプロとして15年近く IT 技術者やってるし、コンピュータは小学生の頃から触っていて、ベーマガで育った人間でもあるし、全然知らないわけではないので、決まった時間縛られるよりも、自分のペースで学びたい、ということで、通信にすることに。（どうでもいいですが、ベーマガの「読者の闘技場」のコーナー、書籍化されたりしないですかね。）</p>

<p>2 については、自分が欲しいのは情報工学の学位だけど、現在持っているのは経済学の学士なので、そこからいきなり情報工学の修士というのもハードルが高いかな、ということで、とりあえず院は選択しなかった。修士が欲しくなったら、学士を取得した後にまた考えようかと。また、自分が入学した帝京大学の通信教育課程の場合、大学であれば試験がないけれど、院は試験があり、直近の4月の入学を考えると準備が間に合わない、という理由もあったり。</p>

<p>具体的にどこの大学にするかは、妻が買っておいてくれた <a href="http://www.amazon.co.jp/dp/4862073735">社会人&amp;学生のための大学・大学院選び 2012年度版</a> にひと通り目を通したところ、通信教育で情報系となると、自分が入学した <a href="http://www.riko.teikyo-u.ac.jp/_renewal/tsushin/tsushin_top.html">帝京大学</a> か、<a href="http://www.cyber-u.ac.jp/">サイバー大学</a> ぐらいしか選択肢がなく、以下の理由により、帝京大学の方を選択。</p>

<ul>
<li>サイバー大学は学費が高い。単位毎にお金がかかる。（1単位21,000円。）帝京大学は単位取得数関係なく年間15万円。</li>
<li>サイバー大学で取得できるのはIT総合学の学士だが、自分は工学の学士が欲しい。</li>
<li>取得できる学士の違いにも表れているけれど、サイバー大学のカリキュラムはどちらかというと応用的なものが多く、自分が学びたい情報工学の基礎とは方向性が違う。</li>
</ul>

<p>というわけで、選択肢が少なく、あれこれ悩むことなく大学は決まった。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[nebel で静的サイト作成]]></title>
    <link href="http://mizzy.org/blog/2012/04/24/1/" />
    <updated>2012-04-24T19:52:36+09:00</updated>
    <id>http://mizzy.org/blog/2012/04/24/1/</id>
    <content type="html"><![CDATA[
<p><a href="/blog/2012/04/07/1/">stellar</a> という静的サイトジェネレータをつくっていたのですが、<a href="https://rubygems.org/gems/stellar">名前がモロ被りな gem</a> があったので、<a href="https://github.com/mizzy/nebel">nebel</a> と名前を変更しました。</p>

<p>nebel の方は、静的サイト生成に利用するコマンドと、確認用のテストサーバコマンドのみを含んでいて、実際のサイト生成用のテンプレートやユーティリティツールは、<a href="https://github.com/mizzy/nebel-site">nebel-site</a> の方にあります。(Jekyll と Octopress のような関係です。)</p>

<p>使い方は <a href="https://github.com/mizzy/nebel-site/blob/master/README.md">nebel-site の README</a> にまとめてあるのですが、こちらのブログに日本語でまとめておきます。</p>

<h2>セットアップ</h2>

<p>git clone して、必要な gems を bundle install します。nebel も一緒に入ります。</p>

<pre><code>$ git clone git://github.com/mizzy/nebel-site.git
$ cd nebel-site
$ bundle install
</code></pre>

<h2>ファイルの修正や作成</h2>

<ul>
<li>layouts/post.html

<ul>
<li>エントリのテンプレートなので、適宜修正してください。</li>
</ul></li>
<li>layouts/atom.xml

<ul>
<li>Atom フィードのテンプレートなので、適宜修正してください。</li>
</ul></li>
<li>static/

<ul>
<li>静的ファイル置き場。画像、CSS、JavaScript など、好きなファイルを置いてください。サブディレクトリも作成できます。</li>
</ul></li>
</ul>

<h2>エントリファイルの作成</h2>

<p>以下のような内容でエントリファイルを作成します。ファイル名は、.md か .markdown で終わっていれば、何でもいいです。</p>

<pre><code>---
title: エントリのタイトル
date: 2012-04-24 18:15:59 +0900
---

エントリの本文。Markdown 記法が使えます。
</code></pre>

<h2>nebel コマンドの実行</h2>

<pre><code>$ bundle exec nebel
</code></pre>

<p>nebel コマンドを実行すると、posts 以下のエントリファイルを処理して、生成されたファイルを public 以下に配置します。また、static ディレクトリ以下のファイルもすべて、public 以下にコピーされます。</p>

<h2>テストサーバで確認</h2>

<p>以下のコマンドでテストサーバが立ち上がるので、http://localhost:5000/ にアクセスすると、生成されたコンテンツの確認ができます。</p>

<pre><code>$ bundle exec nebel-server
</code></pre>

<h2>コンテンツの公開</h2>

<p>public ディレクトリ以下のファイルを、お好きなサーバにアップロードしてください。</p>

<h2>ユーティリティツール</h2>

<p>更に便利に利用するためのユーティリティツールも同梱してます。</p>

<h3>エントリファイルの作成</h3>

<p>thor post:create で、エントリファイルを作成します。</p>

<pre><code>$ thor post:create entry-title
</code></pre>

<p>と実行すると、posts/2012-04-24-entry-title.markdown といったファイル名で、以下の様な内容のファイルを作成し、さらにエディタで開いてくれます。(ただし Mac のみ。)</p>

<pre><code>---
title: entry-title
date: 2012-04-24 19:25:34 +0900
---
</code></pre>

<h3>nebel コマンドの自動実行</h3>

<p>同僚の <a href="https://github.com/banyan">@banyan</a> が Guardfile をつくってくれたので、ファイルが変更されると自動的に nebel コマンドを実行して、コンテンツを再生成します。</p>

<pre><code>$ bundle exec nebel-server
</code></pre>

<p><a href="https://github.com/guard/guard-livereload">guard-livereload</a> も利用しているので、ブラウザでの自動リロードにも対応してます。</p>

<h3>テストサーバ起動＆諸々自動化</h3>

<pre><code>$ thor server:start
</code></pre>

<p>を実行すると、以下の一連の処理が自動的に実行されます。</p>

<ul>
<li>テストサーバの起動</li>
<li>ブラウザで http://localhost:5000/ を開く</li>
<li>ファイル変更を検知して自動生成</li>
<li>ブラウザの自動リロード</li>
</ul>

<p>こんな感じで、かなり便利になった。</p>

]]></content>
  </entry>


</feed>
